"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/socks";
exports.ids = ["vendor-chunks/socks"];
exports.modules = {

/***/ "(ssr)/./node_modules/socks/build/client/socksclient.js":
/*!********************************************************!*\
  !*** ./node_modules/socks/build/client/socksclient.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SocksClientError = exports.SocksClient = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst ip = __webpack_require__(/*! ip */ \"(ssr)/./node_modules/ip/lib/ip.js\");\nconst smart_buffer_1 = __webpack_require__(/*! smart-buffer */ \"(ssr)/./node_modules/smart-buffer/build/smartbuffer.js\");\nconst constants_1 = __webpack_require__(/*! ../common/constants */ \"(ssr)/./node_modules/socks/build/common/constants.js\");\nconst helpers_1 = __webpack_require__(/*! ../common/helpers */ \"(ssr)/./node_modules/socks/build/common/helpers.js\");\nconst receivebuffer_1 = __webpack_require__(/*! ../common/receivebuffer */ \"(ssr)/./node_modules/socks/build/common/receivebuffer.js\");\nconst util_1 = __webpack_require__(/*! ../common/util */ \"(ssr)/./node_modules/socks/build/common/util.js\");\nObject.defineProperty(exports, \"SocksClientError\", ({\n    enumerable: true,\n    get: function() {\n        return util_1.SocksClientError;\n    }\n}));\nclass SocksClient extends events_1.EventEmitter {\n    constructor(options){\n        super();\n        this.options = Object.assign({}, options);\n        // Validate SocksClientOptions\n        (0, helpers_1.validateSocksClientOptions)(options);\n        // Default state\n        this.setState(constants_1.SocksClientState.Created);\n    }\n    /**\n     * Creates a new SOCKS connection.\n     *\n     * Note: Supports callbacks and promises. Only supports the connect command.\n     * @param options { SocksClientOptions } Options.\n     * @param callback { Function } An optional callback function.\n     * @returns { Promise }\n     */ static createConnection(options, callback) {\n        return new Promise((resolve, reject)=>{\n            // Validate SocksClientOptions\n            try {\n                (0, helpers_1.validateSocksClientOptions)(options, [\n                    \"connect\"\n                ]);\n            } catch (err) {\n                if (typeof callback === \"function\") {\n                    callback(err);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    return resolve(err); // Resolves pending promise (prevents memory leaks).\n                } else {\n                    return reject(err);\n                }\n            }\n            const client = new SocksClient(options);\n            client.connect(options.existing_socket);\n            client.once(\"established\", (info)=>{\n                client.removeAllListeners();\n                if (typeof callback === \"function\") {\n                    callback(null, info);\n                    resolve(info); // Resolves pending promise (prevents memory leaks).\n                } else {\n                    resolve(info);\n                }\n            });\n            // Error occurred, failed to establish connection.\n            client.once(\"error\", (err)=>{\n                client.removeAllListeners();\n                if (typeof callback === \"function\") {\n                    callback(err);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    resolve(err); // Resolves pending promise (prevents memory leaks).\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a new SOCKS connection chain to a destination host through 2 or more SOCKS proxies.\n     *\n     * Note: Supports callbacks and promises. Only supports the connect method.\n     * Note: Implemented via createConnection() factory function.\n     * @param options { SocksClientChainOptions } Options\n     * @param callback { Function } An optional callback function.\n     * @returns { Promise }\n     */ static createConnectionChain(options, callback) {\n        // eslint-disable-next-line no-async-promise-executor\n        return new Promise((resolve, reject)=>__awaiter(this, void 0, void 0, function*() {\n                // Validate SocksClientChainOptions\n                try {\n                    (0, helpers_1.validateSocksClientChainOptions)(options);\n                } catch (err) {\n                    if (typeof callback === \"function\") {\n                        callback(err);\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        return resolve(err); // Resolves pending promise (prevents memory leaks).\n                    } else {\n                        return reject(err);\n                    }\n                }\n                // Shuffle proxies\n                if (options.randomizeChain) {\n                    (0, util_1.shuffleArray)(options.proxies);\n                }\n                try {\n                    let sock;\n                    for(let i = 0; i < options.proxies.length; i++){\n                        const nextProxy = options.proxies[i];\n                        // If we've reached the last proxy in the chain, the destination is the actual destination, otherwise it's the next proxy.\n                        const nextDestination = i === options.proxies.length - 1 ? options.destination : {\n                            host: options.proxies[i + 1].host || options.proxies[i + 1].ipaddress,\n                            port: options.proxies[i + 1].port\n                        };\n                        // Creates the next connection in the chain.\n                        const result = yield SocksClient.createConnection({\n                            command: \"connect\",\n                            proxy: nextProxy,\n                            destination: nextDestination,\n                            existing_socket: sock\n                        });\n                        // If sock is undefined, assign it here.\n                        sock = sock || result.socket;\n                    }\n                    if (typeof callback === \"function\") {\n                        callback(null, {\n                            socket: sock\n                        });\n                        resolve({\n                            socket: sock\n                        }); // Resolves pending promise (prevents memory leaks).\n                    } else {\n                        resolve({\n                            socket: sock\n                        });\n                    }\n                } catch (err) {\n                    if (typeof callback === \"function\") {\n                        callback(err);\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        resolve(err); // Resolves pending promise (prevents memory leaks).\n                    } else {\n                        reject(err);\n                    }\n                }\n            }));\n    }\n    /**\n     * Creates a SOCKS UDP Frame.\n     * @param options\n     */ static createUDPFrame(options) {\n        const buff = new smart_buffer_1.SmartBuffer();\n        buff.writeUInt16BE(0);\n        buff.writeUInt8(options.frameNumber || 0);\n        // IPv4/IPv6/Hostname\n        if (net.isIPv4(options.remoteHost.host)) {\n            buff.writeUInt8(constants_1.Socks5HostType.IPv4);\n            buff.writeUInt32BE(ip.toLong(options.remoteHost.host));\n        } else if (net.isIPv6(options.remoteHost.host)) {\n            buff.writeUInt8(constants_1.Socks5HostType.IPv6);\n            buff.writeBuffer(ip.toBuffer(options.remoteHost.host));\n        } else {\n            buff.writeUInt8(constants_1.Socks5HostType.Hostname);\n            buff.writeUInt8(Buffer.byteLength(options.remoteHost.host));\n            buff.writeString(options.remoteHost.host);\n        }\n        // Port\n        buff.writeUInt16BE(options.remoteHost.port);\n        // Data\n        buff.writeBuffer(options.data);\n        return buff.toBuffer();\n    }\n    /**\n     * Parses a SOCKS UDP frame.\n     * @param data\n     */ static parseUDPFrame(data) {\n        const buff = smart_buffer_1.SmartBuffer.fromBuffer(data);\n        buff.readOffset = 2;\n        const frameNumber = buff.readUInt8();\n        const hostType = buff.readUInt8();\n        let remoteHost;\n        if (hostType === constants_1.Socks5HostType.IPv4) {\n            remoteHost = ip.fromLong(buff.readUInt32BE());\n        } else if (hostType === constants_1.Socks5HostType.IPv6) {\n            remoteHost = ip.toString(buff.readBuffer(16));\n        } else {\n            remoteHost = buff.readString(buff.readUInt8());\n        }\n        const remotePort = buff.readUInt16BE();\n        return {\n            frameNumber,\n            remoteHost: {\n                host: remoteHost,\n                port: remotePort\n            },\n            data: buff.readBuffer()\n        };\n    }\n    /**\n     * Internal state setter. If the SocksClient is in an error state, it cannot be changed to a non error state.\n     */ setState(newState) {\n        if (this.state !== constants_1.SocksClientState.Error) {\n            this.state = newState;\n        }\n    }\n    /**\n     * Starts the connection establishment to the proxy and destination.\n     * @param existingSocket Connected socket to use instead of creating a new one (internal use).\n     */ connect(existingSocket) {\n        this.onDataReceived = (data)=>this.onDataReceivedHandler(data);\n        this.onClose = ()=>this.onCloseHandler();\n        this.onError = (err)=>this.onErrorHandler(err);\n        this.onConnect = ()=>this.onConnectHandler();\n        // Start timeout timer (defaults to 30 seconds)\n        const timer = setTimeout(()=>this.onEstablishedTimeout(), this.options.timeout || constants_1.DEFAULT_TIMEOUT);\n        // check whether unref is available as it differs from browser to NodeJS (#33)\n        if (timer.unref && typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        // If an existing socket is provided, use it to negotiate SOCKS handshake. Otherwise create a new Socket.\n        if (existingSocket) {\n            this.socket = existingSocket;\n        } else {\n            this.socket = new net.Socket();\n        }\n        // Attach Socket error handlers.\n        this.socket.once(\"close\", this.onClose);\n        this.socket.once(\"error\", this.onError);\n        this.socket.once(\"connect\", this.onConnect);\n        this.socket.on(\"data\", this.onDataReceived);\n        this.setState(constants_1.SocksClientState.Connecting);\n        this.receiveBuffer = new receivebuffer_1.ReceiveBuffer();\n        if (existingSocket) {\n            this.socket.emit(\"connect\");\n        } else {\n            this.socket.connect(this.getSocketOptions());\n            if (this.options.set_tcp_nodelay !== undefined && this.options.set_tcp_nodelay !== null) {\n                this.socket.setNoDelay(!!this.options.set_tcp_nodelay);\n            }\n        }\n        // Listen for established event so we can re-emit any excess data received during handshakes.\n        this.prependOnceListener(\"established\", (info)=>{\n            setImmediate(()=>{\n                if (this.receiveBuffer.length > 0) {\n                    const excessData = this.receiveBuffer.get(this.receiveBuffer.length);\n                    info.socket.emit(\"data\", excessData);\n                }\n                info.socket.resume();\n            });\n        });\n    }\n    // Socket options (defaults host/port to options.proxy.host/options.proxy.port)\n    getSocketOptions() {\n        return Object.assign(Object.assign({}, this.options.socket_options), {\n            host: this.options.proxy.host || this.options.proxy.ipaddress,\n            port: this.options.proxy.port\n        });\n    }\n    /**\n     * Handles internal Socks timeout callback.\n     * Note: If the Socks client is not BoundWaitingForConnection or Established, the connection will be closed.\n     */ onEstablishedTimeout() {\n        if (this.state !== constants_1.SocksClientState.Established && this.state !== constants_1.SocksClientState.BoundWaitingForConnection) {\n            this.closeSocket(constants_1.ERRORS.ProxyConnectionTimedOut);\n        }\n    }\n    /**\n     * Handles Socket connect event.\n     */ onConnectHandler() {\n        this.setState(constants_1.SocksClientState.Connected);\n        // Send initial handshake.\n        if (this.options.proxy.type === 4) {\n            this.sendSocks4InitialHandshake();\n        } else {\n            this.sendSocks5InitialHandshake();\n        }\n        this.setState(constants_1.SocksClientState.SentInitialHandshake);\n    }\n    /**\n     * Handles Socket data event.\n     * @param data\n     */ onDataReceivedHandler(data) {\n        /*\n          All received data is appended to a ReceiveBuffer.\n          This makes sure that all the data we need is received before we attempt to process it.\n        */ this.receiveBuffer.append(data);\n        // Process data that we have.\n        this.processData();\n    }\n    /**\n     * Handles processing of the data we have received.\n     */ processData() {\n        // If we have enough data to process the next step in the SOCKS handshake, proceed.\n        while(this.state !== constants_1.SocksClientState.Established && this.state !== constants_1.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize){\n            // Sent initial handshake, waiting for response.\n            if (this.state === constants_1.SocksClientState.SentInitialHandshake) {\n                if (this.options.proxy.type === 4) {\n                    // Socks v4 only has one handshake response.\n                    this.handleSocks4FinalHandshakeResponse();\n                } else {\n                    // Socks v5 has two handshakes, handle initial one here.\n                    this.handleInitialSocks5HandshakeResponse();\n                }\n            // Sent auth request for Socks v5, waiting for response.\n            } else if (this.state === constants_1.SocksClientState.SentAuthentication) {\n                this.handleInitialSocks5AuthenticationHandshakeResponse();\n            // Sent final Socks v5 handshake, waiting for final response.\n            } else if (this.state === constants_1.SocksClientState.SentFinalHandshake) {\n                this.handleSocks5FinalHandshakeResponse();\n            // Socks BIND established. Waiting for remote connection via proxy.\n            } else if (this.state === constants_1.SocksClientState.BoundWaitingForConnection) {\n                if (this.options.proxy.type === 4) {\n                    this.handleSocks4IncomingConnectionResponse();\n                } else {\n                    this.handleSocks5IncomingConnectionResponse();\n                }\n            } else {\n                this.closeSocket(constants_1.ERRORS.InternalError);\n                break;\n            }\n        }\n    }\n    /**\n     * Handles Socket close event.\n     * @param had_error\n     */ onCloseHandler() {\n        this.closeSocket(constants_1.ERRORS.SocketClosed);\n    }\n    /**\n     * Handles Socket error event.\n     * @param err\n     */ onErrorHandler(err) {\n        this.closeSocket(err.message);\n    }\n    /**\n     * Removes internal event listeners on the underlying Socket.\n     */ removeInternalSocketHandlers() {\n        // Pauses data flow of the socket (this is internally resumed after 'established' is emitted)\n        this.socket.pause();\n        this.socket.removeListener(\"data\", this.onDataReceived);\n        this.socket.removeListener(\"close\", this.onClose);\n        this.socket.removeListener(\"error\", this.onError);\n        this.socket.removeListener(\"connect\", this.onConnect);\n    }\n    /**\n     * Closes and destroys the underlying Socket. Emits an error event.\n     * @param err { String } An error string to include in error event.\n     */ closeSocket(err) {\n        // Make sure only one 'error' event is fired for the lifetime of this SocksClient instance.\n        if (this.state !== constants_1.SocksClientState.Error) {\n            // Set internal state to Error.\n            this.setState(constants_1.SocksClientState.Error);\n            // Destroy Socket\n            this.socket.destroy();\n            // Remove internal listeners\n            this.removeInternalSocketHandlers();\n            // Fire 'error' event.\n            this.emit(\"error\", new util_1.SocksClientError(err, this.options));\n        }\n    }\n    /**\n     * Sends initial Socks v4 handshake request.\n     */ sendSocks4InitialHandshake() {\n        const userId = this.options.proxy.userId || \"\";\n        const buff = new smart_buffer_1.SmartBuffer();\n        buff.writeUInt8(0x04);\n        buff.writeUInt8(constants_1.SocksCommand[this.options.command]);\n        buff.writeUInt16BE(this.options.destination.port);\n        // Socks 4 (IPv4)\n        if (net.isIPv4(this.options.destination.host)) {\n            buff.writeBuffer(ip.toBuffer(this.options.destination.host));\n            buff.writeStringNT(userId);\n        // Socks 4a (hostname)\n        } else {\n            buff.writeUInt8(0x00);\n            buff.writeUInt8(0x00);\n            buff.writeUInt8(0x00);\n            buff.writeUInt8(0x01);\n            buff.writeStringNT(userId);\n            buff.writeStringNT(this.options.destination.host);\n        }\n        this.nextRequiredPacketBufferSize = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks4Response;\n        this.socket.write(buff.toBuffer());\n    }\n    /**\n     * Handles Socks v4 handshake response.\n     * @param data\n     */ handleSocks4FinalHandshakeResponse() {\n        const data = this.receiveBuffer.get(8);\n        if (data[1] !== constants_1.Socks4Response.Granted) {\n            this.closeSocket(`${constants_1.ERRORS.Socks4ProxyRejectedConnection} - (${constants_1.Socks4Response[data[1]]})`);\n        } else {\n            // Bind response\n            if (constants_1.SocksCommand[this.options.command] === constants_1.SocksCommand.bind) {\n                const buff = smart_buffer_1.SmartBuffer.fromBuffer(data);\n                buff.readOffset = 2;\n                const remoteHost = {\n                    port: buff.readUInt16BE(),\n                    host: ip.fromLong(buff.readUInt32BE())\n                };\n                // If host is 0.0.0.0, set to proxy host.\n                if (remoteHost.host === \"0.0.0.0\") {\n                    remoteHost.host = this.options.proxy.ipaddress;\n                }\n                this.setState(constants_1.SocksClientState.BoundWaitingForConnection);\n                this.emit(\"bound\", {\n                    remoteHost,\n                    socket: this.socket\n                });\n            // Connect response\n            } else {\n                this.setState(constants_1.SocksClientState.Established);\n                this.removeInternalSocketHandlers();\n                this.emit(\"established\", {\n                    socket: this.socket\n                });\n            }\n        }\n    }\n    /**\n     * Handles Socks v4 incoming connection request (BIND)\n     * @param data\n     */ handleSocks4IncomingConnectionResponse() {\n        const data = this.receiveBuffer.get(8);\n        if (data[1] !== constants_1.Socks4Response.Granted) {\n            this.closeSocket(`${constants_1.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${constants_1.Socks4Response[data[1]]})`);\n        } else {\n            const buff = smart_buffer_1.SmartBuffer.fromBuffer(data);\n            buff.readOffset = 2;\n            const remoteHost = {\n                port: buff.readUInt16BE(),\n                host: ip.fromLong(buff.readUInt32BE())\n            };\n            this.setState(constants_1.SocksClientState.Established);\n            this.removeInternalSocketHandlers();\n            this.emit(\"established\", {\n                remoteHost,\n                socket: this.socket\n            });\n        }\n    }\n    /**\n     * Sends initial Socks v5 handshake request.\n     */ sendSocks5InitialHandshake() {\n        const buff = new smart_buffer_1.SmartBuffer();\n        // By default we always support no auth.\n        const supportedAuthMethods = [\n            constants_1.Socks5Auth.NoAuth\n        ];\n        // We should only tell the proxy we support user/pass auth if auth info is actually provided.\n        // Note: As of Tor v0.3.5.7+, if user/pass auth is an option from the client, by default it will always take priority.\n        if (this.options.proxy.userId || this.options.proxy.password) {\n            supportedAuthMethods.push(constants_1.Socks5Auth.UserPass);\n        }\n        // Custom auth method?\n        if (this.options.proxy.custom_auth_method !== undefined) {\n            supportedAuthMethods.push(this.options.proxy.custom_auth_method);\n        }\n        // Build handshake packet\n        buff.writeUInt8(0x05);\n        buff.writeUInt8(supportedAuthMethods.length);\n        for (const authMethod of supportedAuthMethods){\n            buff.writeUInt8(authMethod);\n        }\n        this.nextRequiredPacketBufferSize = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse;\n        this.socket.write(buff.toBuffer());\n        this.setState(constants_1.SocksClientState.SentInitialHandshake);\n    }\n    /**\n     * Handles initial Socks v5 handshake response.\n     * @param data\n     */ handleInitialSocks5HandshakeResponse() {\n        const data = this.receiveBuffer.get(2);\n        if (data[0] !== 0x05) {\n            this.closeSocket(constants_1.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion);\n        } else if (data[1] === constants_1.SOCKS5_NO_ACCEPTABLE_AUTH) {\n            this.closeSocket(constants_1.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType);\n        } else {\n            // If selected Socks v5 auth method is no auth, send final handshake request.\n            if (data[1] === constants_1.Socks5Auth.NoAuth) {\n                this.socks5ChosenAuthType = constants_1.Socks5Auth.NoAuth;\n                this.sendSocks5CommandRequest();\n            // If selected Socks v5 auth method is user/password, send auth handshake.\n            } else if (data[1] === constants_1.Socks5Auth.UserPass) {\n                this.socks5ChosenAuthType = constants_1.Socks5Auth.UserPass;\n                this.sendSocks5UserPassAuthentication();\n            // If selected Socks v5 auth method is the custom_auth_method, send custom handshake.\n            } else if (data[1] === this.options.proxy.custom_auth_method) {\n                this.socks5ChosenAuthType = this.options.proxy.custom_auth_method;\n                this.sendSocks5CustomAuthentication();\n            } else {\n                this.closeSocket(constants_1.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);\n            }\n        }\n    }\n    /**\n     * Sends Socks v5 user & password auth handshake.\n     *\n     * Note: No auth and user/pass are currently supported.\n     */ sendSocks5UserPassAuthentication() {\n        const userId = this.options.proxy.userId || \"\";\n        const password = this.options.proxy.password || \"\";\n        const buff = new smart_buffer_1.SmartBuffer();\n        buff.writeUInt8(0x01);\n        buff.writeUInt8(Buffer.byteLength(userId));\n        buff.writeString(userId);\n        buff.writeUInt8(Buffer.byteLength(password));\n        buff.writeString(password);\n        this.nextRequiredPacketBufferSize = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse;\n        this.socket.write(buff.toBuffer());\n        this.setState(constants_1.SocksClientState.SentAuthentication);\n    }\n    sendSocks5CustomAuthentication() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size;\n            this.socket.write((yield this.options.proxy.custom_auth_request_handler()));\n            this.setState(constants_1.SocksClientState.SentAuthentication);\n        });\n    }\n    handleSocks5CustomAuthHandshakeResponse(data) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return yield this.options.proxy.custom_auth_response_handler(data);\n        });\n    }\n    handleSocks5AuthenticationNoAuthHandshakeResponse(data) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return data[1] === 0x00;\n        });\n    }\n    handleSocks5AuthenticationUserPassHandshakeResponse(data) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return data[1] === 0x00;\n        });\n    }\n    /**\n     * Handles Socks v5 auth handshake response.\n     * @param data\n     */ handleInitialSocks5AuthenticationHandshakeResponse() {\n        return __awaiter(this, void 0, void 0, function*() {\n            this.setState(constants_1.SocksClientState.ReceivedAuthenticationResponse);\n            let authResult = false;\n            if (this.socks5ChosenAuthType === constants_1.Socks5Auth.NoAuth) {\n                authResult = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2));\n            } else if (this.socks5ChosenAuthType === constants_1.Socks5Auth.UserPass) {\n                authResult = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2));\n            } else if (this.socks5ChosenAuthType === this.options.proxy.custom_auth_method) {\n                authResult = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size));\n            }\n            if (!authResult) {\n                this.closeSocket(constants_1.ERRORS.Socks5AuthenticationFailed);\n            } else {\n                this.sendSocks5CommandRequest();\n            }\n        });\n    }\n    /**\n     * Sends Socks v5 final handshake request.\n     */ sendSocks5CommandRequest() {\n        const buff = new smart_buffer_1.SmartBuffer();\n        buff.writeUInt8(0x05);\n        buff.writeUInt8(constants_1.SocksCommand[this.options.command]);\n        buff.writeUInt8(0x00);\n        // ipv4, ipv6, domain?\n        if (net.isIPv4(this.options.destination.host)) {\n            buff.writeUInt8(constants_1.Socks5HostType.IPv4);\n            buff.writeBuffer(ip.toBuffer(this.options.destination.host));\n        } else if (net.isIPv6(this.options.destination.host)) {\n            buff.writeUInt8(constants_1.Socks5HostType.IPv6);\n            buff.writeBuffer(ip.toBuffer(this.options.destination.host));\n        } else {\n            buff.writeUInt8(constants_1.Socks5HostType.Hostname);\n            buff.writeUInt8(this.options.destination.host.length);\n            buff.writeString(this.options.destination.host);\n        }\n        buff.writeUInt16BE(this.options.destination.port);\n        this.nextRequiredPacketBufferSize = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader;\n        this.socket.write(buff.toBuffer());\n        this.setState(constants_1.SocksClientState.SentFinalHandshake);\n    }\n    /**\n     * Handles Socks v5 final handshake response.\n     * @param data\n     */ handleSocks5FinalHandshakeResponse() {\n        // Peek at available data (we need at least 5 bytes to get the hostname length)\n        const header = this.receiveBuffer.peek(5);\n        if (header[0] !== 0x05 || header[1] !== constants_1.Socks5Response.Granted) {\n            this.closeSocket(`${constants_1.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${constants_1.Socks5Response[header[1]]}`);\n        } else {\n            // Read address type\n            const addressType = header[3];\n            let remoteHost;\n            let buff;\n            // IPv4\n            if (addressType === constants_1.Socks5HostType.IPv4) {\n                // Check if data is available.\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(4));\n                remoteHost = {\n                    host: ip.fromLong(buff.readUInt32BE()),\n                    port: buff.readUInt16BE()\n                };\n                // If given host is 0.0.0.0, assume remote proxy ip instead.\n                if (remoteHost.host === \"0.0.0.0\") {\n                    remoteHost.host = this.options.proxy.ipaddress;\n                }\n            // Hostname\n            } else if (addressType === constants_1.Socks5HostType.Hostname) {\n                const hostLength = header[4];\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(hostLength); // header + host length + host + port\n                // Check if data is available.\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(5));\n                remoteHost = {\n                    host: buff.readString(hostLength),\n                    port: buff.readUInt16BE()\n                };\n            // IPv6\n            } else if (addressType === constants_1.Socks5HostType.IPv6) {\n                // Check if data is available.\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(4));\n                remoteHost = {\n                    host: ip.toString(buff.readBuffer(16)),\n                    port: buff.readUInt16BE()\n                };\n            }\n            // We have everything we need\n            this.setState(constants_1.SocksClientState.ReceivedFinalResponse);\n            // If using CONNECT, the client is now in the established state.\n            if (constants_1.SocksCommand[this.options.command] === constants_1.SocksCommand.connect) {\n                this.setState(constants_1.SocksClientState.Established);\n                this.removeInternalSocketHandlers();\n                this.emit(\"established\", {\n                    remoteHost,\n                    socket: this.socket\n                });\n            } else if (constants_1.SocksCommand[this.options.command] === constants_1.SocksCommand.bind) {\n                /* If using BIND, the Socks client is now in BoundWaitingForConnection state.\n                   This means that the remote proxy server is waiting for a remote connection to the bound port. */ this.setState(constants_1.SocksClientState.BoundWaitingForConnection);\n                this.nextRequiredPacketBufferSize = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader;\n                this.emit(\"bound\", {\n                    remoteHost,\n                    socket: this.socket\n                });\n            /*\n                  If using Associate, the Socks client is now Established. And the proxy server is now accepting UDP packets at the\n                  given bound port. This initial Socks TCP connection must remain open for the UDP relay to continue to work.\n                */ } else if (constants_1.SocksCommand[this.options.command] === constants_1.SocksCommand.associate) {\n                this.setState(constants_1.SocksClientState.Established);\n                this.removeInternalSocketHandlers();\n                this.emit(\"established\", {\n                    remoteHost,\n                    socket: this.socket\n                });\n            }\n        }\n    }\n    /**\n     * Handles Socks v5 incoming connection request (BIND).\n     */ handleSocks5IncomingConnectionResponse() {\n        // Peek at available data (we need at least 5 bytes to get the hostname length)\n        const header = this.receiveBuffer.peek(5);\n        if (header[0] !== 0x05 || header[1] !== constants_1.Socks5Response.Granted) {\n            this.closeSocket(`${constants_1.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${constants_1.Socks5Response[header[1]]}`);\n        } else {\n            // Read address type\n            const addressType = header[3];\n            let remoteHost;\n            let buff;\n            // IPv4\n            if (addressType === constants_1.Socks5HostType.IPv4) {\n                // Check if data is available.\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(4));\n                remoteHost = {\n                    host: ip.fromLong(buff.readUInt32BE()),\n                    port: buff.readUInt16BE()\n                };\n                // If given host is 0.0.0.0, assume remote proxy ip instead.\n                if (remoteHost.host === \"0.0.0.0\") {\n                    remoteHost.host = this.options.proxy.ipaddress;\n                }\n            // Hostname\n            } else if (addressType === constants_1.Socks5HostType.Hostname) {\n                const hostLength = header[4];\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(hostLength); // header + host length + port\n                // Check if data is available.\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(5));\n                remoteHost = {\n                    host: buff.readString(hostLength),\n                    port: buff.readUInt16BE()\n                };\n            // IPv6\n            } else if (addressType === constants_1.Socks5HostType.IPv6) {\n                // Check if data is available.\n                const dataNeeded = constants_1.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;\n                if (this.receiveBuffer.length < dataNeeded) {\n                    this.nextRequiredPacketBufferSize = dataNeeded;\n                    return;\n                }\n                buff = smart_buffer_1.SmartBuffer.fromBuffer(this.receiveBuffer.get(dataNeeded).slice(4));\n                remoteHost = {\n                    host: ip.toString(buff.readBuffer(16)),\n                    port: buff.readUInt16BE()\n                };\n            }\n            this.setState(constants_1.SocksClientState.Established);\n            this.removeInternalSocketHandlers();\n            this.emit(\"established\", {\n                remoteHost,\n                socket: this.socket\n            });\n        }\n    }\n    get socksClientOptions() {\n        return Object.assign({}, this.options);\n    }\n}\nexports.SocksClient = SocksClient; //# sourceMappingURL=socksclient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/client/socksclient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/socks/build/common/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/socks/build/common/constants.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SOCKS5_NO_ACCEPTABLE_AUTH = exports.SOCKS5_CUSTOM_AUTH_END = exports.SOCKS5_CUSTOM_AUTH_START = exports.SOCKS_INCOMING_PACKET_SIZES = exports.SocksClientState = exports.Socks5Response = exports.Socks5HostType = exports.Socks5Auth = exports.Socks4Response = exports.SocksCommand = exports.ERRORS = exports.DEFAULT_TIMEOUT = void 0;\nconst DEFAULT_TIMEOUT = 30000;\nexports.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;\n// prettier-ignore\nconst ERRORS = {\n    InvalidSocksCommand: \"An invalid SOCKS command was provided. Valid options are connect, bind, and associate.\",\n    InvalidSocksCommandForOperation: \"An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.\",\n    InvalidSocksCommandChain: \"An invalid SOCKS command was provided. Chaining currently only supports the connect command.\",\n    InvalidSocksClientOptionsDestination: \"An invalid destination host was provided.\",\n    InvalidSocksClientOptionsExistingSocket: \"An invalid existing socket was provided. This should be an instance of stream.Duplex.\",\n    InvalidSocksClientOptionsProxy: \"Invalid SOCKS proxy details were provided.\",\n    InvalidSocksClientOptionsTimeout: \"An invalid timeout value was provided. Please enter a value above 0 (in ms).\",\n    InvalidSocksClientOptionsProxiesLength: \"At least two socks proxies must be provided for chaining.\",\n    InvalidSocksClientOptionsCustomAuthRange: \"Custom auth must be a value between 0x80 and 0xFE.\",\n    InvalidSocksClientOptionsCustomAuthOptions: \"When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.\",\n    NegotiationError: \"Negotiation error\",\n    SocketClosed: \"Socket closed\",\n    ProxyConnectionTimedOut: \"Proxy connection timed out\",\n    InternalError: \"SocksClient internal error (this should not happen)\",\n    InvalidSocks4HandshakeResponse: \"Received invalid Socks4 handshake response\",\n    Socks4ProxyRejectedConnection: \"Socks4 Proxy rejected connection\",\n    InvalidSocks4IncomingConnectionResponse: \"Socks4 invalid incoming connection response\",\n    Socks4ProxyRejectedIncomingBoundConnection: \"Socks4 Proxy rejected incoming bound connection\",\n    InvalidSocks5InitialHandshakeResponse: \"Received invalid Socks5 initial handshake response\",\n    InvalidSocks5IntiailHandshakeSocksVersion: \"Received invalid Socks5 initial handshake (invalid socks version)\",\n    InvalidSocks5InitialHandshakeNoAcceptedAuthType: \"Received invalid Socks5 initial handshake (no accepted authentication type)\",\n    InvalidSocks5InitialHandshakeUnknownAuthType: \"Received invalid Socks5 initial handshake (unknown authentication type)\",\n    Socks5AuthenticationFailed: \"Socks5 Authentication failed\",\n    InvalidSocks5FinalHandshake: \"Received invalid Socks5 final handshake response\",\n    InvalidSocks5FinalHandshakeRejected: \"Socks5 proxy rejected connection\",\n    InvalidSocks5IncomingConnectionResponse: \"Received invalid Socks5 incoming connection response\",\n    Socks5ProxyRejectedIncomingBoundConnection: \"Socks5 Proxy rejected incoming bound connection\"\n};\nexports.ERRORS = ERRORS;\nconst SOCKS_INCOMING_PACKET_SIZES = {\n    Socks5InitialHandshakeResponse: 2,\n    Socks5UserPassAuthenticationResponse: 2,\n    // Command response + incoming connection (bind)\n    Socks5ResponseHeader: 5,\n    Socks5ResponseIPv4: 10,\n    Socks5ResponseIPv6: 22,\n    Socks5ResponseHostname: (hostNameLength)=>hostNameLength + 7,\n    // Command response + incoming connection (bind)\n    Socks4Response: 8\n};\nexports.SOCKS_INCOMING_PACKET_SIZES = SOCKS_INCOMING_PACKET_SIZES;\nvar SocksCommand;\n(function(SocksCommand) {\n    SocksCommand[SocksCommand[\"connect\"] = 1] = \"connect\";\n    SocksCommand[SocksCommand[\"bind\"] = 2] = \"bind\";\n    SocksCommand[SocksCommand[\"associate\"] = 3] = \"associate\";\n})(SocksCommand || (SocksCommand = {}));\nexports.SocksCommand = SocksCommand;\nvar Socks4Response;\n(function(Socks4Response) {\n    Socks4Response[Socks4Response[\"Granted\"] = 90] = \"Granted\";\n    Socks4Response[Socks4Response[\"Failed\"] = 91] = \"Failed\";\n    Socks4Response[Socks4Response[\"Rejected\"] = 92] = \"Rejected\";\n    Socks4Response[Socks4Response[\"RejectedIdent\"] = 93] = \"RejectedIdent\";\n})(Socks4Response || (Socks4Response = {}));\nexports.Socks4Response = Socks4Response;\nvar Socks5Auth;\n(function(Socks5Auth) {\n    Socks5Auth[Socks5Auth[\"NoAuth\"] = 0] = \"NoAuth\";\n    Socks5Auth[Socks5Auth[\"GSSApi\"] = 1] = \"GSSApi\";\n    Socks5Auth[Socks5Auth[\"UserPass\"] = 2] = \"UserPass\";\n})(Socks5Auth || (Socks5Auth = {}));\nexports.Socks5Auth = Socks5Auth;\nconst SOCKS5_CUSTOM_AUTH_START = 0x80;\nexports.SOCKS5_CUSTOM_AUTH_START = SOCKS5_CUSTOM_AUTH_START;\nconst SOCKS5_CUSTOM_AUTH_END = 0xfe;\nexports.SOCKS5_CUSTOM_AUTH_END = SOCKS5_CUSTOM_AUTH_END;\nconst SOCKS5_NO_ACCEPTABLE_AUTH = 0xff;\nexports.SOCKS5_NO_ACCEPTABLE_AUTH = SOCKS5_NO_ACCEPTABLE_AUTH;\nvar Socks5Response;\n(function(Socks5Response) {\n    Socks5Response[Socks5Response[\"Granted\"] = 0] = \"Granted\";\n    Socks5Response[Socks5Response[\"Failure\"] = 1] = \"Failure\";\n    Socks5Response[Socks5Response[\"NotAllowed\"] = 2] = \"NotAllowed\";\n    Socks5Response[Socks5Response[\"NetworkUnreachable\"] = 3] = \"NetworkUnreachable\";\n    Socks5Response[Socks5Response[\"HostUnreachable\"] = 4] = \"HostUnreachable\";\n    Socks5Response[Socks5Response[\"ConnectionRefused\"] = 5] = \"ConnectionRefused\";\n    Socks5Response[Socks5Response[\"TTLExpired\"] = 6] = \"TTLExpired\";\n    Socks5Response[Socks5Response[\"CommandNotSupported\"] = 7] = \"CommandNotSupported\";\n    Socks5Response[Socks5Response[\"AddressNotSupported\"] = 8] = \"AddressNotSupported\";\n})(Socks5Response || (Socks5Response = {}));\nexports.Socks5Response = Socks5Response;\nvar Socks5HostType;\n(function(Socks5HostType) {\n    Socks5HostType[Socks5HostType[\"IPv4\"] = 1] = \"IPv4\";\n    Socks5HostType[Socks5HostType[\"Hostname\"] = 3] = \"Hostname\";\n    Socks5HostType[Socks5HostType[\"IPv6\"] = 4] = \"IPv6\";\n})(Socks5HostType || (Socks5HostType = {}));\nexports.Socks5HostType = Socks5HostType;\nvar SocksClientState;\n(function(SocksClientState) {\n    SocksClientState[SocksClientState[\"Created\"] = 0] = \"Created\";\n    SocksClientState[SocksClientState[\"Connecting\"] = 1] = \"Connecting\";\n    SocksClientState[SocksClientState[\"Connected\"] = 2] = \"Connected\";\n    SocksClientState[SocksClientState[\"SentInitialHandshake\"] = 3] = \"SentInitialHandshake\";\n    SocksClientState[SocksClientState[\"ReceivedInitialHandshakeResponse\"] = 4] = \"ReceivedInitialHandshakeResponse\";\n    SocksClientState[SocksClientState[\"SentAuthentication\"] = 5] = \"SentAuthentication\";\n    SocksClientState[SocksClientState[\"ReceivedAuthenticationResponse\"] = 6] = \"ReceivedAuthenticationResponse\";\n    SocksClientState[SocksClientState[\"SentFinalHandshake\"] = 7] = \"SentFinalHandshake\";\n    SocksClientState[SocksClientState[\"ReceivedFinalResponse\"] = 8] = \"ReceivedFinalResponse\";\n    SocksClientState[SocksClientState[\"BoundWaitingForConnection\"] = 9] = \"BoundWaitingForConnection\";\n    SocksClientState[SocksClientState[\"Established\"] = 10] = \"Established\";\n    SocksClientState[SocksClientState[\"Disconnected\"] = 11] = \"Disconnected\";\n    SocksClientState[SocksClientState[\"Error\"] = 99] = \"Error\";\n})(SocksClientState || (SocksClientState = {}));\nexports.SocksClientState = SocksClientState; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/common/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/socks/build/common/helpers.js":
/*!****************************************************!*\
  !*** ./node_modules/socks/build/common/helpers.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validateSocksClientChainOptions = exports.validateSocksClientOptions = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/socks/build/common/util.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/socks/build/common/constants.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Validates the provided SocksClientOptions\n * @param options { SocksClientOptions }\n * @param acceptedCommands { string[] } A list of accepted SocksProxy commands.\n */ function validateSocksClientOptions(options, acceptedCommands = [\n    \"connect\",\n    \"bind\",\n    \"associate\"\n]) {\n    // Check SOCKs command option.\n    if (!constants_1.SocksCommand[options.command]) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommand, options);\n    }\n    // Check SocksCommand for acceptable command.\n    if (acceptedCommands.indexOf(options.command) === -1) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandForOperation, options);\n    }\n    // Check destination\n    if (!isValidSocksRemoteHost(options.destination)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n    }\n    // Check SOCKS proxy to use\n    if (!isValidSocksProxy(options.proxy)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n    }\n    // Validate custom auth (if set)\n    validateCustomProxyAuth(options.proxy, options);\n    // Check timeout\n    if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n    }\n    // Check existing_socket (if provided)\n    if (options.existing_socket && !(options.existing_socket instanceof stream.Duplex)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsExistingSocket, options);\n    }\n}\nexports.validateSocksClientOptions = validateSocksClientOptions;\n/**\n * Validates the SocksClientChainOptions\n * @param options { SocksClientChainOptions }\n */ function validateSocksClientChainOptions(options) {\n    // Only connect is supported when chaining.\n    if (options.command !== \"connect\") {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksCommandChain, options);\n    }\n    // Check destination\n    if (!isValidSocksRemoteHost(options.destination)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsDestination, options);\n    }\n    // Validate proxies (length)\n    if (!(options.proxies && Array.isArray(options.proxies) && options.proxies.length >= 2)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxiesLength, options);\n    }\n    // Validate proxies\n    options.proxies.forEach((proxy)=>{\n        if (!isValidSocksProxy(proxy)) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsProxy, options);\n        }\n        // Validate custom auth (if set)\n        validateCustomProxyAuth(proxy, options);\n    });\n    // Check timeout\n    if (options.timeout && !isValidTimeoutValue(options.timeout)) {\n        throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsTimeout, options);\n    }\n}\nexports.validateSocksClientChainOptions = validateSocksClientChainOptions;\nfunction validateCustomProxyAuth(proxy, options) {\n    if (proxy.custom_auth_method !== undefined) {\n        // Invalid auth method range\n        if (proxy.custom_auth_method < constants_1.SOCKS5_CUSTOM_AUTH_START || proxy.custom_auth_method > constants_1.SOCKS5_CUSTOM_AUTH_END) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthRange, options);\n        }\n        // Missing custom_auth_request_handler\n        if (proxy.custom_auth_request_handler === undefined || typeof proxy.custom_auth_request_handler !== \"function\") {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n        // Missing custom_auth_response_size\n        if (proxy.custom_auth_response_size === undefined) {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n        // Missing/invalid custom_auth_response_handler\n        if (proxy.custom_auth_response_handler === undefined || typeof proxy.custom_auth_response_handler !== \"function\") {\n            throw new util_1.SocksClientError(constants_1.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, options);\n        }\n    }\n}\n/**\n * Validates a SocksRemoteHost\n * @param remoteHost { SocksRemoteHost }\n */ function isValidSocksRemoteHost(remoteHost) {\n    return remoteHost && typeof remoteHost.host === \"string\" && typeof remoteHost.port === \"number\" && remoteHost.port >= 0 && remoteHost.port <= 65535;\n}\n/**\n * Validates a SocksProxy\n * @param proxy { SocksProxy }\n */ function isValidSocksProxy(proxy) {\n    return proxy && (typeof proxy.host === \"string\" || typeof proxy.ipaddress === \"string\") && typeof proxy.port === \"number\" && proxy.port >= 0 && proxy.port <= 65535 && (proxy.type === 4 || proxy.type === 5);\n}\n/**\n * Validates a timeout value.\n * @param value { Number }\n */ function isValidTimeoutValue(value) {\n    return typeof value === \"number\" && value > 0;\n} //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvY29tbW9uL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVDQUF1QyxHQUFHQSxrQ0FBa0MsR0FBRyxLQUFLO0FBQ3BGLE1BQU1JLFNBQVNDLG1CQUFPQSxDQUFDLCtEQUFRO0FBQy9CLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLHlFQUFhO0FBQ3pDLE1BQU1FLFNBQVNGLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9COzs7O0NBSUMsR0FDRCxTQUFTRiwyQkFBMkJLLE9BQU8sRUFBRUMsbUJBQW1CO0lBQUM7SUFBVztJQUFRO0NBQVk7SUFDNUYsOEJBQThCO0lBQzlCLElBQUksQ0FBQ0gsWUFBWUksWUFBWSxDQUFDRixRQUFRRyxPQUFPLENBQUMsRUFBRTtRQUM1QyxNQUFNLElBQUlQLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUNDLG1CQUFtQixFQUFFTjtJQUM5RTtJQUNBLDZDQUE2QztJQUM3QyxJQUFJQyxpQkFBaUJNLE9BQU8sQ0FBQ1AsUUFBUUcsT0FBTyxNQUFNLENBQUMsR0FBRztRQUNsRCxNQUFNLElBQUlQLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUNHLCtCQUErQixFQUFFUjtJQUMxRjtJQUNBLG9CQUFvQjtJQUNwQixJQUFJLENBQUNTLHVCQUF1QlQsUUFBUVUsV0FBVyxHQUFHO1FBQzlDLE1BQU0sSUFBSWQsT0FBT1EsZ0JBQWdCLENBQUNOLFlBQVlPLE1BQU0sQ0FBQ00sb0NBQW9DLEVBQUVYO0lBQy9GO0lBQ0EsMkJBQTJCO0lBQzNCLElBQUksQ0FBQ1ksa0JBQWtCWixRQUFRYSxLQUFLLEdBQUc7UUFDbkMsTUFBTSxJQUFJakIsT0FBT1EsZ0JBQWdCLENBQUNOLFlBQVlPLE1BQU0sQ0FBQ1MsOEJBQThCLEVBQUVkO0lBQ3pGO0lBQ0EsZ0NBQWdDO0lBQ2hDZSx3QkFBd0JmLFFBQVFhLEtBQUssRUFBRWI7SUFDdkMsZ0JBQWdCO0lBQ2hCLElBQUlBLFFBQVFnQixPQUFPLElBQUksQ0FBQ0Msb0JBQW9CakIsUUFBUWdCLE9BQU8sR0FBRztRQUMxRCxNQUFNLElBQUlwQixPQUFPUSxnQkFBZ0IsQ0FBQ04sWUFBWU8sTUFBTSxDQUFDYSxnQ0FBZ0MsRUFBRWxCO0lBQzNGO0lBQ0Esc0NBQXNDO0lBQ3RDLElBQUlBLFFBQVFtQixlQUFlLElBQ3ZCLENBQUVuQixDQUFBQSxRQUFRbUIsZUFBZSxZQUFZcEIsT0FBT3FCLE1BQU0sR0FBRztRQUNyRCxNQUFNLElBQUl4QixPQUFPUSxnQkFBZ0IsQ0FBQ04sWUFBWU8sTUFBTSxDQUFDZ0IsdUNBQXVDLEVBQUVyQjtJQUNsRztBQUNKO0FBQ0FSLGtDQUFrQyxHQUFHRztBQUNyQzs7O0NBR0MsR0FDRCxTQUFTRCxnQ0FBZ0NNLE9BQU87SUFDNUMsMkNBQTJDO0lBQzNDLElBQUlBLFFBQVFHLE9BQU8sS0FBSyxXQUFXO1FBQy9CLE1BQU0sSUFBSVAsT0FBT1EsZ0JBQWdCLENBQUNOLFlBQVlPLE1BQU0sQ0FBQ2lCLHdCQUF3QixFQUFFdEI7SUFDbkY7SUFDQSxvQkFBb0I7SUFDcEIsSUFBSSxDQUFDUyx1QkFBdUJULFFBQVFVLFdBQVcsR0FBRztRQUM5QyxNQUFNLElBQUlkLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUNNLG9DQUFvQyxFQUFFWDtJQUMvRjtJQUNBLDRCQUE0QjtJQUM1QixJQUFJLENBQUVBLENBQUFBLFFBQVF1QixPQUFPLElBQ2pCQyxNQUFNQyxPQUFPLENBQUN6QixRQUFRdUIsT0FBTyxLQUM3QnZCLFFBQVF1QixPQUFPLENBQUNHLE1BQU0sSUFBSSxJQUFJO1FBQzlCLE1BQU0sSUFBSTlCLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUNzQixzQ0FBc0MsRUFBRTNCO0lBQ2pHO0lBQ0EsbUJBQW1CO0lBQ25CQSxRQUFRdUIsT0FBTyxDQUFDSyxPQUFPLENBQUMsQ0FBQ2Y7UUFDckIsSUFBSSxDQUFDRCxrQkFBa0JDLFFBQVE7WUFDM0IsTUFBTSxJQUFJakIsT0FBT1EsZ0JBQWdCLENBQUNOLFlBQVlPLE1BQU0sQ0FBQ1MsOEJBQThCLEVBQUVkO1FBQ3pGO1FBQ0EsZ0NBQWdDO1FBQ2hDZSx3QkFBd0JGLE9BQU9iO0lBQ25DO0lBQ0EsZ0JBQWdCO0lBQ2hCLElBQUlBLFFBQVFnQixPQUFPLElBQUksQ0FBQ0Msb0JBQW9CakIsUUFBUWdCLE9BQU8sR0FBRztRQUMxRCxNQUFNLElBQUlwQixPQUFPUSxnQkFBZ0IsQ0FBQ04sWUFBWU8sTUFBTSxDQUFDYSxnQ0FBZ0MsRUFBRWxCO0lBQzNGO0FBQ0o7QUFDQVIsdUNBQXVDLEdBQUdFO0FBQzFDLFNBQVNxQix3QkFBd0JGLEtBQUssRUFBRWIsT0FBTztJQUMzQyxJQUFJYSxNQUFNZ0Isa0JBQWtCLEtBQUtDLFdBQVc7UUFDeEMsNEJBQTRCO1FBQzVCLElBQUlqQixNQUFNZ0Isa0JBQWtCLEdBQUcvQixZQUFZaUMsd0JBQXdCLElBQy9EbEIsTUFBTWdCLGtCQUFrQixHQUFHL0IsWUFBWWtDLHNCQUFzQixFQUFFO1lBQy9ELE1BQU0sSUFBSXBDLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUM0Qix3Q0FBd0MsRUFBRWpDO1FBQ25HO1FBQ0Esc0NBQXNDO1FBQ3RDLElBQUlhLE1BQU1xQiwyQkFBMkIsS0FBS0osYUFDdEMsT0FBT2pCLE1BQU1xQiwyQkFBMkIsS0FBSyxZQUFZO1lBQ3pELE1BQU0sSUFBSXRDLE9BQU9RLGdCQUFnQixDQUFDTixZQUFZTyxNQUFNLENBQUM4QiwwQ0FBMEMsRUFBRW5DO1FBQ3JHO1FBQ0Esb0NBQW9DO1FBQ3BDLElBQUlhLE1BQU11Qix5QkFBeUIsS0FBS04sV0FBVztZQUMvQyxNQUFNLElBQUlsQyxPQUFPUSxnQkFBZ0IsQ0FBQ04sWUFBWU8sTUFBTSxDQUFDOEIsMENBQTBDLEVBQUVuQztRQUNyRztRQUNBLCtDQUErQztRQUMvQyxJQUFJYSxNQUFNd0IsNEJBQTRCLEtBQUtQLGFBQ3ZDLE9BQU9qQixNQUFNd0IsNEJBQTRCLEtBQUssWUFBWTtZQUMxRCxNQUFNLElBQUl6QyxPQUFPUSxnQkFBZ0IsQ0FBQ04sWUFBWU8sTUFBTSxDQUFDOEIsMENBQTBDLEVBQUVuQztRQUNyRztJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDRCxTQUFTUyx1QkFBdUI2QixVQUFVO0lBQ3RDLE9BQVFBLGNBQ0osT0FBT0EsV0FBV0MsSUFBSSxLQUFLLFlBQzNCLE9BQU9ELFdBQVdFLElBQUksS0FBSyxZQUMzQkYsV0FBV0UsSUFBSSxJQUFJLEtBQ25CRixXQUFXRSxJQUFJLElBQUk7QUFDM0I7QUFDQTs7O0NBR0MsR0FDRCxTQUFTNUIsa0JBQWtCQyxLQUFLO0lBQzVCLE9BQVFBLFNBQ0gsUUFBT0EsTUFBTTBCLElBQUksS0FBSyxZQUFZLE9BQU8xQixNQUFNNEIsU0FBUyxLQUFLLFFBQU8sS0FDckUsT0FBTzVCLE1BQU0yQixJQUFJLEtBQUssWUFDdEIzQixNQUFNMkIsSUFBSSxJQUFJLEtBQ2QzQixNQUFNMkIsSUFBSSxJQUFJLFNBQ2IzQixDQUFBQSxNQUFNNkIsSUFBSSxLQUFLLEtBQUs3QixNQUFNNkIsSUFBSSxLQUFLO0FBQzVDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU3pCLG9CQUFvQnhCLEtBQUs7SUFDOUIsT0FBTyxPQUFPQSxVQUFVLFlBQVlBLFFBQVE7QUFDaEQsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvY29tbW9uL2hlbHBlcnMuanM/YTRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVTb2Nrc0NsaWVudENoYWluT3B0aW9ucyA9IGV4cG9ydHMudmFsaWRhdGVTb2Nrc0NsaWVudE9wdGlvbnMgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBzdHJlYW0gPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIHByb3ZpZGVkIFNvY2tzQ2xpZW50T3B0aW9uc1xuICogQHBhcmFtIG9wdGlvbnMgeyBTb2Nrc0NsaWVudE9wdGlvbnMgfVxuICogQHBhcmFtIGFjY2VwdGVkQ29tbWFuZHMgeyBzdHJpbmdbXSB9IEEgbGlzdCBvZiBhY2NlcHRlZCBTb2Nrc1Byb3h5IGNvbW1hbmRzLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNvY2tzQ2xpZW50T3B0aW9ucyhvcHRpb25zLCBhY2NlcHRlZENvbW1hbmRzID0gWydjb25uZWN0JywgJ2JpbmQnLCAnYXNzb2NpYXRlJ10pIHtcbiAgICAvLyBDaGVjayBTT0NLcyBjb21tYW5kIG9wdGlvbi5cbiAgICBpZiAoIWNvbnN0YW50c18xLlNvY2tzQ29tbWFuZFtvcHRpb25zLmNvbW1hbmRdKSB7XG4gICAgICAgIHRocm93IG5ldyB1dGlsXzEuU29ja3NDbGllbnRFcnJvcihjb25zdGFudHNfMS5FUlJPUlMuSW52YWxpZFNvY2tzQ29tbWFuZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIENoZWNrIFNvY2tzQ29tbWFuZCBmb3IgYWNjZXB0YWJsZSBjb21tYW5kLlxuICAgIGlmIChhY2NlcHRlZENvbW1hbmRzLmluZGV4T2Yob3B0aW9ucy5jb21tYW5kKSA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDb21tYW5kRm9yT3BlcmF0aW9uLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgZGVzdGluYXRpb25cbiAgICBpZiAoIWlzVmFsaWRTb2Nrc1JlbW90ZUhvc3Qob3B0aW9ucy5kZXN0aW5hdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDbGllbnRPcHRpb25zRGVzdGluYXRpb24sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBDaGVjayBTT0NLUyBwcm94eSB0byB1c2VcbiAgICBpZiAoIWlzVmFsaWRTb2Nrc1Byb3h5KG9wdGlvbnMucHJveHkpKSB7XG4gICAgICAgIHRocm93IG5ldyB1dGlsXzEuU29ja3NDbGllbnRFcnJvcihjb25zdGFudHNfMS5FUlJPUlMuSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc1Byb3h5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLy8gVmFsaWRhdGUgY3VzdG9tIGF1dGggKGlmIHNldClcbiAgICB2YWxpZGF0ZUN1c3RvbVByb3h5QXV0aChvcHRpb25zLnByb3h5LCBvcHRpb25zKTtcbiAgICAvLyBDaGVjayB0aW1lb3V0XG4gICAgaWYgKG9wdGlvbnMudGltZW91dCAmJiAhaXNWYWxpZFRpbWVvdXRWYWx1ZShvcHRpb25zLnRpbWVvdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyB1dGlsXzEuU29ja3NDbGllbnRFcnJvcihjb25zdGFudHNfMS5FUlJPUlMuSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc1RpbWVvdXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBDaGVjayBleGlzdGluZ19zb2NrZXQgKGlmIHByb3ZpZGVkKVxuICAgIGlmIChvcHRpb25zLmV4aXN0aW5nX3NvY2tldCAmJlxuICAgICAgICAhKG9wdGlvbnMuZXhpc3Rpbmdfc29ja2V0IGluc3RhbmNlb2Ygc3RyZWFtLkR1cGxleCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDbGllbnRPcHRpb25zRXhpc3RpbmdTb2NrZXQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVTb2Nrc0NsaWVudE9wdGlvbnMgPSB2YWxpZGF0ZVNvY2tzQ2xpZW50T3B0aW9ucztcbi8qKlxuICogVmFsaWRhdGVzIHRoZSBTb2Nrc0NsaWVudENoYWluT3B0aW9uc1xuICogQHBhcmFtIG9wdGlvbnMgeyBTb2Nrc0NsaWVudENoYWluT3B0aW9ucyB9XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU29ja3NDbGllbnRDaGFpbk9wdGlvbnMob3B0aW9ucykge1xuICAgIC8vIE9ubHkgY29ubmVjdCBpcyBzdXBwb3J0ZWQgd2hlbiBjaGFpbmluZy5cbiAgICBpZiAob3B0aW9ucy5jb21tYW5kICE9PSAnY29ubmVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDb21tYW5kQ2hhaW4sIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBDaGVjayBkZXN0aW5hdGlvblxuICAgIGlmICghaXNWYWxpZFNvY2tzUmVtb3RlSG9zdChvcHRpb25zLmRlc3RpbmF0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgdXRpbF8xLlNvY2tzQ2xpZW50RXJyb3IoY29uc3RhbnRzXzEuRVJST1JTLkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNEZXN0aW5hdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIHByb3hpZXMgKGxlbmd0aClcbiAgICBpZiAoIShvcHRpb25zLnByb3hpZXMgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShvcHRpb25zLnByb3hpZXMpICYmXG4gICAgICAgIG9wdGlvbnMucHJveGllcy5sZW5ndGggPj0gMikpIHtcbiAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDbGllbnRPcHRpb25zUHJveGllc0xlbmd0aCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIHByb3hpZXNcbiAgICBvcHRpb25zLnByb3hpZXMuZm9yRWFjaCgocHJveHkpID0+IHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkU29ja3NQcm94eShwcm94eSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyB1dGlsXzEuU29ja3NDbGllbnRFcnJvcihjb25zdGFudHNfMS5FUlJPUlMuSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc1Byb3h5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBWYWxpZGF0ZSBjdXN0b20gYXV0aCAoaWYgc2V0KVxuICAgICAgICB2YWxpZGF0ZUN1c3RvbVByb3h5QXV0aChwcm94eSwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgLy8gQ2hlY2sgdGltZW91dFxuICAgIGlmIChvcHRpb25zLnRpbWVvdXQgJiYgIWlzVmFsaWRUaW1lb3V0VmFsdWUob3B0aW9ucy50aW1lb3V0KSkge1xuICAgICAgICB0aHJvdyBuZXcgdXRpbF8xLlNvY2tzQ2xpZW50RXJyb3IoY29uc3RhbnRzXzEuRVJST1JTLkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNUaW1lb3V0LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlU29ja3NDbGllbnRDaGFpbk9wdGlvbnMgPSB2YWxpZGF0ZVNvY2tzQ2xpZW50Q2hhaW5PcHRpb25zO1xuZnVuY3Rpb24gdmFsaWRhdGVDdXN0b21Qcm94eUF1dGgocHJveHksIG9wdGlvbnMpIHtcbiAgICBpZiAocHJveHkuY3VzdG9tX2F1dGhfbWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gSW52YWxpZCBhdXRoIG1ldGhvZCByYW5nZVxuICAgICAgICBpZiAocHJveHkuY3VzdG9tX2F1dGhfbWV0aG9kIDwgY29uc3RhbnRzXzEuU09DS1M1X0NVU1RPTV9BVVRIX1NUQVJUIHx8XG4gICAgICAgICAgICBwcm94eS5jdXN0b21fYXV0aF9tZXRob2QgPiBjb25zdGFudHNfMS5TT0NLUzVfQ1VTVE9NX0FVVEhfRU5EKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdXRpbF8xLlNvY2tzQ2xpZW50RXJyb3IoY29uc3RhbnRzXzEuRVJST1JTLkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNDdXN0b21BdXRoUmFuZ2UsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1pc3NpbmcgY3VzdG9tX2F1dGhfcmVxdWVzdF9oYW5kbGVyXG4gICAgICAgIGlmIChwcm94eS5jdXN0b21fYXV0aF9yZXF1ZXN0X2hhbmRsZXIgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdHlwZW9mIHByb3h5LmN1c3RvbV9hdXRoX3JlcXVlc3RfaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHV0aWxfMS5Tb2Nrc0NsaWVudEVycm9yKGNvbnN0YW50c18xLkVSUk9SUy5JbnZhbGlkU29ja3NDbGllbnRPcHRpb25zQ3VzdG9tQXV0aE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1pc3NpbmcgY3VzdG9tX2F1dGhfcmVzcG9uc2Vfc2l6ZVxuICAgICAgICBpZiAocHJveHkuY3VzdG9tX2F1dGhfcmVzcG9uc2Vfc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgdXRpbF8xLlNvY2tzQ2xpZW50RXJyb3IoY29uc3RhbnRzXzEuRVJST1JTLkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNDdXN0b21BdXRoT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWlzc2luZy9pbnZhbGlkIGN1c3RvbV9hdXRoX3Jlc3BvbnNlX2hhbmRsZXJcbiAgICAgICAgaWYgKHByb3h5LmN1c3RvbV9hdXRoX3Jlc3BvbnNlX2hhbmRsZXIgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgdHlwZW9mIHByb3h5LmN1c3RvbV9hdXRoX3Jlc3BvbnNlX2hhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyB1dGlsXzEuU29ja3NDbGllbnRFcnJvcihjb25zdGFudHNfMS5FUlJPUlMuSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc0N1c3RvbUF1dGhPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVmFsaWRhdGVzIGEgU29ja3NSZW1vdGVIb3N0XG4gKiBAcGFyYW0gcmVtb3RlSG9zdCB7IFNvY2tzUmVtb3RlSG9zdCB9XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTb2Nrc1JlbW90ZUhvc3QocmVtb3RlSG9zdCkge1xuICAgIHJldHVybiAocmVtb3RlSG9zdCAmJlxuICAgICAgICB0eXBlb2YgcmVtb3RlSG9zdC5ob3N0ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICB0eXBlb2YgcmVtb3RlSG9zdC5wb3J0ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICByZW1vdGVIb3N0LnBvcnQgPj0gMCAmJlxuICAgICAgICByZW1vdGVIb3N0LnBvcnQgPD0gNjU1MzUpO1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYSBTb2Nrc1Byb3h5XG4gKiBAcGFyYW0gcHJveHkgeyBTb2Nrc1Byb3h5IH1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFNvY2tzUHJveHkocHJveHkpIHtcbiAgICByZXR1cm4gKHByb3h5ICYmXG4gICAgICAgICh0eXBlb2YgcHJveHkuaG9zdCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHByb3h5LmlwYWRkcmVzcyA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgIHR5cGVvZiBwcm94eS5wb3J0ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICBwcm94eS5wb3J0ID49IDAgJiZcbiAgICAgICAgcHJveHkucG9ydCA8PSA2NTUzNSAmJlxuICAgICAgICAocHJveHkudHlwZSA9PT0gNCB8fCBwcm94eS50eXBlID09PSA1KSk7XG59XG4vKipcbiAqIFZhbGlkYXRlcyBhIHRpbWVvdXQgdmFsdWUuXG4gKiBAcGFyYW0gdmFsdWUgeyBOdW1iZXIgfVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkVGltZW91dFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgPiAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZVNvY2tzQ2xpZW50Q2hhaW5PcHRpb25zIiwidmFsaWRhdGVTb2Nrc0NsaWVudE9wdGlvbnMiLCJ1dGlsXzEiLCJyZXF1aXJlIiwiY29uc3RhbnRzXzEiLCJzdHJlYW0iLCJvcHRpb25zIiwiYWNjZXB0ZWRDb21tYW5kcyIsIlNvY2tzQ29tbWFuZCIsImNvbW1hbmQiLCJTb2Nrc0NsaWVudEVycm9yIiwiRVJST1JTIiwiSW52YWxpZFNvY2tzQ29tbWFuZCIsImluZGV4T2YiLCJJbnZhbGlkU29ja3NDb21tYW5kRm9yT3BlcmF0aW9uIiwiaXNWYWxpZFNvY2tzUmVtb3RlSG9zdCIsImRlc3RpbmF0aW9uIiwiSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc0Rlc3RpbmF0aW9uIiwiaXNWYWxpZFNvY2tzUHJveHkiLCJwcm94eSIsIkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNQcm94eSIsInZhbGlkYXRlQ3VzdG9tUHJveHlBdXRoIiwidGltZW91dCIsImlzVmFsaWRUaW1lb3V0VmFsdWUiLCJJbnZhbGlkU29ja3NDbGllbnRPcHRpb25zVGltZW91dCIsImV4aXN0aW5nX3NvY2tldCIsIkR1cGxleCIsIkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNFeGlzdGluZ1NvY2tldCIsIkludmFsaWRTb2Nrc0NvbW1hbmRDaGFpbiIsInByb3hpZXMiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJJbnZhbGlkU29ja3NDbGllbnRPcHRpb25zUHJveGllc0xlbmd0aCIsImZvckVhY2giLCJjdXN0b21fYXV0aF9tZXRob2QiLCJ1bmRlZmluZWQiLCJTT0NLUzVfQ1VTVE9NX0FVVEhfU1RBUlQiLCJTT0NLUzVfQ1VTVE9NX0FVVEhfRU5EIiwiSW52YWxpZFNvY2tzQ2xpZW50T3B0aW9uc0N1c3RvbUF1dGhSYW5nZSIsImN1c3RvbV9hdXRoX3JlcXVlc3RfaGFuZGxlciIsIkludmFsaWRTb2Nrc0NsaWVudE9wdGlvbnNDdXN0b21BdXRoT3B0aW9ucyIsImN1c3RvbV9hdXRoX3Jlc3BvbnNlX3NpemUiLCJjdXN0b21fYXV0aF9yZXNwb25zZV9oYW5kbGVyIiwicmVtb3RlSG9zdCIsImhvc3QiLCJwb3J0IiwiaXBhZGRyZXNzIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/common/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/socks/build/common/receivebuffer.js":
/*!**********************************************************!*\
  !*** ./node_modules/socks/build/common/receivebuffer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ReceiveBuffer = void 0;\nclass ReceiveBuffer {\n    constructor(size = 4096){\n        this.buffer = Buffer.allocUnsafe(size);\n        this.offset = 0;\n        this.originalSize = size;\n    }\n    get length() {\n        return this.offset;\n    }\n    append(data) {\n        if (!Buffer.isBuffer(data)) {\n            throw new Error(\"Attempted to append a non-buffer instance to ReceiveBuffer.\");\n        }\n        if (this.offset + data.length >= this.buffer.length) {\n            const tmp = this.buffer;\n            this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + data.length));\n            tmp.copy(this.buffer);\n        }\n        data.copy(this.buffer, this.offset);\n        return this.offset += data.length;\n    }\n    peek(length) {\n        if (length > this.offset) {\n            throw new Error(\"Attempted to read beyond the bounds of the managed internal data.\");\n        }\n        return this.buffer.slice(0, length);\n    }\n    get(length) {\n        if (length > this.offset) {\n            throw new Error(\"Attempted to read beyond the bounds of the managed internal data.\");\n        }\n        const value = Buffer.allocUnsafe(length);\n        this.buffer.slice(0, length).copy(value);\n        this.buffer.copyWithin(0, length, length + this.offset - length);\n        this.offset -= length;\n        return value;\n    }\n}\nexports.ReceiveBuffer = ReceiveBuffer; //# sourceMappingURL=receivebuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvY29tbW9uL3JlY2VpdmVidWZmZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUU7SUFDRkMsWUFBWUMsT0FBTyxJQUFJLENBQUU7UUFDckIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLE9BQU9DLFdBQVcsQ0FBQ0g7UUFDakMsSUFBSSxDQUFDSSxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNDLFlBQVksR0FBR0w7SUFDeEI7SUFDQSxJQUFJTSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUNGLE1BQU07SUFDdEI7SUFDQUcsT0FBT0MsSUFBSSxFQUFFO1FBQ1QsSUFBSSxDQUFDTixPQUFPTyxRQUFRLENBQUNELE9BQU87WUFDeEIsTUFBTSxJQUFJRSxNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxJQUFJLENBQUNOLE1BQU0sR0FBR0ksS0FBS0YsTUFBTSxJQUFJLElBQUksQ0FBQ0wsTUFBTSxDQUFDSyxNQUFNLEVBQUU7WUFDakQsTUFBTUssTUFBTSxJQUFJLENBQUNWLE1BQU07WUFDdkIsSUFBSSxDQUFDQSxNQUFNLEdBQUdDLE9BQU9DLFdBQVcsQ0FBQ1MsS0FBS0MsR0FBRyxDQUFDLElBQUksQ0FBQ1osTUFBTSxDQUFDSyxNQUFNLEdBQUcsSUFBSSxDQUFDRCxZQUFZLEVBQUUsSUFBSSxDQUFDSixNQUFNLENBQUNLLE1BQU0sR0FBR0UsS0FBS0YsTUFBTTtZQUNsSEssSUFBSUcsSUFBSSxDQUFDLElBQUksQ0FBQ2IsTUFBTTtRQUN4QjtRQUNBTyxLQUFLTSxJQUFJLENBQUMsSUFBSSxDQUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDRyxNQUFNO1FBQ2xDLE9BQVEsSUFBSSxDQUFDQSxNQUFNLElBQUlJLEtBQUtGLE1BQU07SUFDdEM7SUFDQVMsS0FBS1QsTUFBTSxFQUFFO1FBQ1QsSUFBSUEsU0FBUyxJQUFJLENBQUNGLE1BQU0sRUFBRTtZQUN0QixNQUFNLElBQUlNLE1BQU07UUFDcEI7UUFDQSxPQUFPLElBQUksQ0FBQ1QsTUFBTSxDQUFDZSxLQUFLLENBQUMsR0FBR1Y7SUFDaEM7SUFDQVcsSUFBSVgsTUFBTSxFQUFFO1FBQ1IsSUFBSUEsU0FBUyxJQUFJLENBQUNGLE1BQU0sRUFBRTtZQUN0QixNQUFNLElBQUlNLE1BQU07UUFDcEI7UUFDQSxNQUFNYixRQUFRSyxPQUFPQyxXQUFXLENBQUNHO1FBQ2pDLElBQUksQ0FBQ0wsTUFBTSxDQUFDZSxLQUFLLENBQUMsR0FBR1YsUUFBUVEsSUFBSSxDQUFDakI7UUFDbEMsSUFBSSxDQUFDSSxNQUFNLENBQUNpQixVQUFVLENBQUMsR0FBR1osUUFBUUEsU0FBUyxJQUFJLENBQUNGLE1BQU0sR0FBR0U7UUFDekQsSUFBSSxDQUFDRixNQUFNLElBQUlFO1FBQ2YsT0FBT1Q7SUFDWDtBQUNKO0FBQ0FELHFCQUFxQixHQUFHRSxlQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvY29tbW9uL3JlY2VpdmVidWZmZXIuanM/ZGQ5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVjZWl2ZUJ1ZmZlciA9IHZvaWQgMDtcbmNsYXNzIFJlY2VpdmVCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKHNpemUgPSA0MDk2KSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMub3JpZ2luYWxTaXplID0gc2l6ZTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICAgIH1cbiAgICBhcHBlbmQoZGF0YSkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gYXBwZW5kIGEgbm9uLWJ1ZmZlciBpbnN0YW5jZSB0byBSZWNlaXZlQnVmZmVyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCArIGRhdGEubGVuZ3RoID49IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gdGhpcy5idWZmZXI7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShNYXRoLm1heCh0aGlzLmJ1ZmZlci5sZW5ndGggKyB0aGlzLm9yaWdpbmFsU2l6ZSwgdGhpcy5idWZmZXIubGVuZ3RoICsgZGF0YS5sZW5ndGgpKTtcbiAgICAgICAgICAgIHRtcC5jb3B5KHRoaXMuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLmNvcHkodGhpcy5idWZmZXIsIHRoaXMub2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9mZnNldCArPSBkYXRhLmxlbmd0aCk7XG4gICAgfVxuICAgIHBlZWsobGVuZ3RoKSB7XG4gICAgICAgIGlmIChsZW5ndGggPiB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gcmVhZCBiZXlvbmQgdGhlIGJvdW5kcyBvZiB0aGUgbWFuYWdlZCBpbnRlcm5hbCBkYXRhLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cbiAgICBnZXQobGVuZ3RoKSB7XG4gICAgICAgIGlmIChsZW5ndGggPiB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gcmVhZCBiZXlvbmQgdGhlIGJvdW5kcyBvZiB0aGUgbWFuYWdlZCBpbnRlcm5hbCBkYXRhLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCk7XG4gICAgICAgIHRoaXMuYnVmZmVyLnNsaWNlKDAsIGxlbmd0aCkuY29weSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuYnVmZmVyLmNvcHlXaXRoaW4oMCwgbGVuZ3RoLCBsZW5ndGggKyB0aGlzLm9mZnNldCAtIGxlbmd0aCk7XG4gICAgICAgIHRoaXMub2Zmc2V0IC09IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVjZWl2ZUJ1ZmZlciA9IFJlY2VpdmVCdWZmZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWNlaXZlYnVmZmVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJlY2VpdmVCdWZmZXIiLCJjb25zdHJ1Y3RvciIsInNpemUiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm9mZnNldCIsIm9yaWdpbmFsU2l6ZSIsImxlbmd0aCIsImFwcGVuZCIsImRhdGEiLCJpc0J1ZmZlciIsIkVycm9yIiwidG1wIiwiTWF0aCIsIm1heCIsImNvcHkiLCJwZWVrIiwic2xpY2UiLCJnZXQiLCJjb3B5V2l0aGluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/common/receivebuffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/socks/build/common/util.js":
/*!*************************************************!*\
  !*** ./node_modules/socks/build/common/util.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.shuffleArray = exports.SocksClientError = void 0;\n/**\n * Error wrapper for SocksClient\n */ class SocksClientError extends Error {\n    constructor(message, options){\n        super(message);\n        this.options = options;\n    }\n}\nexports.SocksClientError = SocksClientError;\n/**\n * Shuffles a given array.\n * @param array The array to shuffle.\n */ function shuffleArray(array) {\n    for(let i = array.length - 1; i > 0; i--){\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [\n            array[j],\n            array[i]\n        ];\n    }\n}\nexports.shuffleArray = shuffleArray; //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvY29tbW9uL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSx3QkFBd0IsR0FBRyxLQUFLO0FBQ3ZEOztDQUVDLEdBQ0QsTUFBTUcseUJBQXlCQztJQUMzQkMsWUFBWUMsT0FBTyxFQUFFQyxPQUFPLENBQUU7UUFDMUIsS0FBSyxDQUFDRDtRQUNOLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtBQUNKO0FBQ0FQLHdCQUF3QixHQUFHRztBQUMzQjs7O0NBR0MsR0FDRCxTQUFTRCxhQUFhTSxLQUFLO0lBQ3ZCLElBQUssSUFBSUMsSUFBSUQsTUFBTUUsTUFBTSxHQUFHLEdBQUdELElBQUksR0FBR0EsSUFBSztRQUN2QyxNQUFNRSxJQUFJQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBTUwsQ0FBQUEsSUFBSTtRQUMxQyxDQUFDRCxLQUFLLENBQUNDLEVBQUUsRUFBRUQsS0FBSyxDQUFDRyxFQUFFLENBQUMsR0FBRztZQUFDSCxLQUFLLENBQUNHLEVBQUU7WUFBRUgsS0FBSyxDQUFDQyxFQUFFO1NBQUM7SUFDL0M7QUFDSjtBQUNBVCxvQkFBb0IsR0FBR0UsY0FDdkIsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL3NvY2tzL2J1aWxkL2NvbW1vbi91dGlsLmpzPzZjOTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNodWZmbGVBcnJheSA9IGV4cG9ydHMuU29ja3NDbGllbnRFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogRXJyb3Igd3JhcHBlciBmb3IgU29ja3NDbGllbnRcbiAqL1xuY2xhc3MgU29ja3NDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuU29ja3NDbGllbnRFcnJvciA9IFNvY2tzQ2xpZW50RXJyb3I7XG4vKipcbiAqIFNodWZmbGVzIGEgZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gKi9cbmZ1bmN0aW9uIHNodWZmbGVBcnJheShhcnJheSkge1xuICAgIGZvciAobGV0IGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgW2FycmF5W2ldLCBhcnJheVtqXV0gPSBbYXJyYXlbal0sIGFycmF5W2ldXTtcbiAgICB9XG59XG5leHBvcnRzLnNodWZmbGVBcnJheSA9IHNodWZmbGVBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2h1ZmZsZUFycmF5IiwiU29ja3NDbGllbnRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwib3B0aW9ucyIsImFycmF5IiwiaSIsImxlbmd0aCIsImoiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/common/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/socks/build/index.js":
/*!*******************************************!*\
  !*** ./node_modules/socks/build/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./client/socksclient */ \"(ssr)/./node_modules/socks/build/client/socksclient.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc29ja3MvYnVpbGQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxJQUFLLElBQUksSUFBSSxDQUFDQSxZQUFZLElBQUssU0FBU1osQ0FBQyxFQUFFYSxRQUFPO0lBQ2pFLElBQUssSUFBSUMsS0FBS2QsRUFBRyxJQUFJYyxNQUFNLGFBQWEsQ0FBQ2pCLE9BQU9rQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixVQUFTQyxJQUFJbEIsZ0JBQWdCaUIsVUFBU2IsR0FBR2M7QUFDM0g7QUFDQWpCLDhDQUE2QztJQUFFcUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE4sYUFBYU8sbUJBQU9BLENBQUMsb0ZBQXNCLEdBQUdOLFVBQzlDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9zb2Nrcy9idWlsZC9pbmRleC5qcz9hNzkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2xpZW50L3NvY2tzY2xpZW50XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2V4cG9ydFN0YXIiLCJleHBvcnRzIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZhbHVlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/socks/build/index.js\n");

/***/ })

};
;