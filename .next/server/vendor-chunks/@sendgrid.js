/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sendgrid";
exports.ids = ["vendor-chunks/@sendgrid"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sendgrid/client/index.js":
/*!************************************************!*\
  !*** ./node_modules/@sendgrid/client/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst client = __webpack_require__(/*! ./src/client */ \"(rsc)/./node_modules/@sendgrid/client/src/client.js\");\nconst Client = __webpack_require__(/*! ./src/classes/client */ \"(rsc)/./node_modules/@sendgrid/client/src/classes/client.js\");\nmodule.exports = client;\nmodule.exports.Client = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2NsaWVudC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFNBQVNDLG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBRXZCRSxPQUFPQyxPQUFPLEdBQUdKO0FBQ2pCRyxxQkFBcUIsR0FBR0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2NsaWVudC9pbmRleC5qcz9lYjRlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi9zcmMvY2xpZW50Jyk7XG5jb25zdCBDbGllbnQgPSByZXF1aXJlKCcuL3NyYy9jbGFzc2VzL2NsaWVudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsaWVudDtcbm1vZHVsZS5leHBvcnRzLkNsaWVudCA9IENsaWVudDtcbiJdLCJuYW1lcyI6WyJjbGllbnQiLCJyZXF1aXJlIiwiQ2xpZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/client/src/classes/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sendgrid/client/src/classes/client.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@sendgrid/client/package.json\");\nconst { helpers: { mergeData }, classes: { Response, ResponseError } } = __webpack_require__(/*! @sendgrid/helpers */ \"(rsc)/./node_modules/@sendgrid/helpers/index.js\");\nconst API_KEY_PREFIX = \"SG.\";\nconst SENDGRID_BASE_URL = \"https://api.sendgrid.com/\";\nconst TWILIO_BASE_URL = \"https://email.twilio.com/\";\nconst SENDGRID_REGION = \"global\";\n// Initialize the allowed regions and their corresponding hosts\nconst REGION_HOST_MAP = {\n    eu: \"https://api.eu.sendgrid.com/\",\n    global: \"https://api.sendgrid.com/\"\n};\nclass Client {\n    constructor(){\n        this.auth = \"\";\n        this.impersonateSubuser = \"\";\n        this.sendgrid_region = SENDGRID_REGION;\n        this.defaultHeaders = {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": \"sendgrid/\" + pkg.version + \";nodejs\"\n        };\n        this.defaultRequest = {\n            baseUrl: SENDGRID_BASE_URL,\n            url: \"\",\n            method: \"GET\",\n            headers: {},\n            maxContentLength: Infinity,\n            maxBodyLength: Infinity\n        };\n    }\n    setApiKey(apiKey) {\n        this.auth = \"Bearer \" + apiKey;\n        this.setDefaultRequest(\"baseUrl\", REGION_HOST_MAP[this.sendgrid_region]);\n        if (!this.isValidApiKey(apiKey)) {\n            console.warn(`API key does not start with \"${API_KEY_PREFIX}\".`);\n        }\n    }\n    setTwilioEmailAuth(username, password) {\n        const b64Auth = Buffer.from(username + \":\" + password).toString(\"base64\");\n        this.auth = \"Basic \" + b64Auth;\n        this.setDefaultRequest(\"baseUrl\", TWILIO_BASE_URL);\n        if (!this.isValidTwilioAuth(username, password)) {\n            console.warn(\"Twilio Email credentials must be non-empty strings.\");\n        }\n    }\n    isValidApiKey(apiKey) {\n        return this.isString(apiKey) && apiKey.trim().startsWith(API_KEY_PREFIX);\n    }\n    isValidTwilioAuth(username, password) {\n        return this.isString(username) && username && this.isString(password) && password;\n    }\n    isString(value) {\n        return typeof value === \"string\" || value instanceof String;\n    }\n    setImpersonateSubuser(subuser) {\n        this.impersonateSubuser = subuser;\n    }\n    setDefaultHeader(key, value) {\n        if (key !== null && typeof key === \"object\") {\n            // key is an object\n            Object.assign(this.defaultHeaders, key);\n            return this;\n        }\n        this.defaultHeaders[key] = value;\n        return this;\n    }\n    setDefaultRequest(key, value) {\n        if (key !== null && typeof key === \"object\") {\n            // key is an object\n            Object.assign(this.defaultRequest, key);\n            return this;\n        }\n        this.defaultRequest[key] = value;\n        return this;\n    }\n    /**\n   * Global is the default residency (or region)\n   * Global region means the message will be sent through https://api.sendgrid.com\n   * EU region means the message will be sent through https://api.eu.sendgrid.com\n   **/ setDataResidency(region) {\n        if (!REGION_HOST_MAP.hasOwnProperty(region)) {\n            console.warn('Region can only be \"global\" or \"eu\".');\n        } else {\n            this.sendgrid_region = region;\n            this.setDefaultRequest(\"baseUrl\", REGION_HOST_MAP[region]);\n        }\n        return this;\n    }\n    createHeaders(data) {\n        // Merge data with default headers.\n        const headers = mergeData(this.defaultHeaders, data);\n        // Add auth, but don't overwrite if header already set.\n        if (typeof headers.Authorization === \"undefined\" && this.auth) {\n            headers.Authorization = this.auth;\n        }\n        if (this.impersonateSubuser) {\n            headers[\"On-Behalf-Of\"] = this.impersonateSubuser;\n        }\n        return headers;\n    }\n    createRequest(data) {\n        let options = {\n            url: data.uri || data.url,\n            baseUrl: data.baseUrl,\n            method: data.method,\n            data: data.body,\n            params: data.qs,\n            headers: data.headers\n        };\n        // Merge data with default request.\n        options = mergeData(this.defaultRequest, options);\n        options.headers = this.createHeaders(options.headers);\n        options.baseURL = options.baseUrl;\n        delete options.baseUrl;\n        return options;\n    }\n    request(data, cb) {\n        data = this.createRequest(data);\n        const promise = new Promise((resolve, reject)=>{\n            axios(data).then((response)=>{\n                return resolve([\n                    new Response(response.status, response.data, response.headers),\n                    response.data\n                ]);\n            }).catch((error)=>{\n                if (error.response) {\n                    if (error.response.status >= 400) {\n                        return reject(new ResponseError(error.response));\n                    }\n                }\n                return reject(error);\n            });\n        });\n        // Throw an error in case a callback function was not passed.\n        if (cb && typeof cb !== \"function\") {\n            throw new Error(\"Callback passed is not a function.\");\n        }\n        if (cb) {\n            return promise.then((result)=>cb(null, result)).catch((error)=>cb(error, null));\n        }\n        return promise;\n    }\n}\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/client/src/classes/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/client/src/client.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sendgrid/client/src/client.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const Client = __webpack_require__(/*! ./classes/client */ \"(rsc)/./node_modules/@sendgrid/client/src/classes/client.js\");\n//Export singleton instance\nmodule.exports = new Client();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2NsaWVudC9zcmMvY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QiwyQkFBMkI7QUFDM0JDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvY2xpZW50L3NyYy9jbGllbnQuanM/ZWU5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cbmNvbnN0IENsaWVudCA9IHJlcXVpcmUoJy4vY2xhc3Nlcy9jbGllbnQnKTtcblxuLy9FeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDbGllbnQoKTtcbiJdLCJuYW1lcyI6WyJDbGllbnQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/client/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/attachment.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/attachment.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const toCamelCase = __webpack_require__(/*! ../helpers/to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\");\nconst toSnakeCase = __webpack_require__(/*! ../helpers/to-snake-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js\");\nconst deepClone = __webpack_require__(/*! ../helpers/deep-clone */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\n/**\n * Attachment class\n */ class Attachment {\n    /**\n   * Constructor\n   */ constructor(data){\n        //Create from data\n        if (data) {\n            this.fromData(data);\n        }\n    }\n    /**\n   * From data\n   */ fromData(data) {\n        //Expecting object\n        if (typeof data !== \"object\") {\n            throw new Error(\"Expecting object for Mail data\");\n        }\n        //Convert to camel case to make it workable, making a copy to prevent\n        //changes to the original objects\n        data = deepClone(data);\n        data = toCamelCase(data);\n        //Extract properties from data\n        const { content, filename, type, disposition, contentId, filePath } = data;\n        if (typeof content !== \"undefined\" && typeof filePath !== \"undefined\") {\n            throw new Error(\"The props 'content' and 'filePath' cannot be used together.\");\n        }\n        //Set data\n        this.setFilename(filename);\n        this.setType(type);\n        this.setDisposition(disposition);\n        this.setContentId(contentId);\n        this.setContent(filePath ? this.readFile(filePath) : content);\n    }\n    /**\n   * Read a file and return its content as base64\n   */ readFile(filePath) {\n        return fs.readFileSync(path.resolve(filePath));\n    }\n    /**\n   * Set content\n   */ setContent(content) {\n        //Duck type check toString on content if it's a Buffer as that's the method that will be called.\n        if (typeof content === \"string\") {\n            this.content = content;\n            return;\n        } else if (content instanceof Buffer && content.toString !== undefined) {\n            this.content = content.toString();\n            if (this.disposition === \"attachment\") {\n                this.content = content.toString(\"base64\");\n            }\n            return;\n        }\n        throw new Error(\"`content` expected to be either Buffer or string\");\n    }\n    /**\n   * Set content\n   */ setFileContent(content) {\n        if (content instanceof Buffer && content.toString !== undefined) {\n            this.content = content.toString(\"base64\");\n            return;\n        }\n        throw new Error(\"`content` expected to be Buffer\");\n    }\n    /**\n   * Set filename\n   */ setFilename(filename) {\n        if (typeof filename === \"undefined\") {\n            return;\n        }\n        if (filename && typeof filename !== \"string\") {\n            throw new Error(\"String expected for `filename`\");\n        }\n        this.filename = filename;\n    }\n    /**\n   * Set type\n   */ setType(type) {\n        if (typeof type === \"undefined\") {\n            return;\n        }\n        if (typeof type !== \"string\") {\n            throw new Error(\"String expected for `type`\");\n        }\n        this.type = type;\n    }\n    /**\n   * Set disposition\n   */ setDisposition(disposition) {\n        if (typeof disposition === \"undefined\") {\n            return;\n        }\n        if (typeof disposition !== \"string\") {\n            throw new Error(\"String expected for `disposition`\");\n        }\n        this.disposition = disposition;\n    }\n    /**\n   * Set content ID\n   */ setContentId(contentId) {\n        if (typeof contentId === \"undefined\") {\n            return;\n        }\n        if (typeof contentId !== \"string\") {\n            throw new Error(\"String expected for `contentId`\");\n        }\n        this.contentId = contentId;\n    }\n    /**\n   * To JSON\n   */ toJSON() {\n        //Extract properties from self\n        const { content, filename, type, disposition, contentId } = this;\n        //Initialize with mandatory properties\n        const json = {\n            content,\n            filename\n        };\n        //Add whatever else we have\n        if (typeof type !== \"undefined\") {\n            json.type = type;\n        }\n        if (typeof disposition !== \"undefined\") {\n            json.disposition = disposition;\n        }\n        if (typeof contentId !== \"undefined\") {\n            json.contentId = contentId;\n        }\n        //Return\n        return toSnakeCase(json);\n    }\n}\n//Export class\nmodule.exports = Attachment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/attachment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/email-address.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/email-address.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const splitNameEmail = __webpack_require__(/*! ../helpers/split-name-email */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/split-name-email.js\");\n/**\n * Email address class\n */ class EmailAddress {\n    /**\n\t * Constructor\n\t */ constructor(data){\n        //Construct from data\n        if (data) {\n            this.fromData(data);\n        }\n    }\n    /**\n   * From data\n   */ fromData(data) {\n        //String given\n        if (typeof data === \"string\") {\n            const [name, email] = splitNameEmail(data);\n            data = {\n                name,\n                email\n            };\n        }\n        //Expecting object\n        if (typeof data !== \"object\") {\n            throw new Error(\"Expecting object or string for EmailAddress data\");\n        }\n        //Extract name and email\n        const { name, email } = data;\n        //Set\n        this.setEmail(email);\n        this.setName(name);\n    }\n    /**\n   * Set name\n   */ setName(name) {\n        if (typeof name === \"undefined\") {\n            return;\n        }\n        if (typeof name !== \"string\") {\n            throw new Error(\"String expected for `name`\");\n        }\n        this.name = name;\n    }\n    /**\n   * Set email (mandatory)\n   */ setEmail(email) {\n        if (typeof email === \"undefined\") {\n            throw new Error(\"Must provide `email`\");\n        }\n        if (typeof email !== \"string\") {\n            throw new Error(\"String expected for `email`\");\n        }\n        this.email = email;\n    }\n    /**\n\t * To JSON\n\t */ toJSON() {\n        //Get properties\n        const { email, name } = this;\n        //Initialize with mandatory properties\n        const json = {\n            email\n        };\n        //Add name if present\n        if (name !== \"\") {\n            json.name = name;\n        }\n        //Return\n        return json;\n    }\n    /**************************************************************************\n   * Static helpers\n   ***/ /**\n   * Create an EmailAddress instance from given data\n   */ static create(data) {\n        //Array?\n        if (Array.isArray(data)) {\n            return data.filter((item)=>!!item).map((item)=>this.create(item));\n        }\n        //Already instance of EmailAddress class?\n        if (data instanceof EmailAddress) {\n            return data;\n        }\n        //Create instance\n        return new EmailAddress(data);\n    }\n}\n//Export class\nmodule.exports = EmailAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9lbWFpbC1hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxpQkFBaUJDLG1CQUFPQSxDQUFDO0FBRS9COztDQUVDLEdBQ0QsTUFBTUM7SUFFSjs7RUFFQSxHQUNBQyxZQUFZQyxJQUFJLENBQUU7UUFFaEIscUJBQXFCO1FBQ3JCLElBQUlBLE1BQU07WUFDUixJQUFJLENBQUNDLFFBQVEsQ0FBQ0Q7UUFDaEI7SUFDRjtJQUVBOztHQUVDLEdBQ0RDLFNBQVNELElBQUksRUFBRTtRQUViLGNBQWM7UUFDZCxJQUFJLE9BQU9BLFNBQVMsVUFBVTtZQUM1QixNQUFNLENBQUNFLE1BQU1DLE1BQU0sR0FBR1AsZUFBZUk7WUFDckNBLE9BQU87Z0JBQUNFO2dCQUFNQztZQUFLO1FBQ3JCO1FBRUEsa0JBQWtCO1FBQ2xCLElBQUksT0FBT0gsU0FBUyxVQUFVO1lBQzVCLE1BQU0sSUFBSUksTUFBTTtRQUNsQjtRQUVBLHdCQUF3QjtRQUN4QixNQUFNLEVBQUNGLElBQUksRUFBRUMsS0FBSyxFQUFDLEdBQUdIO1FBRXRCLEtBQUs7UUFDTCxJQUFJLENBQUNLLFFBQVEsQ0FBQ0Y7UUFDZCxJQUFJLENBQUNHLE9BQU8sQ0FBQ0o7SUFDZjtJQUVBOztHQUVDLEdBQ0RJLFFBQVFKLElBQUksRUFBRTtRQUNaLElBQUksT0FBT0EsU0FBUyxhQUFhO1lBQy9CO1FBQ0Y7UUFDQSxJQUFJLE9BQU9BLFNBQVMsVUFBVTtZQUM1QixNQUFNLElBQUlFLE1BQU07UUFDbEI7UUFDQSxJQUFJLENBQUNGLElBQUksR0FBR0E7SUFDZDtJQUVBOztHQUVDLEdBQ0RHLFNBQVNGLEtBQUssRUFBRTtRQUNkLElBQUksT0FBT0EsVUFBVSxhQUFhO1lBQ2hDLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUNBLElBQUksT0FBT0QsVUFBVSxVQUFVO1lBQzdCLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUNBLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtJQUNmO0lBRUE7O0VBRUEsR0FDQUksU0FBUztRQUVQLGdCQUFnQjtRQUNoQixNQUFNLEVBQUNKLEtBQUssRUFBRUQsSUFBSSxFQUFDLEdBQUcsSUFBSTtRQUUxQixzQ0FBc0M7UUFDdEMsTUFBTU0sT0FBTztZQUFDTDtRQUFLO1FBRW5CLHFCQUFxQjtRQUNyQixJQUFJRCxTQUFTLElBQUk7WUFDZk0sS0FBS04sSUFBSSxHQUFHQTtRQUNkO1FBRUEsUUFBUTtRQUNSLE9BQU9NO0lBQ1Q7SUFFQTs7S0FFRyxHQUVIOztHQUVDLEdBQ0QsT0FBT0MsT0FBT1QsSUFBSSxFQUFFO1FBRWxCLFFBQVE7UUFDUixJQUFJVSxNQUFNQyxPQUFPLENBQUNYLE9BQU87WUFDdkIsT0FBT0EsS0FDSlksTUFBTSxDQUFDQyxDQUFBQSxPQUFRLENBQUMsQ0FBQ0EsTUFDakJDLEdBQUcsQ0FBQ0QsQ0FBQUEsT0FBUSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0k7UUFDN0I7UUFFQSx5Q0FBeUM7UUFDekMsSUFBSWIsZ0JBQWdCRixjQUFjO1lBQ2hDLE9BQU9FO1FBQ1Q7UUFFQSxpQkFBaUI7UUFDakIsT0FBTyxJQUFJRixhQUFhRTtJQUMxQjtBQUNGO0FBRUEsY0FBYztBQUNkZSxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9jbGFzc2VzL2VtYWlsLWFkZHJlc3MuanM/MjEyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cbmNvbnN0IHNwbGl0TmFtZUVtYWlsID0gcmVxdWlyZSgnLi4vaGVscGVycy9zcGxpdC1uYW1lLWVtYWlsJyk7XG5cbi8qKlxuICogRW1haWwgYWRkcmVzcyBjbGFzc1xuICovXG5jbGFzcyBFbWFpbEFkZHJlc3Mge1xuXG4gIC8qKlxuXHQgKiBDb25zdHJ1Y3RvclxuXHQgKi9cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuXG4gICAgLy9Db25zdHJ1Y3QgZnJvbSBkYXRhXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuZnJvbURhdGEoZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZyb20gZGF0YVxuICAgKi9cbiAgZnJvbURhdGEoZGF0YSkge1xuXG4gICAgLy9TdHJpbmcgZ2l2ZW5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBbbmFtZSwgZW1haWxdID0gc3BsaXROYW1lRW1haWwoZGF0YSk7XG4gICAgICBkYXRhID0ge25hbWUsIGVtYWlsfTtcbiAgICB9XG5cbiAgICAvL0V4cGVjdGluZyBvYmplY3RcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBvYmplY3Qgb3Igc3RyaW5nIGZvciBFbWFpbEFkZHJlc3MgZGF0YScpO1xuICAgIH1cblxuICAgIC8vRXh0cmFjdCBuYW1lIGFuZCBlbWFpbFxuICAgIGNvbnN0IHtuYW1lLCBlbWFpbH0gPSBkYXRhO1xuXG4gICAgLy9TZXRcbiAgICB0aGlzLnNldEVtYWlsKGVtYWlsKTtcbiAgICB0aGlzLnNldE5hbWUobmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG5hbWVcbiAgICovXG4gIHNldE5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgZXhwZWN0ZWQgZm9yIGBuYW1lYCcpO1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBlbWFpbCAobWFuZGF0b3J5KVxuICAgKi9cbiAgc2V0RW1haWwoZW1haWwpIHtcbiAgICBpZiAodHlwZW9mIGVtYWlsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYGVtYWlsYCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVtYWlsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgZXhwZWN0ZWQgZm9yIGBlbWFpbGAnKTtcbiAgICB9XG4gICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xuICB9XG5cbiAgLyoqXG5cdCAqIFRvIEpTT05cblx0ICovXG4gIHRvSlNPTigpIHtcblxuICAgIC8vR2V0IHByb3BlcnRpZXNcbiAgICBjb25zdCB7ZW1haWwsIG5hbWV9ID0gdGhpcztcblxuICAgIC8vSW5pdGlhbGl6ZSB3aXRoIG1hbmRhdG9yeSBwcm9wZXJ0aWVzXG4gICAgY29uc3QganNvbiA9IHtlbWFpbH07XG5cbiAgICAvL0FkZCBuYW1lIGlmIHByZXNlbnRcbiAgICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICAgIGpzb24ubmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgLy9SZXR1cm5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBTdGF0aWMgaGVscGVyc1xuICAgKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gRW1haWxBZGRyZXNzIGluc3RhbmNlIGZyb20gZ2l2ZW4gZGF0YVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShkYXRhKSB7XG5cbiAgICAvL0FycmF5P1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKVxuICAgICAgICAubWFwKGl0ZW0gPT4gdGhpcy5jcmVhdGUoaXRlbSkpO1xuICAgIH1cblxuICAgIC8vQWxyZWFkeSBpbnN0YW5jZSBvZiBFbWFpbEFkZHJlc3MgY2xhc3M/XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFbWFpbEFkZHJlc3MpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8vQ3JlYXRlIGluc3RhbmNlXG4gICAgcmV0dXJuIG5ldyBFbWFpbEFkZHJlc3MoZGF0YSk7XG4gIH1cbn1cblxuLy9FeHBvcnQgY2xhc3Ncbm1vZHVsZS5leHBvcnRzID0gRW1haWxBZGRyZXNzO1xuIl0sIm5hbWVzIjpbInNwbGl0TmFtZUVtYWlsIiwicmVxdWlyZSIsIkVtYWlsQWRkcmVzcyIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImZyb21EYXRhIiwibmFtZSIsImVtYWlsIiwiRXJyb3IiLCJzZXRFbWFpbCIsInNldE5hbWUiLCJ0b0pTT04iLCJqc29uIiwiY3JlYXRlIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIiwiaXRlbSIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/email-address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Expose classes\n */ const Attachment = __webpack_require__(/*! ./attachment */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/attachment.js\");\nconst EmailAddress = __webpack_require__(/*! ./email-address */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/email-address.js\");\nconst Mail = __webpack_require__(/*! ./mail */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/mail.js\");\nconst Personalization = __webpack_require__(/*! ./personalization */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/personalization.js\");\nconst Response = __webpack_require__(/*! ./response */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/response.js\");\nconst ResponseError = __webpack_require__(/*! ./response-error */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/response-error.js\");\nconst Statistics = __webpack_require__(/*! ./statistics */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/statistics.js\");\n/**\n * Export\n */ module.exports = {\n    Attachment,\n    EmailAddress,\n    Mail,\n    Personalization,\n    Response,\n    ResponseError,\n    Statistics\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOztDQUVDLEdBQ0QsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUUsT0FBT0YsbUJBQU9BLENBQUM7QUFDckIsTUFBTUcsa0JBQWtCSCxtQkFBT0EsQ0FBQztBQUNoQyxNQUFNSSxXQUFXSixtQkFBT0EsQ0FBQztBQUN6QixNQUFNSyxnQkFBZ0JMLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU1NLGFBQWFOLG1CQUFPQSxDQUFDO0FBRTNCOztDQUVDLEdBQ0RPLE9BQU9DLE9BQU8sR0FBRztJQUNmVDtJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2NsYXNzZXMvaW5kZXguanM/OGJmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXhwb3NlIGNsYXNzZXNcbiAqL1xuY29uc3QgQXR0YWNobWVudCA9IHJlcXVpcmUoJy4vYXR0YWNobWVudCcpO1xuY29uc3QgRW1haWxBZGRyZXNzID0gcmVxdWlyZSgnLi9lbWFpbC1hZGRyZXNzJyk7XG5jb25zdCBNYWlsID0gcmVxdWlyZSgnLi9tYWlsJyk7XG5jb25zdCBQZXJzb25hbGl6YXRpb24gPSByZXF1aXJlKCcuL3BlcnNvbmFsaXphdGlvbicpO1xuY29uc3QgUmVzcG9uc2UgPSByZXF1aXJlKCcuL3Jlc3BvbnNlJyk7XG5jb25zdCBSZXNwb25zZUVycm9yID0gcmVxdWlyZSgnLi9yZXNwb25zZS1lcnJvcicpO1xuY29uc3QgU3RhdGlzdGljcyA9IHJlcXVpcmUoJy4vc3RhdGlzdGljcycpO1xuXG4vKipcbiAqIEV4cG9ydFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXR0YWNobWVudCxcbiAgRW1haWxBZGRyZXNzLFxuICBNYWlsLFxuICBQZXJzb25hbGl6YXRpb24sXG4gIFJlc3BvbnNlLFxuICBSZXNwb25zZUVycm9yLFxuICBTdGF0aXN0aWNzLFxufTtcbiJdLCJuYW1lcyI6WyJBdHRhY2htZW50IiwicmVxdWlyZSIsIkVtYWlsQWRkcmVzcyIsIk1haWwiLCJQZXJzb25hbGl6YXRpb24iLCJSZXNwb25zZSIsIlJlc3BvbnNlRXJyb3IiLCJTdGF0aXN0aWNzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/mail.js":
/*!********************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/mail.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const EmailAddress = __webpack_require__(/*! ./email-address */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/email-address.js\");\nconst Personalization = __webpack_require__(/*! ./personalization */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/personalization.js\");\nconst toCamelCase = __webpack_require__(/*! ../helpers/to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\");\nconst toSnakeCase = __webpack_require__(/*! ../helpers/to-snake-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js\");\nconst deepClone = __webpack_require__(/*! ../helpers/deep-clone */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\");\nconst arrayToJSON = __webpack_require__(/*! ../helpers/array-to-json */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/array-to-json.js\");\nconst { DYNAMIC_TEMPLATE_CHAR_WARNING } = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@sendgrid/helpers/constants/index.js\");\nconst { validateMailSettings, validateTrackingSettings } = __webpack_require__(/*! ../helpers/validate-settings */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/validate-settings.js\");\n/**\n * Mail class\n */ class Mail {\n    /**\n   * Constructor\n   */ constructor(data){\n        //Initialize array and object properties\n        this.isDynamic = false;\n        this.hideWarnings = false;\n        this.personalizations = [];\n        this.attachments = [];\n        this.content = [];\n        this.categories = [];\n        this.headers = {};\n        this.sections = {};\n        this.customArgs = {};\n        this.trackingSettings = {};\n        this.mailSettings = {};\n        this.asm = {};\n        //Helper properties\n        this.substitutions = null;\n        this.substitutionWrappers = null;\n        this.dynamicTemplateData = null;\n        //Process data if given\n        if (data) {\n            this.fromData(data);\n        }\n    }\n    /**\n   * Build from data\n   */ fromData(data) {\n        //Expecting object\n        if (typeof data !== \"object\") {\n            throw new Error(\"Expecting object for Mail data\");\n        }\n        //Convert to camel case to make it workable, making a copy to prevent\n        //changes to the original objects\n        data = deepClone(data);\n        data = toCamelCase(data, [\n            \"substitutions\",\n            \"dynamicTemplateData\",\n            \"customArgs\",\n            \"headers\",\n            \"sections\"\n        ]);\n        //Extract properties from data\n        const { to, from, replyTo, cc, bcc, sendAt, subject, text, html, content, templateId, personalizations, attachments, ipPoolName, batchId, sections, headers, categories, category, customArgs, asm, mailSettings, trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple, hideWarnings, replyToList } = data;\n        //Set data\n        this.setFrom(from);\n        this.setReplyTo(replyTo);\n        this.setSubject(subject);\n        this.setSendAt(sendAt);\n        this.setTemplateId(templateId);\n        this.setBatchId(batchId);\n        this.setIpPoolName(ipPoolName);\n        this.setAttachments(attachments);\n        this.setContent(content);\n        this.setSections(sections);\n        this.setHeaders(headers);\n        this.setCategories(category);\n        this.setCategories(categories);\n        this.setCustomArgs(customArgs);\n        this.setAsm(asm);\n        this.setMailSettings(mailSettings);\n        this.setTrackingSettings(trackingSettings);\n        this.setHideWarnings(hideWarnings);\n        this.setReplyToList(replyToList);\n        if (this.isDynamic) {\n            this.setDynamicTemplateData(dynamicTemplateData);\n        } else {\n            this.setSubstitutions(substitutions);\n            this.setSubstitutionWrappers(substitutionWrappers);\n        }\n        //Add contents from text/html properties\n        this.addTextContent(text);\n        this.addHtmlContent(html);\n        //Using \"to\" property for personalizations\n        if (personalizations) {\n            this.setPersonalizations(personalizations);\n        } else if (isMultiple && Array.isArray(to)) {\n            //Multiple individual emails\n            to.forEach((to)=>this.addTo(to, cc, bcc));\n        } else {\n            //Single email (possibly with multiple recipients in the to field)\n            this.addTo(to, cc, bcc);\n        }\n    }\n    /**\n   * Set from email\n   */ setFrom(from) {\n        if (this._checkProperty(\"from\", from, [\n            this._checkUndefined\n        ])) {\n            if (typeof from !== \"string\" && typeof from.email !== \"string\") {\n                throw new Error(\"String or address object expected for `from`\");\n            }\n            this.from = EmailAddress.create(from);\n        }\n    }\n    /**\n   * Set reply to\n   */ setReplyTo(replyTo) {\n        if (this._checkProperty(\"replyTo\", replyTo, [\n            this._checkUndefined\n        ])) {\n            if (typeof replyTo !== \"string\" && typeof replyTo.email !== \"string\") {\n                throw new Error(\"String or address object expected for `replyTo`\");\n            }\n            this.replyTo = EmailAddress.create(replyTo);\n        }\n    }\n    /**\n   * Set subject\n   */ setSubject(subject) {\n        this._setProperty(\"subject\", subject, \"string\");\n    }\n    /**\n   * Set send at\n   */ setSendAt(sendAt) {\n        if (this._checkProperty(\"sendAt\", sendAt, [\n            this._checkUndefined,\n            this._createCheckThatThrows(Number.isInteger, \"Integer expected for `sendAt`\")\n        ])) {\n            this.sendAt = sendAt;\n        }\n    }\n    /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */ setTemplateId(templateId) {\n        if (this._setProperty(\"templateId\", templateId, \"string\")) {\n            if (templateId.indexOf(\"d-\") === 0) {\n                this.isDynamic = true;\n            }\n        }\n    }\n    /**\n   * Set batch ID\n   */ setBatchId(batchId) {\n        this._setProperty(\"batchId\", batchId, \"string\");\n    }\n    /**\n   * Set IP pool name\n   */ setIpPoolName(ipPoolName) {\n        this._setProperty(\"ipPoolName\", ipPoolName, \"string\");\n    }\n    /**\n   * Set ASM\n   */ setAsm(asm) {\n        if (this._checkProperty(\"asm\", asm, [\n            this._checkUndefined,\n            this._createTypeCheck(\"object\")\n        ])) {\n            if (typeof asm.groupId !== \"number\") {\n                throw new Error(\"Expected `asm` to include an integer in its `groupId` field\");\n            }\n            if (asm.groupsToDisplay && (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every((group)=>typeof group === \"number\"))) {\n                throw new Error(\"Array of integers expected for `asm.groupsToDisplay`\");\n            }\n            this.asm = asm;\n        }\n    }\n    /**\n   * Set personalizations\n   */ setPersonalizations(personalizations) {\n        if (!this._doArrayCheck(\"personalizations\", personalizations)) {\n            return;\n        }\n        if (!personalizations.every((personalization)=>typeof personalization === \"object\")) {\n            throw new Error(\"Array of objects expected for `personalizations`\");\n        }\n        //Clear and use add helper to add one by one\n        this.personalizations = [];\n        personalizations.forEach((personalization)=>this.addPersonalization(personalization));\n    }\n    /**\n   * Add personalization\n   */ addPersonalization(personalization) {\n        //We should either send substitutions or dynamicTemplateData\n        //depending on the templateId\n        if (this.isDynamic && personalization.substitutions) {\n            delete personalization.substitutions;\n        } else if (!this.isDynamic && personalization.dynamicTemplateData) {\n            delete personalization.dynamicTemplateData;\n        }\n        //Convert to class if needed\n        if (!(personalization instanceof Personalization)) {\n            personalization = new Personalization(personalization);\n        }\n        //If this is dynamic, set dynamicTemplateData, or set substitutions\n        if (this.isDynamic) {\n            this.applyDynamicTemplateData(personalization);\n        } else {\n            this.applySubstitutions(personalization);\n        }\n        //Push personalization to array\n        this.personalizations.push(personalization);\n    }\n    /**\n   * Convenience method for quickly creating personalizations\n   */ addTo(to, cc, bcc) {\n        if (typeof to === \"undefined\" && typeof cc === \"undefined\" && typeof bcc === \"undefined\") {\n            throw new Error(\"Provide at least one of to, cc or bcc\");\n        }\n        this.addPersonalization(new Personalization({\n            to,\n            cc,\n            bcc\n        }));\n    }\n    /**\n   * Set substitutions\n   */ setSubstitutions(substitutions) {\n        this._setProperty(\"substitutions\", substitutions, \"object\");\n    }\n    /**\n   * Set substitution wrappers\n   */ setSubstitutionWrappers(substitutionWrappers) {\n        let lengthCheck = (propertyName, value)=>{\n            if (!Array.isArray(value) || value.length !== 2) {\n                throw new Error(\"Array expected with two elements for `\" + propertyName + \"`\");\n            }\n        };\n        if (this._checkProperty(\"substitutionWrappers\", substitutionWrappers, [\n            this._checkUndefined,\n            lengthCheck\n        ])) {\n            this.substitutionWrappers = substitutionWrappers;\n        }\n    }\n    /**\n   * Helper which applies globally set substitutions to personalizations\n   */ applySubstitutions(personalization) {\n        if (personalization instanceof Personalization) {\n            personalization.reverseMergeSubstitutions(this.substitutions);\n            personalization.setSubstitutionWrappers(this.substitutionWrappers);\n        }\n    }\n    /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */ applyDynamicTemplateData(personalization) {\n        if (personalization instanceof Personalization) {\n            personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n        }\n    }\n    /**\n   * Set dynamicTemplateData\n   */ setDynamicTemplateData(dynamicTemplateData) {\n        if (typeof dynamicTemplateData === \"undefined\") {\n            return;\n        }\n        if (typeof dynamicTemplateData !== \"object\") {\n            throw new Error(\"Object expected for `dynamicTemplateData`\");\n        }\n        // Check dynamic template for non-escaped characters and warn if found\n        if (!this.hideWarnings) {\n            Object.values(dynamicTemplateData).forEach((value)=>{\n                if (/['\"&]/.test(value)) {\n                    console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n                }\n            });\n        }\n        this.dynamicTemplateData = dynamicTemplateData;\n    }\n    /**\n   * Set content\n   */ setContent(content) {\n        if (this._doArrayCheck(\"content\", content)) {\n            if (!content.every((contentField)=>typeof contentField === \"object\")) {\n                throw new Error(\"Expected each entry in `content` to be an object\");\n            }\n            if (!content.every((contentField)=>typeof contentField.type === \"string\")) {\n                throw new Error(\"Expected each `content` entry to contain a `type` string\");\n            }\n            if (!content.every((contentField)=>typeof contentField.value === \"string\")) {\n                throw new Error(\"Expected each `content` entry to contain a `value` string\");\n            }\n            this.content = content;\n        }\n    }\n    /**\n   * Add content\n   */ addContent(content) {\n        if (this._checkProperty(\"content\", content, [\n            this._createTypeCheck(\"object\")\n        ])) {\n            this.content.push(content);\n        }\n    }\n    /**\n   * Add text content\n   */ addTextContent(text) {\n        if (this._checkProperty(\"text\", text, [\n            this._checkUndefined,\n            this._createTypeCheck(\"string\")\n        ])) {\n            this.addContent({\n                value: text,\n                type: \"text/plain\"\n            });\n        }\n    }\n    /**\n   * Add HTML content\n   */ addHtmlContent(html) {\n        if (this._checkProperty(\"html\", html, [\n            this._checkUndefined,\n            this._createTypeCheck(\"string\")\n        ])) {\n            this.addContent({\n                value: html,\n                type: \"text/html\"\n            });\n        }\n    }\n    /**\n   * Set attachments\n   */ setAttachments(attachments) {\n        if (this._doArrayCheck(\"attachments\", attachments)) {\n            if (!attachments.every((attachment)=>typeof attachment.content === \"string\")) {\n                throw new Error(\"Expected each attachment to contain a `content` string\");\n            }\n            if (!attachments.every((attachment)=>typeof attachment.filename === \"string\")) {\n                throw new Error(\"Expected each attachment to contain a `filename` string\");\n            }\n            if (!attachments.every((attachment)=>!attachment.type || typeof attachment.type === \"string\")) {\n                throw new Error(\"Expected the attachment's `type` field to be a string\");\n            }\n            if (!attachments.every((attachment)=>!attachment.disposition || typeof attachment.disposition === \"string\")) {\n                throw new Error(\"Expected the attachment's `disposition` field to be a string\");\n            }\n            this.attachments = attachments;\n        }\n    }\n    /**\n   * Add attachment\n   */ addAttachment(attachment) {\n        if (this._checkProperty(\"attachment\", attachment, [\n            this._checkUndefined,\n            this._createTypeCheck(\"object\")\n        ])) {\n            this.attachments.push(attachment);\n        }\n    }\n    /**\n   * Set categories\n   */ setCategories(categories) {\n        let allElementsAreStrings = (propertyName, value)=>{\n            if (!Array.isArray(value) || !value.every((item)=>typeof item === \"string\")) {\n                throw new Error(\"Array of strings expected for `\" + propertyName + \"`\");\n            }\n        };\n        if (typeof categories === \"string\") {\n            categories = [\n                categories\n            ];\n        }\n        if (this._checkProperty(\"categories\", categories, [\n            this._checkUndefined,\n            allElementsAreStrings\n        ])) {\n            this.categories = categories;\n        }\n    }\n    /**\n   * Add category\n   */ addCategory(category) {\n        if (this._checkProperty(\"category\", category, [\n            this._createTypeCheck(\"string\")\n        ])) {\n            this.categories.push(category);\n        }\n    }\n    /**\n   * Set headers\n   */ setHeaders(headers) {\n        this._setProperty(\"headers\", headers, \"object\");\n    }\n    /**\n   * Add a header\n   */ addHeader(key, value) {\n        if (this._checkProperty(\"key\", key, [\n            this._createTypeCheck(\"string\")\n        ]) && this._checkProperty(\"value\", value, [\n            this._createTypeCheck(\"string\")\n        ])) {\n            this.headers[key] = value;\n        }\n    }\n    /**\n   * Set sections\n   */ setSections(sections) {\n        this._setProperty(\"sections\", sections, \"object\");\n    }\n    /**\n   * Set custom args\n   */ setCustomArgs(customArgs) {\n        this._setProperty(\"customArgs\", customArgs, \"object\");\n    }\n    /**\n   * Set tracking settings\n   */ setTrackingSettings(settings) {\n        if (typeof settings === \"undefined\") {\n            return;\n        }\n        validateTrackingSettings(settings);\n        this.trackingSettings = settings;\n    }\n    /**\n   * Set mail settings\n   */ setMailSettings(settings) {\n        if (typeof settings === \"undefined\") {\n            return;\n        }\n        validateMailSettings(settings);\n        this.mailSettings = settings;\n    }\n    /**\n   * Set hide warnings\n   */ setHideWarnings(hide) {\n        if (typeof hide === \"undefined\") {\n            return;\n        }\n        if (typeof hide !== \"boolean\") {\n            throw new Error(\"Boolean expected for `hideWarnings`\");\n        }\n        this.hideWarnings = hide;\n    }\n    /**\n   * To JSON\n   */ toJSON() {\n        //Extract properties from self\n        const { from, replyTo, sendAt, subject, content, templateId, personalizations, attachments, ipPoolName, batchId, asm, sections, headers, categories, customArgs, mailSettings, trackingSettings, replyToList } = this;\n        //Initialize with mandatory values\n        const json = {\n            from,\n            subject,\n            personalizations: arrayToJSON(personalizations)\n        };\n        //Array properties\n        if (Array.isArray(attachments) && attachments.length > 0) {\n            json.attachments = arrayToJSON(attachments);\n        }\n        if (Array.isArray(categories) && categories.length > 0) {\n            json.categories = categories.filter((cat)=>cat !== \"\");\n        }\n        if (Array.isArray(content) && content.length > 0) {\n            json.content = arrayToJSON(content);\n        }\n        //Object properties\n        if (Object.keys(headers).length > 0) {\n            json.headers = headers;\n        }\n        if (Object.keys(mailSettings).length > 0) {\n            json.mailSettings = mailSettings;\n        }\n        if (Object.keys(trackingSettings).length > 0) {\n            json.trackingSettings = trackingSettings;\n        }\n        if (Object.keys(customArgs).length > 0) {\n            json.customArgs = customArgs;\n        }\n        if (Object.keys(sections).length > 0) {\n            json.sections = sections;\n        }\n        if (Object.keys(asm).length > 0) {\n            json.asm = asm;\n        }\n        //Simple properties\n        if (typeof replyTo !== \"undefined\") {\n            json.replyTo = replyTo;\n        }\n        if (typeof sendAt !== \"undefined\") {\n            json.sendAt = sendAt;\n        }\n        if (typeof batchId !== \"undefined\") {\n            json.batchId = batchId;\n        }\n        if (typeof templateId !== \"undefined\") {\n            json.templateId = templateId;\n        }\n        if (typeof ipPoolName !== \"undefined\") {\n            json.ipPoolName = ipPoolName;\n        }\n        if (typeof replyToList !== \"undefined\") {\n            json.replyToList = replyToList;\n        }\n        //Return as snake cased object\n        return toSnakeCase(json, [\n            \"substitutions\",\n            \"dynamicTemplateData\",\n            \"customArgs\",\n            \"headers\",\n            \"sections\"\n        ]);\n    }\n    /**************************************************************************\n   * Static helpers\n   ***/ /**\n   * Create a Mail instance from given data\n   */ static create(data) {\n        //Array?\n        if (Array.isArray(data)) {\n            return data.filter((item)=>!!item).map((item)=>this.create(item));\n        }\n        //Already instance of Mail class?\n        if (data instanceof Mail) {\n            return data;\n        }\n        //Create instance\n        return new Mail(data);\n    }\n    /**************************************************************************\n   * helpers for property-setting checks\n   ***/ /**\n   * Perform a set of checks on the new property value. Returns true if all\n   * checks complete successfully without throwing errors or returning true.\n   */ _checkProperty(propertyName, value, checks) {\n        return !checks.some((e)=>e(propertyName, value));\n    }\n    /**\n   * Set a property with normal undefined and type-checks\n   */ _setProperty(propertyName, value, propertyType) {\n        let propertyChecksPassed = this._checkProperty(propertyName, value, [\n            this._checkUndefined,\n            this._createTypeCheck(propertyType)\n        ]);\n        if (propertyChecksPassed) {\n            this[propertyName] = value;\n        }\n        return propertyChecksPassed;\n    }\n    /**\n   * Fail if the value is undefined.\n   */ _checkUndefined(propertyName, value) {\n        return typeof value === \"undefined\";\n    }\n    /**\n   * Create and return a function that checks for a given type\n   */ _createTypeCheck(propertyType) {\n        return (propertyName, value)=>{\n            if (typeof value !== propertyType) {\n                throw new Error(propertyType + \" expected for `\" + propertyName + \"`\");\n            }\n        };\n    }\n    /**\n   * Create a check out of a callback. If the callback\n   * returns false, the check will throw an error.\n   */ _createCheckThatThrows(check, errorString) {\n        return (propertyName, value)=>{\n            if (!check(value)) {\n                throw new Error(errorString);\n            }\n        };\n    }\n    /**\n   * Set an array property after checking that the new value is an\n   * array.\n   */ _setArrayProperty(propertyName, value) {\n        if (this._doArrayCheck(propertyName, value)) {\n            this[propertyName] = value;\n        }\n    }\n    /**\n   * Check that a value isn't undefined and is an array.\n   */ _doArrayCheck(propertyName, value) {\n        return this._checkProperty(propertyName, value, [\n            this._checkUndefined,\n            this._createCheckThatThrows(Array.isArray, \"Array expected for`\" + propertyName + \"`\")\n        ]);\n    }\n    /**\n   * Set the replyToList from email body\n   */ setReplyToList(replyToList) {\n        if (this._doArrayCheck(\"replyToList\", replyToList) && replyToList.length) {\n            if (!replyToList.every((replyTo)=>replyTo && typeof replyTo.email === \"string\")) {\n                throw new Error(\"Expected each replyTo to contain an `email` string\");\n            }\n            this.replyToList = replyToList;\n        }\n    }\n}\n//Export class\nmodule.exports = Mail;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9tYWlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxlQUFlQyxtQkFBT0EsQ0FBQztBQUM3QixNQUFNQyxrQkFBa0JELG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1HLGNBQWNILG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1JLFlBQVlKLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1LLGNBQWNMLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU0sRUFBRU0sNkJBQTZCLEVBQUUsR0FBR04sbUJBQU9BLENBQUM7QUFDbEQsTUFBTSxFQUFDTyxvQkFBb0IsRUFBRUMsd0JBQXdCLEVBQUMsR0FBR1IsbUJBQU9BLENBQUM7QUFFakU7O0NBRUMsR0FDRCxNQUFNUztJQUVKOztHQUVDLEdBQ0RDLFlBQVlDLElBQUksQ0FBRTtRQUVoQix3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxFQUFFO1FBQzFCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLEVBQUU7UUFDckIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtRQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRyxFQUFFO1FBQ3BCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO1FBQ25CLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsQ0FBQztRQUN6QixJQUFJLENBQUNDLFlBQVksR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQ0MsR0FBRyxHQUFHLENBQUM7UUFFWixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFDckIsSUFBSSxDQUFDQyxvQkFB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LE1BQU0sRUFBRTtZQUN4RSxJQUFJLENBQUNwRCxZQUFZeUMsS0FBSyxDQUFDckQsQ0FBQUEsVUFBV0EsV0FBVyxPQUFPQSxRQUFRMkMsS0FBSyxLQUFLLFdBQVc7Z0JBQy9FLE1BQU0sSUFBSTlDLE1BQU07WUFDbEI7WUFDQSxJQUFJLENBQUNlLFdBQVcsR0FBR0E7UUFDckI7SUFDRjtBQUNGO0FBRUEsY0FBYztBQUNkd0YsT0FBT0MsT0FBTyxHQUFHM0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9tYWlsLmpzPzRkOGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5jb25zdCBFbWFpbEFkZHJlc3MgPSByZXF1aXJlKCcuL2VtYWlsLWFkZHJlc3MnKTtcbmNvbnN0IFBlcnNvbmFsaXphdGlvbiA9IHJlcXVpcmUoJy4vcGVyc29uYWxpemF0aW9uJyk7XG5jb25zdCB0b0NhbWVsQ2FzZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG8tY2FtZWwtY2FzZScpO1xuY29uc3QgdG9TbmFrZUNhc2UgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvLXNuYWtlLWNhc2UnKTtcbmNvbnN0IGRlZXBDbG9uZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZGVlcC1jbG9uZScpO1xuY29uc3QgYXJyYXlUb0pTT04gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2FycmF5LXRvLWpzb24nKTtcbmNvbnN0IHsgRFlOQU1JQ19URU1QTEFURV9DSEFSX1dBUk5JTkcgfSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuY29uc3Qge3ZhbGlkYXRlTWFpbFNldHRpbmdzLCB2YWxpZGF0ZVRyYWNraW5nU2V0dGluZ3N9ID0gcmVxdWlyZSgnLi4vaGVscGVycy92YWxpZGF0ZS1zZXR0aW5ncycpO1xuXG4vKipcbiAqIE1haWwgY2xhc3NcbiAqL1xuY2xhc3MgTWFpbCB7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG5cbiAgICAvL0luaXRpYWxpemUgYXJyYXkgYW5kIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgdGhpcy5pc0R5bmFtaWMgPSBmYWxzZTtcbiAgICB0aGlzLmhpZGVXYXJuaW5ncyA9IGZhbHNlO1xuICAgIHRoaXMucGVyc29uYWxpemF0aW9ucyA9IFtdO1xuICAgIHRoaXMuYXR0YWNobWVudHMgPSBbXTtcbiAgICB0aGlzLmNvbnRlbnQgPSBbXTtcbiAgICB0aGlzLmNhdGVnb3JpZXMgPSBbXTtcbiAgICB0aGlzLmhlYWRlcnMgPSB7fTtcbiAgICB0aGlzLnNlY3Rpb25zID0ge307XG4gICAgdGhpcy5jdXN0b21BcmdzID0ge307XG4gICAgdGhpcy50cmFja2luZ1NldHRpbmdzID0ge307XG4gICAgdGhpcy5tYWlsU2V0dGluZ3MgPSB7fTtcbiAgICB0aGlzLmFzbSA9IHt9O1xuXG4gICAgLy9IZWxwZXIgcHJvcGVydGllc1xuICAgIHRoaXMuc3Vic3RpdHV0aW9ucyA9IG51bGw7XG4gICAgdGhpcy5zdWJzdGl0dXRpb25XcmFwcGVycyA9IG51bGw7XG4gICAgdGhpcy5keW5hbWljVGVtcGxhdGVEYXRhID0gbnVsbDtcblxuICAgIC8vUHJvY2VzcyBkYXRhIGlmIGdpdmVuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHRoaXMuZnJvbURhdGEoZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGZyb20gZGF0YVxuICAgKi9cbiAgZnJvbURhdGEoZGF0YSkge1xuXG4gICAgLy9FeHBlY3Rpbmcgb2JqZWN0XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3Rpbmcgb2JqZWN0IGZvciBNYWlsIGRhdGEnKTtcbiAgICB9XG5cbiAgICAvL0NvbnZlcnQgdG8gY2FtZWwgY2FzZSB0byBtYWtlIGl0IHdvcmthYmxlLCBtYWtpbmcgYSBjb3B5IHRvIHByZXZlbnRcbiAgICAvL2NoYW5nZXMgdG8gdGhlIG9yaWdpbmFsIG9iamVjdHNcbiAgICBkYXRhID0gZGVlcENsb25lKGRhdGEpO1xuICAgIGRhdGEgPSB0b0NhbWVsQ2FzZShkYXRhLCBbJ3N1YnN0aXR1dGlvbnMnLCAnZHluYW1pY1RlbXBsYXRlRGF0YScsICdjdXN0b21BcmdzJywgJ2hlYWRlcnMnLCAnc2VjdGlvbnMnXSk7XG5cbiAgICAvL0V4dHJhY3QgcHJvcGVydGllcyBmcm9tIGRhdGFcbiAgICBjb25zdCB7XG4gICAgICB0bywgZnJvbSwgcmVwbHlUbywgY2MsIGJjYywgc2VuZEF0LCBzdWJqZWN0LCB0ZXh0LCBodG1sLCBjb250ZW50LFxuICAgICAgdGVtcGxhdGVJZCwgcGVyc29uYWxpemF0aW9ucywgYXR0YWNobWVudHMsIGlwUG9vbE5hbWUsIGJhdGNoSWQsXG4gICAgICBzZWN0aW9ucywgaGVhZGVycywgY2F0ZWdvcmllcywgY2F0ZWdvcnksIGN1c3RvbUFyZ3MsIGFzbSwgbWFpbFNldHRpbmdzLFxuICAgICAgdHJhY2tpbmdTZXR0aW5ncywgc3Vic3RpdHV0aW9ucywgc3Vic3RpdHV0aW9uV3JhcHBlcnMsIGR5bmFtaWNUZW1wbGF0ZURhdGEsIGlzTXVsdGlwbGUsXG4gICAgICBoaWRlV2FybmluZ3MsIHJlcGx5VG9MaXN0LFxuICAgIH0gPSBkYXRhO1xuXG4gICAgLy9TZXQgZGF0YVxuICAgIHRoaXMuc2V0RnJvbShmcm9tKTtcbiAgICB0aGlzLnNldFJlcGx5VG8ocmVwbHlUbyk7XG4gICAgdGhpcy5zZXRTdWJqZWN0KHN1YmplY3QpO1xuICAgIHRoaXMuc2V0U2VuZEF0KHNlbmRBdCk7XG4gICAgdGhpcy5zZXRUZW1wbGF0ZUlkKHRlbXBsYXRlSWQpO1xuICAgIHRoaXMuc2V0QmF0Y2hJZChiYXRjaElkKTtcbiAgICB0aGlzLnNldElwUG9vbE5hbWUoaXBQb29sTmFtZSk7XG4gICAgdGhpcy5zZXRBdHRhY2htZW50cyhhdHRhY2htZW50cyk7XG4gICAgdGhpcy5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgIHRoaXMuc2V0U2VjdGlvbnMoc2VjdGlvbnMpO1xuICAgIHRoaXMuc2V0SGVhZGVycyhoZWFkZXJzKTtcbiAgICB0aGlzLnNldENhdGVnb3JpZXMoY2F0ZWdvcnkpO1xuICAgIHRoaXMuc2V0Q2F0ZWdvcmllcyhjYXRlZ29yaWVzKTtcbiAgICB0aGlzLnNldEN1c3RvbUFyZ3MoY3VzdG9tQXJncyk7XG4gICAgdGhpcy5zZXRBc20oYXNtKTtcbiAgICB0aGlzLnNldE1haWxTZXR0aW5ncyhtYWlsU2V0dGluZ3MpO1xuICAgIHRoaXMuc2V0VHJhY2tpbmdTZXR0aW5ncyh0cmFja2luZ1NldHRpbmdzKTtcbiAgICB0aGlzLnNldEhpZGVXYXJuaW5ncyhoaWRlV2FybmluZ3MpO1xuICAgIHRoaXMuc2V0UmVwbHlUb0xpc3QocmVwbHlUb0xpc3QpO1xuXG4gICAgaWYgKHRoaXMuaXNEeW5hbWljKSB7XG4gICAgICB0aGlzLnNldER5bmFtaWNUZW1wbGF0ZURhdGEoZHluYW1pY1RlbXBsYXRlRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3Vic3RpdHV0aW9ucyhzdWJzdGl0dXRpb25zKTtcbiAgICAgIHRoaXMuc2V0U3Vic3RpdHV0aW9uV3JhcHBlcnMoc3Vic3RpdHV0aW9uV3JhcHBlcnMpO1xuICAgIH1cblxuICAgIC8vQWRkIGNvbnRlbnRzIGZyb20gdGV4dC9odG1sIHByb3BlcnRpZXNcbiAgICB0aGlzLmFkZFRleHRDb250ZW50KHRleHQpO1xuICAgIHRoaXMuYWRkSHRtbENvbnRlbnQoaHRtbCk7XG5cbiAgICAvL1VzaW5nIFwidG9cIiBwcm9wZXJ0eSBmb3IgcGVyc29uYWxpemF0aW9uc1xuICAgIGlmIChwZXJzb25hbGl6YXRpb25zKSB7XG4gICAgICB0aGlzLnNldFBlcnNvbmFsaXphdGlvbnMocGVyc29uYWxpemF0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChpc011bHRpcGxlICYmIEFycmF5LmlzQXJyYXkodG8pKSB7XG4gICAgICAvL011bHRpcGxlIGluZGl2aWR1YWwgZW1haWxzXG4gICAgICB0by5mb3JFYWNoKHRvID0+IHRoaXMuYWRkVG8odG8sIGNjLCBiY2MpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy9TaW5nbGUgZW1haWwgKHBvc3NpYmx5IHdpdGggbXVsdGlwbGUgcmVjaXBpZW50cyBpbiB0aGUgdG8gZmllbGQpXG4gICAgICB0aGlzLmFkZFRvKHRvLCBjYywgYmNjKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGZyb20gZW1haWxcbiAgICovXG4gIHNldEZyb20oZnJvbSkge1xuICAgIGlmICh0aGlzLl9jaGVja1Byb3BlcnR5KCdmcm9tJywgZnJvbSwgW3RoaXMuX2NoZWNrVW5kZWZpbmVkXSkpIHtcbiAgICAgIGlmICh0eXBlb2YgZnJvbSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGZyb20uZW1haWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIG9yIGFkZHJlc3Mgb2JqZWN0IGV4cGVjdGVkIGZvciBgZnJvbWAnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZnJvbSA9IEVtYWlsQWRkcmVzcy5jcmVhdGUoZnJvbSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCByZXBseSB0b1xuICAgKi9cbiAgc2V0UmVwbHlUbyhyZXBseVRvKSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ3JlcGx5VG8nLCByZXBseVRvLCBbdGhpcy5fY2hlY2tVbmRlZmluZWRdKSkge1xuICAgICAgaWYgKHR5cGVvZiByZXBseVRvICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmVwbHlUby5lbWFpbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgb3IgYWRkcmVzcyBvYmplY3QgZXhwZWN0ZWQgZm9yIGByZXBseVRvYCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZXBseVRvID0gRW1haWxBZGRyZXNzLmNyZWF0ZShyZXBseVRvKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHN1YmplY3RcbiAgICovXG4gIHNldFN1YmplY3Qoc3ViamVjdCkge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdzdWJqZWN0Jywgc3ViamVjdCwgJ3N0cmluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzZW5kIGF0XG4gICAqL1xuICBzZXRTZW5kQXQoc2VuZEF0KSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ3NlbmRBdCcsIHNlbmRBdCwgW3RoaXMuX2NoZWNrVW5kZWZpbmVkLCB0aGlzLl9jcmVhdGVDaGVja1RoYXRUaHJvd3MoTnVtYmVyLmlzSW50ZWdlciwgJ0ludGVnZXIgZXhwZWN0ZWQgZm9yIGBzZW5kQXRgJyldKSkge1xuICAgICAgdGhpcy5zZW5kQXQgPSBzZW5kQXQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0ZW1wbGF0ZSBJRCwgYWxzbyBjaGVja3MgaWYgdGhlIHRlbXBsYXRlIGlzIGR5bmFtaWMgb3IgbGVnYWN5XG4gICAqL1xuICBzZXRUZW1wbGF0ZUlkKHRlbXBsYXRlSWQpIHtcbiAgICBpZiAodGhpcy5fc2V0UHJvcGVydHkoJ3RlbXBsYXRlSWQnLCB0ZW1wbGF0ZUlkLCAnc3RyaW5nJykpIHtcbiAgICAgIGlmICh0ZW1wbGF0ZUlkLmluZGV4T2YoJ2QtJykgPT09IDApIHtcbiAgICAgICAgdGhpcy5pc0R5bmFtaWMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYmF0Y2ggSURcbiAgICovXG4gIHNldEJhdGNoSWQoYmF0Y2hJZCkge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdiYXRjaElkJywgYmF0Y2hJZCwgJ3N0cmluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBJUCBwb29sIG5hbWVcbiAgICovXG4gIHNldElwUG9vbE5hbWUoaXBQb29sTmFtZSkge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdpcFBvb2xOYW1lJywgaXBQb29sTmFtZSwgJ3N0cmluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBBU01cbiAgICovXG4gIHNldEFzbShhc20pIHtcbiAgICBpZiAodGhpcy5fY2hlY2tQcm9wZXJ0eSgnYXNtJywgYXNtLCBbdGhpcy5fY2hlY2tVbmRlZmluZWQsIHRoaXMuX2NyZWF0ZVR5cGVDaGVjaygnb2JqZWN0JyldKSkge1xuICAgICAgaWYgKHR5cGVvZiBhc20uZ3JvdXBJZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBgYXNtYCB0byBpbmNsdWRlIGFuIGludGVnZXIgaW4gaXRzIGBncm91cElkYCBmaWVsZCcpO1xuICAgICAgfVxuICAgICAgaWYgKGFzbS5ncm91cHNUb0Rpc3BsYXkgJiZcbiAgICAgICAgKCFBcnJheS5pc0FycmF5KGFzbS5ncm91cHNUb0Rpc3BsYXkpIHx8ICFhc20uZ3JvdXBzVG9EaXNwbGF5LmV2ZXJ5KGdyb3VwID0+IHR5cGVvZiBncm91cCA9PT0gJ251bWJlcicpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IG9mIGludGVnZXJzIGV4cGVjdGVkIGZvciBgYXNtLmdyb3Vwc1RvRGlzcGxheWAnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNtID0gYXNtO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcGVyc29uYWxpemF0aW9uc1xuICAgKi9cbiAgc2V0UGVyc29uYWxpemF0aW9ucyhwZXJzb25hbGl6YXRpb25zKSB7XG4gICAgaWYgKCF0aGlzLl9kb0FycmF5Q2hlY2soJ3BlcnNvbmFsaXphdGlvbnMnLCBwZXJzb25hbGl6YXRpb25zKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcGVyc29uYWxpemF0aW9ucy5ldmVyeShwZXJzb25hbGl6YXRpb24gPT4gdHlwZW9mIHBlcnNvbmFsaXphdGlvbiA9PT0gJ29iamVjdCcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IG9mIG9iamVjdHMgZXhwZWN0ZWQgZm9yIGBwZXJzb25hbGl6YXRpb25zYCcpO1xuICAgIH1cblxuICAgIC8vQ2xlYXIgYW5kIHVzZSBhZGQgaGVscGVyIHRvIGFkZCBvbmUgYnkgb25lXG4gICAgdGhpcy5wZXJzb25hbGl6YXRpb25zID0gW107XG4gICAgcGVyc29uYWxpemF0aW9uc1xuICAgICAgLmZvckVhY2gocGVyc29uYWxpemF0aW9uID0+IHRoaXMuYWRkUGVyc29uYWxpemF0aW9uKHBlcnNvbmFsaXphdGlvbikpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBwZXJzb25hbGl6YXRpb25cbiAgICovXG4gIGFkZFBlcnNvbmFsaXphdGlvbihwZXJzb25hbGl6YXRpb24pIHtcbiAgICAvL1dlIHNob3VsZCBlaXRoZXIgc2VuZCBzdWJzdGl0dXRpb25zIG9yIGR5bmFtaWNUZW1wbGF0ZURhdGFcbiAgICAvL2RlcGVuZGluZyBvbiB0aGUgdGVtcGxhdGVJZFxuICAgIGlmICh0aGlzLmlzRHluYW1pYyAmJiBwZXJzb25hbGl6YXRpb24uc3Vic3RpdHV0aW9ucykge1xuICAgICAgZGVsZXRlIHBlcnNvbmFsaXphdGlvbi5zdWJzdGl0dXRpb25zO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNEeW5hbWljICYmIHBlcnNvbmFsaXphdGlvbi5keW5hbWljVGVtcGxhdGVEYXRhKSB7XG4gICAgICBkZWxldGUgcGVyc29uYWxpemF0aW9uLmR5bmFtaWNUZW1wbGF0ZURhdGE7XG4gICAgfVxuXG4gICAgLy9Db252ZXJ0IHRvIGNsYXNzIGlmIG5lZWRlZFxuICAgIGlmICghKHBlcnNvbmFsaXphdGlvbiBpbnN0YW5jZW9mIFBlcnNvbmFsaXphdGlvbikpIHtcbiAgICAgIHBlcnNvbmFsaXphdGlvbiA9IG5ldyBQZXJzb25hbGl6YXRpb24ocGVyc29uYWxpemF0aW9uKTtcbiAgICB9XG5cbiAgICAvL0lmIHRoaXMgaXMgZHluYW1pYywgc2V0IGR5bmFtaWNUZW1wbGF0ZURhdGEsIG9yIHNldCBzdWJzdGl0dXRpb25zXG4gICAgaWYgKHRoaXMuaXNEeW5hbWljKSB7XG4gICAgICB0aGlzLmFwcGx5RHluYW1pY1RlbXBsYXRlRGF0YShwZXJzb25hbGl6YXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcGx5U3Vic3RpdHV0aW9ucyhwZXJzb25hbGl6YXRpb24pO1xuICAgIH1cblxuICAgIC8vUHVzaCBwZXJzb25hbGl6YXRpb24gdG8gYXJyYXlcbiAgICB0aGlzLnBlcnNvbmFsaXphdGlvbnMucHVzaChwZXJzb25hbGl6YXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgcXVpY2tseSBjcmVhdGluZyBwZXJzb25hbGl6YXRpb25zXG4gICAqL1xuICBhZGRUbyh0bywgY2MsIGJjYykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBjYyA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBiY2MgPT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGUgYXQgbGVhc3Qgb25lIG9mIHRvLCBjYyBvciBiY2MnKTtcbiAgICB9XG4gICAgdGhpcy5hZGRQZXJzb25hbGl6YXRpb24obmV3IFBlcnNvbmFsaXphdGlvbih7dG8sIGNjLCBiY2N9KSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHN1YnN0aXR1dGlvbnNcbiAgICovXG4gIHNldFN1YnN0aXR1dGlvbnMoc3Vic3RpdHV0aW9ucykge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdzdWJzdGl0dXRpb25zJywgc3Vic3RpdHV0aW9ucywgJ29iamVjdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzdWJzdGl0dXRpb24gd3JhcHBlcnNcbiAgICovXG4gIHNldFN1YnN0aXR1dGlvbldyYXBwZXJzKHN1YnN0aXR1dGlvbldyYXBwZXJzKSB7XG4gICAgbGV0IGxlbmd0aENoZWNrID0gKHByb3BlcnR5TmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXkgZXhwZWN0ZWQgd2l0aCB0d28gZWxlbWVudHMgZm9yIGAnICsgcHJvcGVydHlOYW1lICsgJ2AnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ3N1YnN0aXR1dGlvbldyYXBwZXJzJywgc3Vic3RpdHV0aW9uV3JhcHBlcnMsIFt0aGlzLl9jaGVja1VuZGVmaW5lZCwgbGVuZ3RoQ2hlY2tdKSkge1xuICAgICAgdGhpcy5zdWJzdGl0dXRpb25XcmFwcGVycyA9IHN1YnN0aXR1dGlvbldyYXBwZXJzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgd2hpY2ggYXBwbGllcyBnbG9iYWxseSBzZXQgc3Vic3RpdHV0aW9ucyB0byBwZXJzb25hbGl6YXRpb25zXG4gICAqL1xuICBhcHBseVN1YnN0aXR1dGlvbnMocGVyc29uYWxpemF0aW9uKSB7XG4gICAgaWYgKHBlcnNvbmFsaXphdGlvbiBpbnN0YW5jZW9mIFBlcnNvbmFsaXphdGlvbikge1xuICAgICAgcGVyc29uYWxpemF0aW9uLnJldmVyc2VNZXJnZVN1YnN0aXR1dGlvbnModGhpcy5zdWJzdGl0dXRpb25zKTtcbiAgICAgIHBlcnNvbmFsaXphdGlvbi5zZXRTdWJzdGl0dXRpb25XcmFwcGVycyh0aGlzLnN1YnN0aXR1dGlvbldyYXBwZXJzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHdoaWNoIGFwcGxpZXMgZ2xvYmFsbHkgc2V0IGR5bmFtaWNfdGVtcGxhdGVfZGF0YSB0byBwZXJzb25hbGl6YXRpb25zXG4gICAqL1xuICBhcHBseUR5bmFtaWNUZW1wbGF0ZURhdGEocGVyc29uYWxpemF0aW9uKSB7XG4gICAgaWYgKHBlcnNvbmFsaXphdGlvbiBpbnN0YW5jZW9mIFBlcnNvbmFsaXphdGlvbikge1xuICAgICAgcGVyc29uYWxpemF0aW9uLmRlZXBNZXJnZUR5bmFtaWNUZW1wbGF0ZURhdGEodGhpcy5keW5hbWljVGVtcGxhdGVEYXRhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGR5bmFtaWNUZW1wbGF0ZURhdGFcbiAgICovXG4gIHNldER5bmFtaWNUZW1wbGF0ZURhdGEoZHluYW1pY1RlbXBsYXRlRGF0YSkge1xuICAgIGlmICh0eXBlb2YgZHluYW1pY1RlbXBsYXRlRGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkeW5hbWljVGVtcGxhdGVEYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgZXhwZWN0ZWQgZm9yIGBkeW5hbWljVGVtcGxhdGVEYXRhYCcpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGR5bmFtaWMgdGVtcGxhdGUgZm9yIG5vbi1lc2NhcGVkIGNoYXJhY3RlcnMgYW5kIHdhcm4gaWYgZm91bmRcbiAgICBpZiAoIXRoaXMuaGlkZVdhcm5pbmdzKSB7XG4gICAgICBPYmplY3QudmFsdWVzKGR5bmFtaWNUZW1wbGF0ZURhdGEpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICBpZiAoL1snXCImXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oRFlOQU1JQ19URU1QTEFURV9DSEFSX1dBUk5JTkcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmR5bmFtaWNUZW1wbGF0ZURhdGEgPSBkeW5hbWljVGVtcGxhdGVEYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBjb250ZW50XG4gICAqL1xuICBzZXRDb250ZW50KGNvbnRlbnQpIHtcbiAgICBpZiAodGhpcy5fZG9BcnJheUNoZWNrKCdjb250ZW50JywgY29udGVudCkpIHtcbiAgICAgIGlmICghY29udGVudC5ldmVyeShjb250ZW50RmllbGQgPT4gdHlwZW9mIGNvbnRlbnRGaWVsZCA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZWFjaCBlbnRyeSBpbiBgY29udGVudGAgdG8gYmUgYW4gb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIWNvbnRlbnQuZXZlcnkoY29udGVudEZpZWxkID0+IHR5cGVvZiBjb250ZW50RmllbGQudHlwZSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZWFjaCBgY29udGVudGAgZW50cnkgdG8gY29udGFpbiBhIGB0eXBlYCBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghY29udGVudC5ldmVyeShjb250ZW50RmllbGQgPT4gdHlwZW9mIGNvbnRlbnRGaWVsZC52YWx1ZSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZWFjaCBgY29udGVudGAgZW50cnkgdG8gY29udGFpbiBhIGB2YWx1ZWAgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgY29udGVudFxuICAgKi9cbiAgYWRkQ29udGVudChjb250ZW50KSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ2NvbnRlbnQnLCBjb250ZW50LCBbdGhpcy5fY3JlYXRlVHlwZUNoZWNrKCdvYmplY3QnKV0pKSB7XG4gICAgICB0aGlzLmNvbnRlbnQucHVzaChjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRleHQgY29udGVudFxuICAgKi9cbiAgYWRkVGV4dENvbnRlbnQodGV4dCkge1xuICAgIGlmICh0aGlzLl9jaGVja1Byb3BlcnR5KCd0ZXh0JywgdGV4dCwgW3RoaXMuX2NoZWNrVW5kZWZpbmVkLCB0aGlzLl9jcmVhdGVUeXBlQ2hlY2soJ3N0cmluZycpXSkpIHtcbiAgICAgIHRoaXMuYWRkQ29udGVudCh7XG4gICAgICAgIHZhbHVlOiB0ZXh0LFxuICAgICAgICB0eXBlOiAndGV4dC9wbGFpbicsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIEhUTUwgY29udGVudFxuICAgKi9cbiAgYWRkSHRtbENvbnRlbnQoaHRtbCkge1xuICAgIGlmICh0aGlzLl9jaGVja1Byb3BlcnR5KCdodG1sJywgaHRtbCwgW3RoaXMuX2NoZWNrVW5kZWZpbmVkLCB0aGlzLl9jcmVhdGVUeXBlQ2hlY2soJ3N0cmluZycpXSkpIHtcbiAgICAgIHRoaXMuYWRkQ29udGVudCh7XG4gICAgICAgIHZhbHVlOiBodG1sLFxuICAgICAgICB0eXBlOiAndGV4dC9odG1sJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYXR0YWNobWVudHNcbiAgICovXG4gIHNldEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzKSB7XG4gICAgaWYgKHRoaXMuX2RvQXJyYXlDaGVjaygnYXR0YWNobWVudHMnLCBhdHRhY2htZW50cykpIHtcbiAgICAgIGlmICghYXR0YWNobWVudHMuZXZlcnkoYXR0YWNobWVudCA9PiB0eXBlb2YgYXR0YWNobWVudC5jb250ZW50ID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlYWNoIGF0dGFjaG1lbnQgdG8gY29udGFpbiBhIGBjb250ZW50YCBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXR0YWNobWVudHMuZXZlcnkoYXR0YWNobWVudCA9PiB0eXBlb2YgYXR0YWNobWVudC5maWxlbmFtZSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZWFjaCBhdHRhY2htZW50IHRvIGNvbnRhaW4gYSBgZmlsZW5hbWVgIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRhY2htZW50cy5ldmVyeShhdHRhY2htZW50ID0+ICFhdHRhY2htZW50LnR5cGUgfHwgdHlwZW9mIGF0dGFjaG1lbnQudHlwZSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGF0dGFjaG1lbnRcXCdzIGB0eXBlYCBmaWVsZCB0byBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgaWYgKCFhdHRhY2htZW50cy5ldmVyeShhdHRhY2htZW50ID0+ICFhdHRhY2htZW50LmRpc3Bvc2l0aW9uIHx8IHR5cGVvZiBhdHRhY2htZW50LmRpc3Bvc2l0aW9uID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgYXR0YWNobWVudFxcJ3MgYGRpc3Bvc2l0aW9uYCBmaWVsZCB0byBiZSBhIHN0cmluZycpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdHRhY2htZW50cyA9IGF0dGFjaG1lbnRzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYXR0YWNobWVudFxuICAgKi9cbiAgYWRkQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ2F0dGFjaG1lbnQnLCBhdHRhY2htZW50LCBbdGhpcy5fY2hlY2tVbmRlZmluZWQsIHRoaXMuX2NyZWF0ZVR5cGVDaGVjaygnb2JqZWN0JyldKSkge1xuICAgICAgdGhpcy5hdHRhY2htZW50cy5wdXNoKGF0dGFjaG1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY2F0ZWdvcmllc1xuICAgKi9cbiAgc2V0Q2F0ZWdvcmllcyhjYXRlZ29yaWVzKSB7XG4gICAgbGV0IGFsbEVsZW1lbnRzQXJlU3RyaW5ncyA9IChwcm9wZXJ0eU5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpIHx8ICF2YWx1ZS5ldmVyeShpdGVtID0+IHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBvZiBzdHJpbmdzIGV4cGVjdGVkIGZvciBgJyArIHByb3BlcnR5TmFtZSArICdgJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgY2F0ZWdvcmllcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNhdGVnb3JpZXMgPSBbY2F0ZWdvcmllc107XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ2NhdGVnb3JpZXMnLCBjYXRlZ29yaWVzLCBbdGhpcy5fY2hlY2tVbmRlZmluZWQsIGFsbEVsZW1lbnRzQXJlU3RyaW5nc10pKSB7XG4gICAgICB0aGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgY2F0ZWdvcnlcbiAgICovXG4gIGFkZENhdGVnb3J5KGNhdGVnb3J5KSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrUHJvcGVydHkoJ2NhdGVnb3J5JywgY2F0ZWdvcnksIFt0aGlzLl9jcmVhdGVUeXBlQ2hlY2soJ3N0cmluZycpXSkpIHtcbiAgICAgIHRoaXMuY2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGhlYWRlcnNcbiAgICovXG4gIHNldEhlYWRlcnMoaGVhZGVycykge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdoZWFkZXJzJywgaGVhZGVycywgJ29iamVjdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGhlYWRlclxuICAgKi9cbiAgYWRkSGVhZGVyKGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5fY2hlY2tQcm9wZXJ0eSgna2V5Jywga2V5LCBbdGhpcy5fY3JlYXRlVHlwZUNoZWNrKCdzdHJpbmcnKV0pXG4gICAgICAmJiB0aGlzLl9jaGVja1Byb3BlcnR5KCd2YWx1ZScsIHZhbHVlLCBbdGhpcy5fY3JlYXRlVHlwZUNoZWNrKCdzdHJpbmcnKV0pKSB7XG4gICAgICB0aGlzLmhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgc2VjdGlvbnNcbiAgICovXG4gIHNldFNlY3Rpb25zKHNlY3Rpb25zKSB7XG4gICAgdGhpcy5fc2V0UHJvcGVydHkoJ3NlY3Rpb25zJywgc2VjdGlvbnMsICdvYmplY3QnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY3VzdG9tIGFyZ3NcbiAgICovXG4gIHNldEN1c3RvbUFyZ3MoY3VzdG9tQXJncykge1xuICAgIHRoaXMuX3NldFByb3BlcnR5KCdjdXN0b21BcmdzJywgY3VzdG9tQXJncywgJ29iamVjdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0cmFja2luZyBzZXR0aW5nc1xuICAgKi9cbiAgc2V0VHJhY2tpbmdTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhbGlkYXRlVHJhY2tpbmdTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgdGhpcy50cmFja2luZ1NldHRpbmdzID0gc2V0dGluZ3M7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG1haWwgc2V0dGluZ3NcbiAgICovXG4gIHNldE1haWxTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhbGlkYXRlTWFpbFNldHRpbmdzKHNldHRpbmdzKTtcbiAgICB0aGlzLm1haWxTZXR0aW5ncyA9IHNldHRpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBoaWRlIHdhcm5pbmdzXG4gICAqL1xuICBzZXRIaWRlV2FybmluZ3MoaGlkZSkge1xuICAgIGlmICh0eXBlb2YgaGlkZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoaWRlICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQm9vbGVhbiBleHBlY3RlZCBmb3IgYGhpZGVXYXJuaW5nc2AnKTtcbiAgICB9XG4gICAgdGhpcy5oaWRlV2FybmluZ3MgPSBoaWRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIEpTT05cbiAgICovXG4gIHRvSlNPTigpIHtcblxuICAgIC8vRXh0cmFjdCBwcm9wZXJ0aWVzIGZyb20gc2VsZlxuICAgIGNvbnN0IHtcbiAgICAgIGZyb20sIHJlcGx5VG8sIHNlbmRBdCwgc3ViamVjdCwgY29udGVudCwgdGVtcGxhdGVJZCxcbiAgICAgIHBlcnNvbmFsaXphdGlvbnMsIGF0dGFjaG1lbnRzLCBpcFBvb2xOYW1lLCBiYXRjaElkLCBhc20sXG4gICAgICBzZWN0aW9ucywgaGVhZGVycywgY2F0ZWdvcmllcywgY3VzdG9tQXJncywgbWFpbFNldHRpbmdzLFxuICAgICAgdHJhY2tpbmdTZXR0aW5ncywgcmVwbHlUb0xpc3QsXG4gICAgfSA9IHRoaXM7XG5cbiAgICAvL0luaXRpYWxpemUgd2l0aCBtYW5kYXRvcnkgdmFsdWVzXG4gICAgY29uc3QganNvbiA9IHtcbiAgICAgIGZyb20sIHN1YmplY3QsXG4gICAgICBwZXJzb25hbGl6YXRpb25zOiBhcnJheVRvSlNPTihwZXJzb25hbGl6YXRpb25zKSxcbiAgICB9O1xuXG4gICAgLy9BcnJheSBwcm9wZXJ0aWVzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0YWNobWVudHMpICYmIGF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGpzb24uYXR0YWNobWVudHMgPSBhcnJheVRvSlNPTihhdHRhY2htZW50cyk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNhdGVnb3JpZXMpICYmIGNhdGVnb3JpZXMubGVuZ3RoID4gMCkge1xuICAgICAganNvbi5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5maWx0ZXIoY2F0ID0+IGNhdCAhPT0gJycpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250ZW50KSAmJiBjb250ZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgIGpzb24uY29udGVudCA9IGFycmF5VG9KU09OKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIC8vT2JqZWN0IHByb3BlcnRpZXNcbiAgICBpZiAoT2JqZWN0LmtleXMoaGVhZGVycykubGVuZ3RoID4gMCkge1xuICAgICAganNvbi5oZWFkZXJzID0gaGVhZGVycztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKG1haWxTZXR0aW5ncykubGVuZ3RoID4gMCkge1xuICAgICAganNvbi5tYWlsU2V0dGluZ3MgPSBtYWlsU2V0dGluZ3M7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyh0cmFja2luZ1NldHRpbmdzKS5sZW5ndGggPiAwKSB7XG4gICAgICBqc29uLnRyYWNraW5nU2V0dGluZ3MgPSB0cmFja2luZ1NldHRpbmdzO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMoY3VzdG9tQXJncykubGVuZ3RoID4gMCkge1xuICAgICAganNvbi5jdXN0b21BcmdzID0gY3VzdG9tQXJncztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHNlY3Rpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICBqc29uLnNlY3Rpb25zID0gc2VjdGlvbnM7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyhhc20pLmxlbmd0aCA+IDApIHtcbiAgICAgIGpzb24uYXNtID0gYXNtO1xuICAgIH1cblxuICAgIC8vU2ltcGxlIHByb3BlcnRpZXNcbiAgICBpZiAodHlwZW9mIHJlcGx5VG8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqc29uLnJlcGx5VG8gPSByZXBseVRvO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlbmRBdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGpzb24uc2VuZEF0ID0gc2VuZEF0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJhdGNoSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqc29uLmJhdGNoSWQgPSBiYXRjaElkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqc29uLnRlbXBsYXRlSWQgPSB0ZW1wbGF0ZUlkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlwUG9vbE5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqc29uLmlwUG9vbE5hbWUgPSBpcFBvb2xOYW1lO1xuICAgIH1cbiAgICBpZih0eXBlb2YgcmVwbHlUb0xpc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqc29uLnJlcGx5VG9MaXN0ID0gcmVwbHlUb0xpc3Q7XG4gICAgfVxuXG4gICAgLy9SZXR1cm4gYXMgc25ha2UgY2FzZWQgb2JqZWN0XG4gICAgcmV0dXJuIHRvU25ha2VDYXNlKGpzb24sIFsnc3Vic3RpdHV0aW9ucycsICdkeW5hbWljVGVtcGxhdGVEYXRhJywgJ2N1c3RvbUFyZ3MnLCAnaGVhZGVycycsICdzZWN0aW9ucyddKTtcbiAgfVxuXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgKiBTdGF0aWMgaGVscGVyc1xuICAgKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBNYWlsIGluc3RhbmNlIGZyb20gZ2l2ZW4gZGF0YVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShkYXRhKSB7XG5cbiAgICAvL0FycmF5P1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKVxuICAgICAgICAubWFwKGl0ZW0gPT4gdGhpcy5jcmVhdGUoaXRlbSkpO1xuICAgIH1cblxuICAgIC8vQWxyZWFkeSBpbnN0YW5jZSBvZiBNYWlsIGNsYXNzP1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTWFpbCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLy9DcmVhdGUgaW5zdGFuY2VcbiAgICByZXR1cm4gbmV3IE1haWwoZGF0YSk7XG4gIH1cblxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogaGVscGVycyBmb3IgcHJvcGVydHktc2V0dGluZyBjaGVja3NcbiAgICoqKi9cblxuICAvKipcbiAgICogUGVyZm9ybSBhIHNldCBvZiBjaGVja3Mgb24gdGhlIG5ldyBwcm9wZXJ0eSB2YWx1ZS4gUmV0dXJucyB0cnVlIGlmIGFsbFxuICAgKiBjaGVja3MgY29tcGxldGUgc3VjY2Vzc2Z1bGx5IHdpdGhvdXQgdGhyb3dpbmcgZXJyb3JzIG9yIHJldHVybmluZyB0cnVlLlxuICAgKi9cbiAgX2NoZWNrUHJvcGVydHkocHJvcGVydHlOYW1lLCB2YWx1ZSwgY2hlY2tzKSB7XG4gICAgcmV0dXJuICFjaGVja3Muc29tZSgoZSkgPT4gZShwcm9wZXJ0eU5hbWUsIHZhbHVlKSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgcHJvcGVydHkgd2l0aCBub3JtYWwgdW5kZWZpbmVkIGFuZCB0eXBlLWNoZWNrc1xuICAgKi9cbiAgX3NldFByb3BlcnR5KHByb3BlcnR5TmFtZSwgdmFsdWUsIHByb3BlcnR5VHlwZSkge1xuICAgIGxldCBwcm9wZXJ0eUNoZWNrc1Bhc3NlZCA9IHRoaXMuX2NoZWNrUHJvcGVydHkoXG4gICAgICBwcm9wZXJ0eU5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIFt0aGlzLl9jaGVja1VuZGVmaW5lZCwgdGhpcy5fY3JlYXRlVHlwZUNoZWNrKHByb3BlcnR5VHlwZSldKTtcblxuICAgIGlmIChwcm9wZXJ0eUNoZWNrc1Bhc3NlZCkge1xuICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5Q2hlY2tzUGFzc2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZhaWwgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAgICovXG4gIF9jaGVja1VuZGVmaW5lZChwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBmb3IgYSBnaXZlbiB0eXBlXG4gICAqL1xuICBfY3JlYXRlVHlwZUNoZWNrKHByb3BlcnR5VHlwZSkge1xuICAgIHJldHVybiAocHJvcGVydHlOYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gcHJvcGVydHlUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9wZXJ0eVR5cGUgKyAnIGV4cGVjdGVkIGZvciBgJyArIHByb3BlcnR5TmFtZSArICdgJyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjaGVjayBvdXQgb2YgYSBjYWxsYmFjay4gSWYgdGhlIGNhbGxiYWNrXG4gICAqIHJldHVybnMgZmFsc2UsIHRoZSBjaGVjayB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKi9cbiAgX2NyZWF0ZUNoZWNrVGhhdFRocm93cyhjaGVjaywgZXJyb3JTdHJpbmcpIHtcbiAgICByZXR1cm4gKHByb3BlcnR5TmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGlmICghY2hlY2sodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclN0cmluZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYW4gYXJyYXkgcHJvcGVydHkgYWZ0ZXIgY2hlY2tpbmcgdGhhdCB0aGUgbmV3IHZhbHVlIGlzIGFuXG4gICAqIGFycmF5LlxuICAgKi9cbiAgX3NldEFycmF5UHJvcGVydHkocHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9kb0FycmF5Q2hlY2socHJvcGVydHlOYW1lLCB2YWx1ZSkpIHtcbiAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGF0IGEgdmFsdWUgaXNuJ3QgdW5kZWZpbmVkIGFuZCBpcyBhbiBhcnJheS5cbiAgICovXG4gIF9kb0FycmF5Q2hlY2socHJvcGVydHlOYW1lLCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9jaGVja1Byb3BlcnR5KFxuICAgICAgcHJvcGVydHlOYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBbdGhpcy5fY2hlY2tVbmRlZmluZWQsIHRoaXMuX2NyZWF0ZUNoZWNrVGhhdFRocm93cyhBcnJheS5pc0FycmF5LCAnQXJyYXkgZXhwZWN0ZWQgZm9yYCcgKyBwcm9wZXJ0eU5hbWUgKyAnYCcpXSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSByZXBseVRvTGlzdCBmcm9tIGVtYWlsIGJvZHlcbiAgICovXG4gICBzZXRSZXBseVRvTGlzdChyZXBseVRvTGlzdCkge1xuICAgIGlmICh0aGlzLl9kb0FycmF5Q2hlY2soJ3JlcGx5VG9MaXN0JywgcmVwbHlUb0xpc3QpICYmIHJlcGx5VG9MaXN0Lmxlbmd0aCkge1xuICAgICAgaWYgKCFyZXBseVRvTGlzdC5ldmVyeShyZXBseVRvID0+IHJlcGx5VG8gJiYgdHlwZW9mIHJlcGx5VG8uZW1haWwgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVhY2ggcmVwbHlUbyB0byBjb250YWluIGFuIGBlbWFpbGAgc3RyaW5nJyk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcGx5VG9MaXN0ID0gcmVwbHlUb0xpc3Q7XG4gICAgfVxuICB9XG59XG5cbi8vRXhwb3J0IGNsYXNzXG5tb2R1bGUuZXhwb3J0cyA9IE1haWw7XG4iXSwibmFtZXMiOlsiRW1haWxBZGRyZXNzIiwicmVxdWlyZSIsIlBlcnNvbmFsaXphdGlvbiIsInRvQ2FtZWxDYXNlIiwidG9TbmFrZUNhc2UiLCJkZWVwQ2xvbmUiLCJhcnJheVRvSlNPTiIsIkRZTkFNSUNfVEVNUExBVEVfQ0hBUl9XQVJOSU5HIiwidmFsaWRhdGVNYWlsU2V0dGluZ3MiLCJ2YWxpZGF0ZVRyYWNraW5nU2V0dGluZ3MiLCJNYWlsIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiaXNEeW5hbWljIiwiaGlkZVdhcm5pbmdzIiwicGVyc29uYWxpemF0aW9ucyIsImF0dGFjaG1lbnRzIiwiY29udGVudCIsImNhdGVnb3JpZXMiLCJoZWFkZXJzIiwic2VjdGlvbnMiLCJjdXN0b21BcmdzIiwidHJhY2tpbmdTZXR0aW5ncyIsIm1haWxTZXR0aW5ncyIsImFzbSIsInN1YnN0aXR1dGlvbnMiLCJzdWJzdGl0dXRpb25XcmFwcGVycyIsImR5bmFtaWNUZW1wbGF0ZURhdGEiLCJmcm9tRGF0YSIsIkVycm9yIiwidG8iLCJmcm9tIiwicmVwbHlUbyIsImNjIiwiYmNjIiwic2VuZEF0Iiwic3ViamVjdCIsInRleHQiLCJodG1sIiwidGVtcGxhdGVJZCIsImlwUG9vbE5hbWUiLCJiYXRjaElkIiwiY2F0ZWdvcnkiLCJpc011bHRpcGxlIiwicmVwbHlUb0xpc3QiLCJzZXRGcm9tIiwic2V0UmVwbHlUbyIsInNldFN1YmplY3QiLCJzZXRTZW5kQXQiLCJzZXRUZW1wbGF0ZUlkIiwic2V0QmF0Y2hJZCIsInNldElwUG9vbE5hbWUiLCJzZXRBdHRhY2htZW50cyIsInNldENvbnRlbnQiLCJzZXRTZWN0aW9ucyIsInNldEhlYWRlcnMiLCJzZXRDYXRlZ29yaWVzIiwic2V0Q3VzdG9tQXJncyIsInNldEFzbSIsInNldE1haWxTZXR0aW5ncyIsInNldFRyYWNraW5nU2V0dGluZ3MiLCJzZXRIaWRlV2FybmluZ3MiLCJzZXRSZXBseVRvTGlzdCIsInNldER5bmFtaWNUZW1wbGF0ZURhdGEiLCJzZXRTdWJzdGl0dXRpb25zIiwic2V0U3Vic3RpdHV0aW9uV3JhcHBlcnMiLCJhZGRUZXh0Q29udGVudCIsImFkZEh0bWxDb250ZW50Iiwic2V0UGVyc29uYWxpemF0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJhZGRUbyIsIl9jaGVja1Byb3BlcnR5IiwiX2NoZWNrVW5kZWZpbmVkIiwiZW1haWwiLCJjcmVhdGUiLCJfc2V0UHJvcGVydHkiLCJfY3JlYXRlQ2hlY2tUaGF0VGhyb3dzIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaW5kZXhPZiIsIl9jcmVhdGVUeXBlQ2hlY2siLCJncm91cElkIiwiZ3JvdXBzVG9EaXNwbGF5IiwiZXZlcnkiLCJncm91cCIsIl9kb0FycmF5Q2hlY2siLCJwZXJzb25hbGl6YXRpb24iLCJhZGRQZXJzb25hbGl6YXRpb24iLCJhcHBseUR5bmFtaWNUZW1wbGF0ZURhdGEiLCJhcHBseVN1YnN0aXR1dGlvbnMiLCJwdXNoIiwibGVuZ3RoQ2hlY2siLCJwcm9wZXJ0eU5hbWUiLCJ2YWx1ZSIsImxlbmd0aCIsInJldmVyc2VNZXJnZVN1YnN0aXR1dGlvbnMiLCJkZWVwTWVyZ2VEeW5hbWljVGVtcGxhdGVEYXRhIiwiT2JqZWN0IiwidmFsdWVzIiwidGVzdCIsImNvbnNvbGUiLCJ3YXJuIiwiY29udGVudEZpZWxkIiwidHlwZSIsImFkZENvbnRlbnQiLCJhdHRhY2htZW50IiwiZmlsZW5hbWUiLCJkaXNwb3NpdGlvbiIsImFkZEF0dGFjaG1lbnQiLCJhbGxFbGVtZW50c0FyZVN0cmluZ3MiLCJpdGVtIiwiYWRkQ2F0ZWdvcnkiLCJhZGRIZWFkZXIiLCJrZXkiLCJzZXR0aW5ncyIsImhpZGUiLCJ0b0pTT04iLCJqc29uIiwiZmlsdGVyIiwiY2F0Iiwia2V5cyIsIm1hcCIsImNoZWNrcyIsInNvbWUiLCJlIiwicHJvcGVydHlUeXBlIiwicHJvcGVydHlDaGVja3NQYXNzZWQiLCJjaGVjayIsImVycm9yU3RyaW5nIiwiX3NldEFycmF5UHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/mail.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/personalization.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/personalization.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const EmailAddress = __webpack_require__(/*! ./email-address */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/email-address.js\");\nconst toCamelCase = __webpack_require__(/*! ../helpers/to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\");\nconst toSnakeCase = __webpack_require__(/*! ../helpers/to-snake-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js\");\nconst deepClone = __webpack_require__(/*! ../helpers/deep-clone */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\");\nconst deepMerge = __webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/deepmerge/dist/cjs.js\");\nconst wrapSubstitutions = __webpack_require__(/*! ../helpers/wrap-substitutions */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/wrap-substitutions.js\");\n/**\n * Personalization class\n */ class Personalization {\n    /**\n   * Constructor\n   */ constructor(data){\n        //Init array and object placeholders\n        this.to = [];\n        this.cc = [];\n        this.bcc = [];\n        this.headers = {};\n        this.customArgs = {};\n        this.substitutions = {};\n        this.substitutionWrappers = [\n            \"{{\",\n            \"}}\"\n        ];\n        this.dynamicTemplateData = {};\n        //Build from data if given\n        if (data) {\n            this.fromData(data);\n        }\n    }\n    /**\n   * From data\n   */ fromData(data) {\n        //Expecting object\n        if (typeof data !== \"object\") {\n            throw new Error(\"Expecting object for Mail data\");\n        }\n        //Convert to camel case to make it workable, making a copy to prevent\n        //changes to the original objects\n        data = deepClone(data);\n        data = toCamelCase(data, [\n            \"substitutions\",\n            \"dynamicTemplateData\",\n            \"customArgs\",\n            \"headers\"\n        ]);\n        //Extract properties from data\n        const { to, from, cc, bcc, subject, headers, customArgs, sendAt, substitutions, substitutionWrappers, dynamicTemplateData } = data;\n        //Set data\n        this.setTo(to);\n        this.setFrom(from);\n        this.setCc(cc);\n        this.setBcc(bcc);\n        this.setSubject(subject);\n        this.setHeaders(headers);\n        this.setSubstitutions(substitutions);\n        this.setSubstitutionWrappers(substitutionWrappers);\n        this.setCustomArgs(customArgs);\n        this.setDynamicTemplateData(dynamicTemplateData);\n        this.setSendAt(sendAt);\n    }\n    /**\n   * Set subject\n   */ setSubject(subject) {\n        if (typeof subject === \"undefined\") {\n            return;\n        }\n        if (typeof subject !== \"string\") {\n            throw new Error(\"String expected for `subject`\");\n        }\n        this.subject = subject;\n    }\n    /**\n   * Set send at\n   */ setSendAt(sendAt) {\n        if (typeof sendAt === \"undefined\") {\n            return;\n        }\n        if (!Number.isInteger(sendAt)) {\n            throw new Error(\"Integer expected for `sendAt`\");\n        }\n        this.sendAt = sendAt;\n    }\n    /**\n   * Set to\n   */ setTo(to) {\n        if (typeof to === \"undefined\") {\n            return;\n        }\n        if (!Array.isArray(to)) {\n            to = [\n                to\n            ];\n        }\n        this.to = EmailAddress.create(to);\n    }\n    /**\n   * Set from\n   * */ setFrom(from) {\n        if (typeof from === \"undefined\") {\n            return;\n        }\n        this.from = EmailAddress.create(from);\n    }\n    /**\n   * Add a single to\n   */ addTo(to) {\n        if (typeof to === \"undefined\") {\n            return;\n        }\n        this.to.push(EmailAddress.create(to));\n    }\n    /**\n   * Set cc\n   */ setCc(cc) {\n        if (typeof cc === \"undefined\") {\n            return;\n        }\n        if (!Array.isArray(cc)) {\n            cc = [\n                cc\n            ];\n        }\n        this.cc = EmailAddress.create(cc);\n    }\n    /**\n   * Add a single cc\n   */ addCc(cc) {\n        if (typeof cc === \"undefined\") {\n            return;\n        }\n        this.cc.push(EmailAddress.create(cc));\n    }\n    /**\n   * Set bcc\n   */ setBcc(bcc) {\n        if (typeof bcc === \"undefined\") {\n            return;\n        }\n        if (!Array.isArray(bcc)) {\n            bcc = [\n                bcc\n            ];\n        }\n        this.bcc = EmailAddress.create(bcc);\n    }\n    /**\n   * Add a single bcc\n   */ addBcc(bcc) {\n        if (typeof bcc === \"undefined\") {\n            return;\n        }\n        this.bcc.push(EmailAddress.create(bcc));\n    }\n    /**\n   * Set headers\n   */ setHeaders(headers) {\n        if (typeof headers === \"undefined\") {\n            return;\n        }\n        if (typeof headers !== \"object\" || headers === null) {\n            throw new Error(\"Object expected for `headers`\");\n        }\n        this.headers = headers;\n    }\n    /**\n   * Add a header\n   */ addHeader(key, value) {\n        if (typeof key !== \"string\") {\n            throw new Error(\"String expected for header key\");\n        }\n        if (typeof value !== \"string\") {\n            throw new Error(\"String expected for header value\");\n        }\n        this.headers[key] = value;\n    }\n    /**\n   * Set custom args\n   */ setCustomArgs(customArgs) {\n        if (typeof customArgs === \"undefined\") {\n            return;\n        }\n        if (typeof customArgs !== \"object\" || customArgs === null) {\n            throw new Error(\"Object expected for `customArgs`\");\n        }\n        this.customArgs = customArgs;\n    }\n    /**\n   * Add a custom arg\n   */ addCustomArg(key, value) {\n        if (typeof key !== \"string\") {\n            throw new Error(\"String expected for custom arg key\");\n        }\n        if (typeof value !== \"string\") {\n            throw new Error(\"String expected for custom arg value\");\n        }\n        this.customArgs[key] = value;\n    }\n    /**\n   * Set substitutions\n   */ setSubstitutions(substitutions) {\n        if (typeof substitutions === \"undefined\") {\n            return;\n        }\n        if (typeof substitutions !== \"object\") {\n            throw new Error(\"Object expected for `substitutions`\");\n        }\n        this.substitutions = substitutions;\n    }\n    /**\n   * Add a substitution\n   */ addSubstitution(key, value) {\n        if (typeof key !== \"string\") {\n            throw new Error(\"String expected for substitution key\");\n        }\n        if (typeof value !== \"string\" && typeof value !== \"number\") {\n            throw new Error(\"String or Number expected for substitution value\");\n        }\n        this.substitutions[key] = value;\n    }\n    /**\n   * Reverse merge substitutions, preserving existing ones\n   */ reverseMergeSubstitutions(substitutions) {\n        if (typeof substitutions === \"undefined\" || substitutions === null) {\n            return;\n        }\n        if (typeof substitutions !== \"object\") {\n            throw new Error(\"Object expected for `substitutions` in reverseMergeSubstitutions\");\n        }\n        this.substitutions = Object.assign({}, substitutions, this.substitutions);\n    }\n    /**\n   * Set substitution wrappers\n   */ setSubstitutionWrappers(wrappers) {\n        if (typeof wrappers === \"undefined\" || wrappers === null) {\n            return;\n        }\n        if (!Array.isArray(wrappers) || wrappers.length !== 2) {\n            throw new Error(\"Array expected with two elements for `substitutionWrappers`\");\n        }\n        this.substitutionWrappers = wrappers;\n    }\n    /**\n   * Reverse merge dynamic template data, preserving existing ones\n   */ deepMergeDynamicTemplateData(dynamicTemplateData) {\n        if (typeof dynamicTemplateData === \"undefined\" || dynamicTemplateData === null) {\n            return;\n        }\n        if (typeof dynamicTemplateData !== \"object\") {\n            throw new Error(\"Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData\");\n        }\n        this.dynamicTemplateData = deepMerge(dynamicTemplateData, this.dynamicTemplateData);\n    }\n    /**\n   * Set dynamic template data\n   */ setDynamicTemplateData(dynamicTemplateData) {\n        if (typeof dynamicTemplateData === \"undefined\") {\n            return;\n        }\n        if (typeof dynamicTemplateData !== \"object\") {\n            throw new Error(\"Object expected for `dynamicTemplateData`\");\n        }\n        this.dynamicTemplateData = dynamicTemplateData;\n    }\n    /**\n   * To JSON\n   */ toJSON() {\n        //Get data from self\n        const { to, from, cc, bcc, subject, headers, customArgs, sendAt, substitutions, substitutionWrappers, dynamicTemplateData } = this;\n        //Initialize with mandatory values\n        const json = {\n            to\n        };\n        //Arrays\n        if (Array.isArray(cc) && cc.length > 0) {\n            json.cc = cc;\n        }\n        if (Array.isArray(bcc) && bcc.length > 0) {\n            json.bcc = bcc;\n        }\n        //Objects\n        if (Object.keys(headers).length > 0) {\n            json.headers = headers;\n        }\n        if (substitutions && Object.keys(substitutions).length > 0) {\n            const [left, right] = substitutionWrappers;\n            json.substitutions = wrapSubstitutions(substitutions, left, right);\n        }\n        if (Object.keys(customArgs).length > 0) {\n            json.customArgs = customArgs;\n        }\n        if (dynamicTemplateData && Object.keys(dynamicTemplateData).length > 0) {\n            json.dynamicTemplateData = dynamicTemplateData;\n        }\n        //Simple properties\n        if (typeof subject !== \"undefined\") {\n            json.subject = subject;\n        }\n        if (typeof sendAt !== \"undefined\") {\n            json.sendAt = sendAt;\n        }\n        if (typeof from !== \"undefined\") {\n            json.from = from;\n        }\n        //Return as snake cased object\n        return toSnakeCase(json, [\n            \"substitutions\",\n            \"dynamicTemplateData\",\n            \"customArgs\",\n            \"headers\"\n        ]);\n    }\n}\n//Export class\nmodule.exports = Personalization;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/personalization.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/response-error.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/response-error.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Response error class\n */ class ResponseError extends Error {\n    /**\n   * Constructor\n   */ constructor(response){\n        //Super\n        super();\n        //Extract data from response\n        const { headers, status, statusText, data } = response;\n        //Set data\n        this.code = status;\n        this.message = statusText;\n        this.response = {\n            headers,\n            body: data\n        };\n        //Capture stack trace\n        if (!this.stack) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        //Clean up stack trace\n        const regex = new RegExp(process.cwd() + \"/\", \"gi\");\n        this.stack = this.stack.replace(regex, \"\");\n    }\n    /**\n   * Convert to string\n   */ toString() {\n        const { body } = this.response;\n        let err = `${this.message} (${this.code})`;\n        if (body && Array.isArray(body.errors)) {\n            body.errors.forEach((error)=>{\n                const message = error.message;\n                const field = error.field;\n                const help = error.help;\n                err += `\\n  ${message}\\n    ${field}\\n    ${help}`;\n            });\n        }\n        return err;\n    }\n    /**\n   * Convert to simple object for JSON responses\n   */ toJSON() {\n        const { message, code, response } = this;\n        return {\n            message,\n            code,\n            response\n        };\n    }\n}\n//Export\nmodule.exports = ResponseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9yZXNwb25zZS1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOztDQUVDLEdBQ0QsTUFBTUEsc0JBQXNCQztJQUUxQjs7R0FFQyxHQUNEQyxZQUFZQyxRQUFRLENBQUU7UUFFcEIsT0FBTztRQUNQLEtBQUs7UUFFTCw0QkFBNEI7UUFDNUIsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxJQUFJLEVBQUUsR0FBR0o7UUFFOUMsVUFBVTtRQUNWLElBQUksQ0FBQ0ssSUFBSSxHQUFHSDtRQUNaLElBQUksQ0FBQ0ksT0FBTyxHQUFHSDtRQUNmLElBQUksQ0FBQ0gsUUFBUSxHQUFHO1lBQUVDO1lBQVNNLE1BQU1IO1FBQUs7UUFFdEMscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUNJLEtBQUssRUFBRTtZQUNmVixNQUFNVyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDVixXQUFXO1FBQ2hEO1FBRUEsc0JBQXNCO1FBQ3RCLE1BQU1XLFFBQVEsSUFBSUMsT0FBT0MsUUFBUUMsR0FBRyxLQUFLLEtBQUs7UUFDOUMsSUFBSSxDQUFDTCxLQUFLLEdBQUcsSUFBSSxDQUFDQSxLQUFLLENBQUNNLE9BQU8sQ0FBQ0osT0FBTztJQUN6QztJQUVBOztHQUVDLEdBQ0RLLFdBQVc7UUFDVCxNQUFNLEVBQUVSLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQ1AsUUFBUTtRQUM5QixJQUFJZ0IsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDVixPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMxQyxJQUFJRSxRQUFRVSxNQUFNQyxPQUFPLENBQUNYLEtBQUtZLE1BQU0sR0FBRztZQUN0Q1osS0FBS1ksTUFBTSxDQUFDQyxPQUFPLENBQUNDLENBQUFBO2dCQUNsQixNQUFNZixVQUFVZSxNQUFNZixPQUFPO2dCQUM3QixNQUFNZ0IsUUFBUUQsTUFBTUMsS0FBSztnQkFDekIsTUFBTUMsT0FBT0YsTUFBTUUsSUFBSTtnQkFDdkJQLE9BQU8sQ0FBQyxJQUFJLEVBQUVWLFFBQVEsTUFBTSxFQUFFZ0IsTUFBTSxNQUFNLEVBQUVDLEtBQUssQ0FBQztZQUNwRDtRQUNGO1FBQ0EsT0FBT1A7SUFDVDtJQUVBOztHQUVDLEdBQ0RRLFNBQVM7UUFDUCxNQUFNLEVBQUVsQixPQUFPLEVBQUVELElBQUksRUFBRUwsUUFBUSxFQUFFLEdBQUcsSUFBSTtRQUN4QyxPQUFPO1lBQUVNO1lBQVNEO1lBQU1MO1FBQVM7SUFDbkM7QUFDRjtBQUVBLFFBQVE7QUFDUnlCLE9BQU9DLE9BQU8sR0FBRzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2NsYXNzZXMvcmVzcG9uc2UtZXJyb3IuanM/YjQzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVzcG9uc2UgZXJyb3IgY2xhc3NcbiAqL1xuY2xhc3MgUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlc3BvbnNlKSB7XG5cbiAgICAvL1N1cGVyXG4gICAgc3VwZXIoKTtcblxuICAgIC8vRXh0cmFjdCBkYXRhIGZyb20gcmVzcG9uc2VcbiAgICBjb25zdCB7IGhlYWRlcnMsIHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSB9ID0gcmVzcG9uc2U7XG5cbiAgICAvL1NldCBkYXRhXG4gICAgdGhpcy5jb2RlID0gc3RhdHVzO1xuICAgIHRoaXMubWVzc2FnZSA9IHN0YXR1c1RleHQ7XG4gICAgdGhpcy5yZXNwb25zZSA9IHsgaGVhZGVycywgYm9keTogZGF0YSB9O1xuXG4gICAgLy9DYXB0dXJlIHN0YWNrIHRyYWNlXG4gICAgaWYgKCF0aGlzLnN0YWNrKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICAvL0NsZWFuIHVwIHN0YWNrIHRyYWNlXG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHByb2Nlc3MuY3dkKCkgKyAnLycsICdnaScpO1xuICAgIHRoaXMuc3RhY2sgPSB0aGlzLnN0YWNrLnJlcGxhY2UocmVnZXgsICcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRvIHN0cmluZ1xuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgeyBib2R5IH0gPSB0aGlzLnJlc3BvbnNlO1xuICAgIGxldCBlcnIgPSBgJHt0aGlzLm1lc3NhZ2V9ICgke3RoaXMuY29kZX0pYDtcbiAgICBpZiAoYm9keSAmJiBBcnJheS5pc0FycmF5KGJvZHkuZXJyb3JzKSkge1xuICAgICAgYm9keS5lcnJvcnMuZm9yRWFjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICBjb25zdCBmaWVsZCA9IGVycm9yLmZpZWxkO1xuICAgICAgICBjb25zdCBoZWxwID0gZXJyb3IuaGVscDtcbiAgICAgICAgZXJyICs9IGBcXG4gICR7bWVzc2FnZX1cXG4gICAgJHtmaWVsZH1cXG4gICAgJHtoZWxwfWA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRvIHNpbXBsZSBvYmplY3QgZm9yIEpTT04gcmVzcG9uc2VzXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgY29uc3QgeyBtZXNzYWdlLCBjb2RlLCByZXNwb25zZSB9ID0gdGhpcztcbiAgICByZXR1cm4geyBtZXNzYWdlLCBjb2RlLCByZXNwb25zZSB9O1xuICB9XG59XG5cbi8vRXhwb3J0XG5tb2R1bGUuZXhwb3J0cyA9IFJlc3BvbnNlRXJyb3I7XG4iXSwibmFtZXMiOlsiUmVzcG9uc2VFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJyZXNwb25zZSIsImhlYWRlcnMiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImNvZGUiLCJtZXNzYWdlIiwiYm9keSIsInN0YWNrIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJyZWdleCIsIlJlZ0V4cCIsInByb2Nlc3MiLCJjd2QiLCJyZXBsYWNlIiwidG9TdHJpbmciLCJlcnIiLCJBcnJheSIsImlzQXJyYXkiLCJlcnJvcnMiLCJmb3JFYWNoIiwiZXJyb3IiLCJmaWVsZCIsImhlbHAiLCJ0b0pTT04iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/response-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/response.js":
/*!************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/response.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\nclass Response {\n    constructor(statusCode, body, headers){\n        this.statusCode = statusCode;\n        this.body = body;\n        this.headers = headers;\n    }\n    toString() {\n        return \"HTTP \" + this.statusCode + \" \" + this.body;\n    }\n}\nmodule.exports = Response;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BO0lBQ0pDLFlBQVlDLFVBQVUsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDckMsSUFBSSxDQUFDRixVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNqQjtJQUVBQyxXQUFXO1FBQ1QsT0FBTyxVQUFVLElBQUksQ0FBQ0gsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxJQUFJO0lBQ3BEO0FBQ0Y7QUFFQUcsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9jbGFzc2VzL3Jlc3BvbnNlLmpzP2Y4OWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1c0NvZGUsIGJvZHksIGhlYWRlcnMpIHtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnSFRUUCAnICsgdGhpcy5zdGF0dXNDb2RlICsgJyAnICsgdGhpcy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2U7XG4iXSwibmFtZXMiOlsiUmVzcG9uc2UiLCJjb25zdHJ1Y3RvciIsInN0YXR1c0NvZGUiLCJib2R5IiwiaGVhZGVycyIsInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/classes/statistics.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/classes/statistics.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const toCamelCase = __webpack_require__(/*! ../helpers/to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\");\nconst deepClone = __webpack_require__(/*! ../helpers/deep-clone */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\");\n/**\n * Options\n */ const AggregatedByOptions = [\n    \"day\",\n    \"week\",\n    \"month\"\n];\nconst CountryOptions = [\n    \"us\",\n    \"ca\"\n];\nconst SortByDirection = [\n    \"desc\",\n    \"asc\"\n];\n/**\n * Statistics class\n */ class Statistics {\n    constructor(data){\n        this.startDate = null;\n        this.endDate = null;\n        this.aggregatedBy = null;\n        if (data) {\n            this.fromData(data);\n        }\n    }\n    /**\n   * Build from data\n   */ fromData(data) {\n        //Expecting object\n        if (typeof data !== \"object\") {\n            throw new Error(\"Expecting object for Statistics data\");\n        }\n        //Convert to camel case to make it workable, making a copy to prevent\n        //changes to the original objects\n        data = deepClone(data);\n        data = toCamelCase(data, [\n            \"substitutions\",\n            \"customArgs\"\n        ]);\n        const { startDate, endDate, aggregatedBy } = data;\n        this.setStartDate(startDate);\n        this.setEndDate(endDate);\n        this.setAggregatedBy(aggregatedBy);\n    }\n    /**\n   * Set startDate\n   */ setStartDate(startDate) {\n        if (typeof startDate === \"undefined\") {\n            throw new Error(\"Date expected for `startDate`\");\n        }\n        if (new Date(startDate) === \"Invalid Date\" || isNaN(new Date(startDate))) {\n            throw new Error(\"Date expected for `startDate`\");\n        }\n        console.log(startDate);\n        this.startDate = new Date(startDate).toISOString().slice(0, 10);\n    }\n    /**\n   * Set endDate\n   */ setEndDate(endDate) {\n        if (typeof endDate === \"undefined\") {\n            this.endDate = new Date().toISOString().slice(0, 10);\n            return;\n        }\n        if (new Date(endDate) === \"Invalid Date\" || isNaN(new Date(endDate))) {\n            throw new Error(\"Date expected for `endDate`\");\n        }\n        this.endDate = new Date(endDate).toISOString().slice(0, 10);\n    }\n    /**\n   * Set aggregatedBy\n   */ setAggregatedBy(aggregatedBy) {\n        if (typeof aggregatedBy === \"undefined\") {\n            return;\n        }\n        if (typeof aggregatedBy === \"string\" && AggregatedByOptions.includes(aggregatedBy.toLowerCase())) {\n            this.aggregatedBy = aggregatedBy;\n        } else {\n            throw new Error(\"Incorrect value for `aggregatedBy`\");\n        }\n    }\n    /**\n   * Get Global\n   */ getGlobal() {\n        const { startDate, endDate, aggregatedBy } = this;\n        return {\n            startDate,\n            endDate,\n            aggregatedBy\n        };\n    }\n    /**\n   * Get Advanced\n   */ getAdvanced(country) {\n        const json = this.getGlobal();\n        if (typeof country === \"undefined\") {\n            return json;\n        }\n        if (typeof country === \"string\" && CountryOptions.includes(country.toLowerCase())) {\n            json.country = country;\n        }\n        return json;\n    }\n    /**\n   * Get Advanced Mailbox Providers\n   */ getAdvancedMailboxProviders(mailBoxProviders) {\n        const json = this.getGlobal();\n        if (typeof mailBoxProviders === \"undefined\") {\n            return json;\n        }\n        if (Array.isArray(mailBoxProviders) && mailBoxProviders.some((x)=>typeof x !== \"string\")) {\n            throw new Error(\"Array of strings expected for `mailboxProviders`\");\n        }\n        json.mailBoxProviders = mailBoxProviders;\n        return json;\n    }\n    /**\n   * Get Advanced Browsers\n   */ getAdvancedBrowsers(browsers) {\n        const json = this.getGlobal();\n        if (typeof browsers === \"undefined\") {\n            return json;\n        }\n        if (Array.isArray(browsers) && browsers.some((x)=>typeof x !== \"string\")) {\n            throw new Error(\"Array of strings expected for `browsers`\");\n        }\n        json.browsers = browsers;\n        return json;\n    }\n    /**\n   * Get Categories\n   */ getCategories(categories) {\n        if (typeof categories === \"undefined\") {\n            throw new Error(\"Array of strings expected for `categories`\");\n        }\n        if (!this._isValidArrayOfStrings(categories)) {\n            throw new Error(\"Array of strings expected for `categories`\");\n        }\n        const json = this.getGlobal();\n        json.categories = categories;\n        return json;\n    }\n    /**\n   * Get Subuser\n   */ getSubuser(subusers) {\n        if (typeof subusers === \"undefined\") {\n            throw new Error(\"Array of strings expected for `subusers`\");\n        }\n        if (!this._isValidArrayOfStrings(subusers)) {\n            throw new Error(\"Array of strings expected for `subusers`\");\n        }\n        const json = this.getGlobal();\n        json.subusers = subusers;\n        return json;\n    }\n    /**\n   * Get Subuser Sum\n   */ getSubuserSum(sortByMetric = \"delivered\", sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n        if (typeof sortByMetric !== \"string\") {\n            throw new Error(\"string expected for `sortByMetric`\");\n        }\n        if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n            throw new Error(\"desc or asc expected for `sortByDirection`\");\n        }\n        if (typeof limit !== \"number\") {\n            throw new Error(\"number expected for `limit`\");\n        }\n        if (typeof offset !== \"number\") {\n            throw new Error(\"number expected for `offset`\");\n        }\n        const json = this.getGlobal();\n        json.sortByMetric = sortByMetric;\n        json.sortByDirection = sortByDirection;\n        json.limit = limit;\n        json.offset = offset;\n        return json;\n    }\n    /**\n   * Get Subuser Monthly\n   */ getSubuserMonthly(sortByMetric = \"delivered\", sortByDirection = SortByDirection[0], limit = 5, offset = 0) {\n        if (typeof sortByMetric !== \"string\") {\n            throw new Error(\"string expected for `sortByMetric`\");\n        }\n        if (!SortByDirection.includes(sortByDirection.toLowerCase())) {\n            throw new Error(\"desc or asc expected for `sortByDirection`\");\n        }\n        if (typeof limit !== \"number\") {\n            throw new Error(\"number expected for `limit`\");\n        }\n        if (typeof offset !== \"number\") {\n            throw new Error(\"number expected for `offset`\");\n        }\n        const json = this.getGlobal();\n        json.sortByMetric = sortByMetric;\n        json.sortByDirection = sortByDirection;\n        json.limit = limit;\n        json.offset = offset;\n        return json;\n    }\n    _isValidArrayOfStrings(arr) {\n        if (!Array.isArray(arr)) {\n            return false;\n        }\n        if (arr.length < 1 || arr.some((x)=>typeof x !== \"string\")) {\n            return false;\n        }\n        return true;\n    }\n}\n//Export class\nmodule.exports = Statistics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9zdGF0aXN0aWNzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUUxQjs7Q0FFQyxHQUNELE1BQU1FLHNCQUFzQjtJQUFDO0lBQU87SUFBUTtDQUFRO0FBQ3BELE1BQU1DLGlCQUFpQjtJQUFDO0lBQU07Q0FBSztBQUNuQyxNQUFNQyxrQkFBa0I7SUFBQztJQUFRO0NBQU07QUFFdkM7O0NBRUMsR0FDRCxNQUFNQztJQUNKQyxZQUFZQyxJQUFJLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFlBQVksR0FBRztRQUVwQixJQUFJSCxNQUFNO1lBQ1IsSUFBSSxDQUFDSSxRQUFRLENBQUNKO1FBQ2hCO0lBQ0Y7SUFFQTs7R0FFQyxHQUNESSxTQUFTSixJQUFJLEVBQUU7UUFFYixrQkFBa0I7UUFDbEIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7WUFDNUIsTUFBTSxJQUFJSyxNQUFNO1FBQ2xCO1FBRUEscUVBQXFFO1FBQ3JFLGlDQUFpQztRQUNqQ0wsT0FBT04sVUFBVU07UUFDakJBLE9BQU9SLFlBQVlRLE1BQU07WUFBQztZQUFpQjtTQUFhO1FBRXhELE1BQU0sRUFBRUMsU0FBUyxFQUNmQyxPQUFPLEVBQ1BDLFlBQVksRUFDYixHQUFHSDtRQUVKLElBQUksQ0FBQ00sWUFBWSxDQUFDTDtRQUNsQixJQUFJLENBQUNNLFVBQVUsQ0FBQ0w7UUFDaEIsSUFBSSxDQUFDTSxlQUFlLENBQUNMO0lBQ3ZCO0lBRUE7O0dBRUMsR0FDREcsYUFBYUwsU0FBUyxFQUFFO1FBQ3RCLElBQUksT0FBT0EsY0FBYyxhQUFhO1lBQ3BDLE1BQU0sSUFBSUksTUFBTTtRQUNsQjtRQUVBLElBQUksSUFBS0ks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Z0JBQWdCa0IsUUFBUSxDQUFDcUIsZ0JBQWdCcEIsV0FBVyxLQUFLO1lBQzVELE1BQU0sSUFBSVgsTUFBTTtRQUNsQjtRQUVBLElBQUksT0FBT2dDLFVBQVUsVUFBVTtZQUM3QixNQUFNLElBQUloQyxNQUFNO1FBQ2xCO1FBRUEsSUFBSSxPQUFPaUMsV0FBVyxVQUFVO1lBQzlCLE1BQU0sSUFBSWpDLE1BQU07UUFDbEI7UUFFQSxNQUFNZSxPQUFPLElBQUksQ0FBQ0gsU0FBUztRQUUzQkcsS0FBS2UsWUFBWSxHQUFHQTtRQUNwQmYsS0FBS2dCLGVBQWUsR0FBR0E7UUFDdkJoQixLQUFLaUIsS0FBSyxHQUFHQTtRQUNiakIsS0FBS2tCLE1BQU0sR0FBR0E7UUFFZCxPQUFPbEI7SUFDVDtJQUVBVyx1QkFBdUJTLEdBQUcsRUFBRTtRQUMxQixJQUFJLENBQUNqQixNQUFNQyxPQUFPLENBQUNnQixNQUFNO1lBQ3ZCLE9BQU87UUFDVDtRQUVBLElBQUlBLElBQUlDLE1BQU0sR0FBRyxLQUFLRCxJQUFJZixJQUFJLENBQUNDLENBQUFBLElBQUssT0FBT0EsTUFBTSxXQUFXO1lBQzFELE9BQU87UUFDVDtRQUVBLE9BQU87SUFDVDtBQUNGO0FBRUEsY0FBYztBQUNkZ0IsT0FBT0MsT0FBTyxHQUFHN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY2xhc3Nlcy9zdGF0aXN0aWNzLmpzPzJjMjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG8tY2FtZWwtY2FzZScpO1xuY29uc3QgZGVlcENsb25lID0gcmVxdWlyZSgnLi4vaGVscGVycy9kZWVwLWNsb25lJyk7XG5cbi8qKlxuICogT3B0aW9uc1xuICovXG5jb25zdCBBZ2dyZWdhdGVkQnlPcHRpb25zID0gWydkYXknLCAnd2VlaycsICdtb250aCddO1xuY29uc3QgQ291bnRyeU9wdGlvbnMgPSBbJ3VzJywgJ2NhJ107XG5jb25zdCBTb3J0QnlEaXJlY3Rpb24gPSBbJ2Rlc2MnLCAnYXNjJ107XG5cbi8qKlxuICogU3RhdGlzdGljcyBjbGFzc1xuICovXG5jbGFzcyBTdGF0aXN0aWNzIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuc3RhcnREYXRlID0gbnVsbDtcbiAgICB0aGlzLmVuZERhdGUgPSBudWxsO1xuICAgIHRoaXMuYWdncmVnYXRlZEJ5ID0gbnVsbDtcblxuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLmZyb21EYXRhKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCBmcm9tIGRhdGFcbiAgICovXG4gIGZyb21EYXRhKGRhdGEpIHtcblxuICAgIC8vRXhwZWN0aW5nIG9iamVjdFxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIG9iamVjdCBmb3IgU3RhdGlzdGljcyBkYXRhJyk7XG4gICAgfVxuXG4gICAgLy9Db252ZXJ0IHRvIGNhbWVsIGNhc2UgdG8gbWFrZSBpdCB3b3JrYWJsZSwgbWFraW5nIGEgY29weSB0byBwcmV2ZW50XG4gICAgLy9jaGFuZ2VzIHRvIHRoZSBvcmlnaW5hbCBvYmplY3RzXG4gICAgZGF0YSA9IGRlZXBDbG9uZShkYXRhKTtcbiAgICBkYXRhID0gdG9DYW1lbENhc2UoZGF0YSwgWydzdWJzdGl0dXRpb25zJywgJ2N1c3RvbUFyZ3MnXSk7XG5cbiAgICBjb25zdCB7IHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGUsXG4gICAgICBhZ2dyZWdhdGVkQnksXG4gICAgfSA9IGRhdGE7XG5cbiAgICB0aGlzLnNldFN0YXJ0RGF0ZShzdGFydERhdGUpO1xuICAgIHRoaXMuc2V0RW5kRGF0ZShlbmREYXRlKTtcbiAgICB0aGlzLnNldEFnZ3JlZ2F0ZWRCeShhZ2dyZWdhdGVkQnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzdGFydERhdGVcbiAgICovXG4gIHNldFN0YXJ0RGF0ZShzdGFydERhdGUpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0RGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0ZSBleHBlY3RlZCBmb3IgYHN0YXJ0RGF0ZWAnKTtcbiAgICB9XG5cbiAgICBpZiAoKG5ldyBEYXRlKHN0YXJ0RGF0ZSkgPT09ICdJbnZhbGlkIERhdGUnKSB8fFxuICAgICAgICBpc05hTihuZXcgRGF0ZShzdGFydERhdGUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRlIGV4cGVjdGVkIGZvciBgc3RhcnREYXRlYCcpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKHN0YXJ0RGF0ZSk7XG5cbiAgICB0aGlzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGVuZERhdGVcbiAgICovXG4gIHNldEVuZERhdGUoZW5kRGF0ZSkge1xuICAgIGlmICh0eXBlb2YgZW5kRGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMuZW5kRGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5ldyBEYXRlKGVuZERhdGUpID09PSAnSW52YWxpZCBEYXRlJyB8fCBpc05hTihuZXcgRGF0ZShlbmREYXRlKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGF0ZSBleHBlY3RlZCBmb3IgYGVuZERhdGVgJyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbmREYXRlID0gbmV3IERhdGUoZW5kRGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGFnZ3JlZ2F0ZWRCeVxuICAgKi9cbiAgc2V0QWdncmVnYXRlZEJ5KGFnZ3JlZ2F0ZWRCeSkge1xuICAgIGlmICh0eXBlb2YgYWdncmVnYXRlZEJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWdncmVnYXRlZEJ5ID09PSAnc3RyaW5nJyAmJlxuICAgICAgICBBZ2dyZWdhdGVkQnlPcHRpb25zLmluY2x1ZGVzKGFnZ3JlZ2F0ZWRCeS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgdGhpcy5hZ2dyZWdhdGVkQnkgPSBhZ2dyZWdhdGVkQnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IHZhbHVlIGZvciBgYWdncmVnYXRlZEJ5YCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgR2xvYmFsXG4gICAqL1xuICBnZXRHbG9iYWwoKSB7XG4gICAgY29uc3QgeyBzdGFydERhdGUsIGVuZERhdGUsIGFnZ3JlZ2F0ZWRCeSB9ID0gdGhpcztcblxuICAgIHJldHVybiB7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgYWdncmVnYXRlZEJ5IH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFkdmFuY2VkXG4gICAqL1xuICBnZXRBZHZhbmNlZChjb3VudHJ5KSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuZ2V0R2xvYmFsKCk7XG5cbiAgICBpZiAodHlwZW9mIGNvdW50cnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvdW50cnkgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIENvdW50cnlPcHRpb25zLmluY2x1ZGVzKGNvdW50cnkudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgIGpzb24uY291bnRyeSA9IGNvdW50cnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFkdmFuY2VkIE1haWxib3ggUHJvdmlkZXJzXG4gICAqL1xuICBnZXRBZHZhbmNlZE1haWxib3hQcm92aWRlcnMobWFpbEJveFByb3ZpZGVycykge1xuICAgIGNvbnN0IGpzb24gPSB0aGlzLmdldEdsb2JhbCgpO1xuXG4gICAgaWYgKHR5cGVvZiBtYWlsQm94UHJvdmlkZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWFpbEJveFByb3ZpZGVycykgJiZcbiAgICAgICAgbWFpbEJveFByb3ZpZGVycy5zb21lKHggPT4gdHlwZW9mIHggIT09ICdzdHJpbmcnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBvZiBzdHJpbmdzIGV4cGVjdGVkIGZvciBgbWFpbGJveFByb3ZpZGVyc2AnKTtcbiAgICB9XG5cbiAgICBqc29uLm1haWxCb3hQcm92aWRlcnMgPSBtYWlsQm94UHJvdmlkZXJzO1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFkdmFuY2VkIEJyb3dzZXJzXG4gICAqL1xuICBnZXRBZHZhbmNlZEJyb3dzZXJzKGJyb3dzZXJzKSB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuZ2V0R2xvYmFsKCk7XG5cbiAgICBpZiAodHlwZW9mIGJyb3dzZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnJvd3NlcnMpICYmIGJyb3dzZXJzLnNvbWUoeCA9PiB0eXBlb2YgeCAhPT0gJ3N0cmluZycpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IG9mIHN0cmluZ3MgZXhwZWN0ZWQgZm9yIGBicm93c2Vyc2AnKTtcbiAgICB9XG5cbiAgICBqc29uLmJyb3dzZXJzID0gYnJvd3NlcnM7XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ2F0ZWdvcmllc1xuICAgKi9cbiAgZ2V0Q2F0ZWdvcmllcyhjYXRlZ29yaWVzKSB7XG4gICAgaWYgKHR5cGVvZiBjYXRlZ29yaWVzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBvZiBzdHJpbmdzIGV4cGVjdGVkIGZvciBgY2F0ZWdvcmllc2AnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2lzVmFsaWRBcnJheU9mU3RyaW5ncyhjYXRlZ29yaWVzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBvZiBzdHJpbmdzIGV4cGVjdGVkIGZvciBgY2F0ZWdvcmllc2AnKTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uID0gdGhpcy5nZXRHbG9iYWwoKTtcbiAgICBqc29uLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IFN1YnVzZXJcbiAgICovXG4gIGdldFN1YnVzZXIoc3VidXNlcnMpIHtcbiAgICBpZiAodHlwZW9mIHN1YnVzZXJzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBvZiBzdHJpbmdzIGV4cGVjdGVkIGZvciBgc3VidXNlcnNgJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl9pc1ZhbGlkQXJyYXlPZlN0cmluZ3Moc3VidXNlcnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IG9mIHN0cmluZ3MgZXhwZWN0ZWQgZm9yIGBzdWJ1c2Vyc2AnKTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uID0gdGhpcy5nZXRHbG9iYWwoKTtcbiAgICBqc29uLnN1YnVzZXJzID0gc3VidXNlcnM7XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgU3VidXNlciBTdW1cbiAgICovXG4gIGdldFN1YnVzZXJTdW0oc29ydEJ5TWV0cmljID0gJ2RlbGl2ZXJlZCcsXG4gICAgc29ydEJ5RGlyZWN0aW9uID0gU29ydEJ5RGlyZWN0aW9uWzBdLCBsaW1pdCA9IDUsIG9mZnNldCA9IDApIHtcbiAgICBpZiAodHlwZW9mIHNvcnRCeU1ldHJpYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RyaW5nIGV4cGVjdGVkIGZvciBgc29ydEJ5TWV0cmljYCcpO1xuICAgIH1cblxuICAgIGlmICghU29ydEJ5RGlyZWN0aW9uLmluY2x1ZGVzKHNvcnRCeURpcmVjdGlvbi50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXNjIG9yIGFzYyBleHBlY3RlZCBmb3IgYHNvcnRCeURpcmVjdGlvbmAnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGxpbWl0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdudW1iZXIgZXhwZWN0ZWQgZm9yIGBsaW1pdGAnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbnVtYmVyIGV4cGVjdGVkIGZvciBgb2Zmc2V0YCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGpzb24gPSB0aGlzLmdldEdsb2JhbCgpO1xuXG4gICAganNvbi5zb3J0QnlNZXRyaWMgPSBzb3J0QnlNZXRyaWM7XG4gICAganNvbi5zb3J0QnlEaXJlY3Rpb24gPSBzb3J0QnlEaXJlY3Rpb247XG4gICAganNvbi5saW1pdCA9IGxpbWl0O1xuICAgIGpzb24ub2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IFN1YnVzZXIgTW9udGhseVxuICAgKi9cbiAgZ2V0U3VidXNlck1vbnRobHkoc29ydEJ5TWV0cmljID0gJ2RlbGl2ZXJlZCcsXG4gICAgc29ydEJ5RGlyZWN0aW9uID0gU29ydEJ5RGlyZWN0aW9uWzBdLCBsaW1pdCA9IDUsIG9mZnNldCA9IDApIHtcbiAgICBpZiAodHlwZW9mIHNvcnRCeU1ldHJpYyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RyaW5nIGV4cGVjdGVkIGZvciBgc29ydEJ5TWV0cmljYCcpO1xuICAgIH1cblxuICAgIGlmICghU29ydEJ5RGlyZWN0aW9uLmluY2x1ZGVzKHNvcnRCeURpcmVjdGlvbi50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXNjIG9yIGFzYyBleHBlY3RlZCBmb3IgYHNvcnRCeURpcmVjdGlvbmAnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGxpbWl0ICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdudW1iZXIgZXhwZWN0ZWQgZm9yIGBsaW1pdGAnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbnVtYmVyIGV4cGVjdGVkIGZvciBgb2Zmc2V0YCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGpzb24gPSB0aGlzLmdldEdsb2JhbCgpO1xuXG4gICAganNvbi5zb3J0QnlNZXRyaWMgPSBzb3J0QnlNZXRyaWM7XG4gICAganNvbi5zb3J0QnlEaXJlY3Rpb24gPSBzb3J0QnlEaXJlY3Rpb247XG4gICAganNvbi5saW1pdCA9IGxpbWl0O1xuICAgIGpzb24ub2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBfaXNWYWxpZEFycmF5T2ZTdHJpbmdzKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGFyci5sZW5ndGggPCAxIHx8IGFyci5zb21lKHggPT4gdHlwZW9mIHggIT09ICdzdHJpbmcnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8vRXhwb3J0IGNsYXNzXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRpc3RpY3M7XG4iXSwibmFtZXMiOlsidG9DYW1lbENhc2UiLCJyZXF1aXJlIiwiZGVlcENsb25lIiwiQWdncmVnYXRlZEJ5T3B0aW9ucyIsIkNvdW50cnlPcHRpb25zIiwiU29ydEJ5RGlyZWN0aW9uIiwiU3RhdGlzdGljcyIsImNvbnN0cnVjdG9yIiwiZGF0YSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJhZ2dyZWdhdGVkQnkiLCJmcm9tRGF0YSIsIkVycm9yIiwic2V0U3RhcnREYXRlIiwic2V0RW5kRGF0ZSIsInNldEFnZ3JlZ2F0ZWRCeSIsIkRhdGUiLCJpc05hTiIsImNvbnNvbGUiLCJsb2ciLCJ0b0lTT1N0cmluZyIsInNsaWNlIiwiaW5jbHVkZXMiLCJ0b0xvd2VyQ2FzZSIsImdldEdsb2JhbCIsImdldEFkdmFuY2VkIiwiY291bnRyeSIsImpzb24iLCJnZXRBZHZhbmNlZE1haWxib3hQcm92aWRlcnMiLCJtYWlsQm94UHJvdmlkZXJzIiwiQXJyYXkiLCJpc0FycmF5Iiwic29tZSIsIngiLCJnZXRBZHZhbmNlZEJyb3dzZXJzIiwiYnJvd3NlcnMiLCJnZXRDYXRlZ29yaWVzIiwiY2F0ZWdvcmllcyIsIl9pc1ZhbGlkQXJyYXlPZlN0cmluZ3MiLCJnZXRTdWJ1c2VyIiwic3VidXNlcnMiLCJnZXRTdWJ1c2VyU3VtIiwic29ydEJ5TWV0cmljIiwic29ydEJ5RGlyZWN0aW9uIiwibGltaXQiLCJvZmZzZXQiLCJnZXRTdWJ1c2VyTW9udGhseSIsImFyciIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/classes/statistics.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/constants/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/constants/index.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("const DYNAMIC_TEMPLATE_CHAR_WARNING = `\nContent with characters ', \" or & may need to be escaped with three brackets\n{{{ content }}}\nSee https://sendgrid.com/docs/for-developers/sending-email/using-handlebars/ for more information.`;\nmodule.exports = {\n    DYNAMIC_TEMPLATE_CHAR_WARNING\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvY29uc3RhbnRzL2luZGV4LmpzPzQ3YzMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRFlOQU1JQ19URU1QTEFURV9DSEFSX1dBUk5JTkcgPSBgXG5Db250ZW50IHdpdGggY2hhcmFjdGVycyAnLCBcIiBvciAmIG1heSBuZWVkIHRvIGJlIGVzY2FwZWQgd2l0aCB0aHJlZSBicmFja2V0c1xue3t7IGNvbnRlbnQgfX19XG5TZWUgaHR0cHM6Ly9zZW5kZ3JpZC5jb20vZG9jcy9mb3ItZGV2ZWxvcGVycy9zZW5kaW5nLWVtYWlsL3VzaW5nLWhhbmRsZWJhcnMvIGZvciBtb3JlIGluZm9ybWF0aW9uLmA7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBEWU5BTUlDX1RFTVBMQVRFX0NIQVJfV0FSTklORyxcbn07XG4iXSwibmFtZXMiOlsiRFlOQU1JQ19URU1QTEFURV9DSEFSX1dBUk5JTkciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxnQ0FBZ0MsQ0FBQzs7O2tHQUcyRCxDQUFDO0FBRW5HQyxPQUFPQyxPQUFPLEdBQUc7SUFDZkY7QUFDRiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9jb25zdGFudHMvaW5kZXguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/constants/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/array-to-json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/array-to-json.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Helper to convert an array of objects to JSON\n */ module.exports = function arrayToJSON(arr) {\n    return arr.map((item)=>{\n        if (typeof item === \"object\" && item !== null && typeof item.toJSON === \"function\") {\n            return item.toJSON();\n        }\n        return item;\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9hcnJheS10by1qc29uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFlBQVlDLEdBQUc7SUFDdkMsT0FBT0EsSUFBSUMsR0FBRyxDQUFDQyxDQUFBQTtRQUNiLElBQUksT0FBT0EsU0FBUyxZQUFZQSxTQUFTLFFBQVEsT0FBT0EsS0FBS0MsTUFBTSxLQUFLLFlBQVk7WUFDbEYsT0FBT0QsS0FBS0MsTUFBTTtRQUNwQjtRQUNBLE9BQU9EO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9oZWxwZXJzL2FycmF5LXRvLWpzb24uanM/OTQwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSGVscGVyIHRvIGNvbnZlcnQgYW4gYXJyYXkgb2Ygb2JqZWN0cyB0byBKU09OXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXJyYXlUb0pTT04oYXJyKSB7XG4gIHJldHVybiBhcnIubWFwKGl0ZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVtLnRvSlNPTigpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhcnJheVRvSlNPTiIsImFyciIsIm1hcCIsIml0ZW0iLCJ0b0pTT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/array-to-json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/convert-keys.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/convert-keys.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Helper to convert an object's keys\n */ module.exports = function convertKeys(obj, converter, ignored) {\n    //Validate\n    if (typeof obj !== \"object\" || obj === null) {\n        throw new Error(\"Non object passed to convertKeys: \" + obj);\n    }\n    //Ignore arrays\n    if (Array.isArray(obj)) {\n        return obj;\n    }\n    //Ensure array for ignored values\n    if (!Array.isArray(ignored)) {\n        ignored = [];\n    }\n    //Process all properties\n    for(const key in obj){\n        //istanbul ignore else\n        if (obj.hasOwnProperty(key)) {\n            //Convert key to snake case\n            const converted = converter(key);\n            //Recursive for child objects, unless ignored\n            //The ignored check checks both variants of the key\n            if (typeof obj[key] === \"object\" && obj[key] !== null) {\n                if (!ignored.includes(key) && !ignored.includes(converted)) {\n                    obj[key] = convertKeys(obj[key], converter, ignored);\n                }\n            }\n            //Convert key to snake case and set if needed\n            if (converted !== key) {\n                obj[converted] = obj[key];\n                delete obj[key];\n            }\n        }\n    }\n    //Return object\n    return obj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9jb252ZXJ0LWtleXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsWUFBWUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLE9BQU87SUFFM0QsVUFBVTtJQUNWLElBQUksT0FBT0YsUUFBUSxZQUFZQSxRQUFRLE1BQU07UUFDM0MsTUFBTSxJQUFJRyxNQUFNLHVDQUF1Q0g7SUFDekQ7SUFFQSxlQUFlO0lBQ2YsSUFBSUksTUFBTUMsT0FBTyxDQUFDTCxNQUFNO1FBQ3RCLE9BQU9BO0lBQ1Q7SUFFQSxpQ0FBaUM7SUFDakMsSUFBSSxDQUFDSSxNQUFNQyxPQUFPLENBQUNILFVBQVU7UUFDM0JBLFVBQVUsRUFBRTtJQUNkO0lBRUEsd0JBQXdCO0lBQ3hCLElBQUssTUFBTUksT0FBT04sSUFBSztRQUNyQixzQkFBc0I7UUFDdEIsSUFBSUEsSUFBSU8sY0FBYyxDQUFDRCxNQUFNO1lBRTNCLDJCQUEyQjtZQUMzQixNQUFNRSxZQUFZUCxVQUFVSztZQUU1Qiw2Q0FBNkM7WUFDN0MsbURBQW1EO1lBQ25ELElBQUksT0FBT04sR0FBRyxDQUFDTSxJQUFJLEtBQUssWUFBWU4sR0FBRyxDQUFDTSxJQUFJLEtBQUssTUFBTTtnQkFDckQsSUFBSSxDQUFDSixRQUFRTyxRQUFRLENBQUNILFFBQVEsQ0FBQ0osUUFBUU8sUUFBUSxDQUFDRCxZQUFZO29CQUMxRFIsR0FBRyxDQUFDTSxJQUFJLEdBQUdQLFlBQVlDLEdBQUcsQ0FBQ00sSUFBSSxFQUFFTCxXQUFXQztnQkFDOUM7WUFDRjtZQUVBLDZDQUE2QztZQUM3QyxJQUFJTSxjQUFjRixLQUFLO2dCQUNyQk4sR0FBRyxDQUFDUSxVQUFVLEdBQUdSLEdBQUcsQ0FBQ00sSUFBSTtnQkFDekIsT0FBT04sR0FBRyxDQUFDTSxJQUFJO1lBQ2pCO1FBQ0Y7SUFDRjtJQUVBLGVBQWU7SUFDZixPQUFPTjtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvY29udmVydC1rZXlzLmpzPzRiN2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEhlbHBlciB0byBjb252ZXJ0IGFuIG9iamVjdCdzIGtleXNcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb252ZXJ0S2V5cyhvYmosIGNvbnZlcnRlciwgaWdub3JlZCkge1xuXG4gIC8vVmFsaWRhdGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm9uIG9iamVjdCBwYXNzZWQgdG8gY29udmVydEtleXM6ICcgKyBvYmopO1xuICB9XG5cbiAgLy9JZ25vcmUgYXJyYXlzXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLy9FbnN1cmUgYXJyYXkgZm9yIGlnbm9yZWQgdmFsdWVzXG4gIGlmICghQXJyYXkuaXNBcnJheShpZ25vcmVkKSkge1xuICAgIGlnbm9yZWQgPSBbXTtcbiAgfVxuXG4gIC8vUHJvY2VzcyBhbGwgcHJvcGVydGllc1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAvL2lzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cbiAgICAgIC8vQ29udmVydCBrZXkgdG8gc25ha2UgY2FzZVxuICAgICAgY29uc3QgY29udmVydGVkID0gY29udmVydGVyKGtleSk7XG5cbiAgICAgIC8vUmVjdXJzaXZlIGZvciBjaGlsZCBvYmplY3RzLCB1bmxlc3MgaWdub3JlZFxuICAgICAgLy9UaGUgaWdub3JlZCBjaGVjayBjaGVja3MgYm90aCB2YXJpYW50cyBvZiB0aGUga2V5XG4gICAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAnb2JqZWN0JyAmJiBvYmpba2V5XSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIWlnbm9yZWQuaW5jbHVkZXMoa2V5KSAmJiAhaWdub3JlZC5pbmNsdWRlcyhjb252ZXJ0ZWQpKSB7XG4gICAgICAgICAgb2JqW2tleV0gPSBjb252ZXJ0S2V5cyhvYmpba2V5XSwgY29udmVydGVyLCBpZ25vcmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvL0NvbnZlcnQga2V5IHRvIHNuYWtlIGNhc2UgYW5kIHNldCBpZiBuZWVkZWRcbiAgICAgIGlmIChjb252ZXJ0ZWQgIT09IGtleSkge1xuICAgICAgICBvYmpbY29udmVydGVkXSA9IG9ialtrZXldO1xuICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy9SZXR1cm4gb2JqZWN0XG4gIHJldHVybiBvYmo7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb252ZXJ0S2V5cyIsIm9iaiIsImNvbnZlcnRlciIsImlnbm9yZWQiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSIsImtleSIsImhhc093blByb3BlcnR5IiwiY29udmVydGVkIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/convert-keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/deep-clone.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Deep cloning helper for objects\n */ module.exports = function deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9kZWVwLWNsb25lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFVBQVVDLEdBQUc7SUFDckMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNIO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvZGVlcC1jbG9uZS5qcz85NTE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZWVwIGNsb25pbmcgaGVscGVyIGZvciBvYmplY3RzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVlcENsb25lKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRlZXBDbG9uZSIsIm9iaiIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Expose helpers\n */ const arrayToJSON = __webpack_require__(/*! ./array-to-json */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/array-to-json.js\");\nconst convertKeys = __webpack_require__(/*! ./convert-keys */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/convert-keys.js\");\nconst deepClone = __webpack_require__(/*! ./deep-clone */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/deep-clone.js\");\nconst mergeData = __webpack_require__(/*! ./merge-data */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/merge-data.js\");\nconst splitNameEmail = __webpack_require__(/*! ./split-name-email */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/split-name-email.js\");\nconst toCamelCase = __webpack_require__(/*! ./to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\");\nconst toSnakeCase = __webpack_require__(/*! ./to-snake-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js\");\nconst wrapSubstitutions = __webpack_require__(/*! ./wrap-substitutions */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/wrap-substitutions.js\");\n/**\n * Export\n */ module.exports = {\n    arrayToJSON,\n    convertKeys,\n    deepClone,\n    mergeData,\n    splitNameEmail,\n    toCamelCase,\n    toSnakeCase,\n    wrapSubstitutions\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOztDQUVDLEdBQ0QsTUFBTUEsY0FBY0MsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUcsWUFBWUgsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUksaUJBQWlCSixtQkFBT0EsQ0FBQztBQUMvQixNQUFNSyxjQUFjTCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNTSxjQUFjTixtQkFBT0EsQ0FBQztBQUM1QixNQUFNTyxvQkFBb0JQLG1CQUFPQSxDQUFDO0FBRWxDOztDQUVDLEdBQ0RRLE9BQU9DLE9BQU8sR0FBRztJQUNmVjtJQUNBRTtJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvaW5kZXguanM/NTNjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXhwb3NlIGhlbHBlcnNcbiAqL1xuY29uc3QgYXJyYXlUb0pTT04gPSByZXF1aXJlKCcuL2FycmF5LXRvLWpzb24nKTtcbmNvbnN0IGNvbnZlcnRLZXlzID0gcmVxdWlyZSgnLi9jb252ZXJ0LWtleXMnKTtcbmNvbnN0IGRlZXBDbG9uZSA9IHJlcXVpcmUoJy4vZGVlcC1jbG9uZScpO1xuY29uc3QgbWVyZ2VEYXRhID0gcmVxdWlyZSgnLi9tZXJnZS1kYXRhJyk7XG5jb25zdCBzcGxpdE5hbWVFbWFpbCA9IHJlcXVpcmUoJy4vc3BsaXQtbmFtZS1lbWFpbCcpO1xuY29uc3QgdG9DYW1lbENhc2UgPSByZXF1aXJlKCcuL3RvLWNhbWVsLWNhc2UnKTtcbmNvbnN0IHRvU25ha2VDYXNlID0gcmVxdWlyZSgnLi90by1zbmFrZS1jYXNlJyk7XG5jb25zdCB3cmFwU3Vic3RpdHV0aW9ucyA9IHJlcXVpcmUoJy4vd3JhcC1zdWJzdGl0dXRpb25zJyk7XG5cbi8qKlxuICogRXhwb3J0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhcnJheVRvSlNPTixcbiAgY29udmVydEtleXMsXG4gIGRlZXBDbG9uZSxcbiAgbWVyZ2VEYXRhLFxuICBzcGxpdE5hbWVFbWFpbCxcbiAgdG9DYW1lbENhc2UsXG4gIHRvU25ha2VDYXNlLFxuICB3cmFwU3Vic3RpdHV0aW9ucyxcbn07XG4iXSwibmFtZXMiOlsiYXJyYXlUb0pTT04iLCJyZXF1aXJlIiwiY29udmVydEtleXMiLCJkZWVwQ2xvbmUiLCJtZXJnZURhdGEiLCJzcGxpdE5hbWVFbWFpbCIsInRvQ2FtZWxDYXNlIiwidG9TbmFrZUNhc2UiLCJ3cmFwU3Vic3RpdHV0aW9ucyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/merge-data.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/merge-data.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Merge data helper\n */ module.exports = function mergeData(base, data) {\n    //Validate data\n    if (typeof base !== \"object\" || base === null) {\n        throw new Error(\"Not an object provided for base\");\n    }\n    if (typeof data !== \"object\" || data === null) {\n        throw new Error(\"Not an object provided for data\");\n    }\n    //Copy base\n    const merged = Object.assign({}, base);\n    //Add data\n    for(const key in data){\n        //istanbul ignore else\n        if (data.hasOwnProperty(key)) {\n            if (data[key] && Array.isArray(data[key])) {\n                merged[key] = data[key];\n            } else if (data[key] && typeof data[key] === \"object\") {\n                merged[key] = Object.assign({}, data[key]);\n            } else if (data[key]) {\n                merged[key] = data[key];\n            }\n        }\n    }\n    //Return\n    return merged;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9tZXJnZS1kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFVBQVVDLElBQUksRUFBRUMsSUFBSTtJQUU1QyxlQUFlO0lBQ2YsSUFBSSxPQUFPRCxTQUFTLFlBQVlBLFNBQVMsTUFBTTtRQUM3QyxNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxJQUFJLE9BQU9ELFNBQVMsWUFBWUEsU0FBUyxNQUFNO1FBQzdDLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBLFdBQVc7SUFDWCxNQUFNQyxTQUFTQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHTDtJQUVqQyxVQUFVO0lBQ1YsSUFBSyxNQUFNTSxPQUFPTCxLQUFNO1FBQ3RCLHNCQUFzQjtRQUN0QixJQUFJQSxLQUFLTSxjQUFjLENBQUNELE1BQU07WUFDNUIsSUFBSUwsSUFBSSxDQUFDSyxJQUFJLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ1IsSUFBSSxDQUFDSyxJQUFJLEdBQUc7Z0JBQ3pDSCxNQUFNLENBQUNHLElBQUksR0FBR0wsSUFBSSxDQUFDSyxJQUFJO1lBQ3pCLE9BQU8sSUFBSUwsSUFBSSxDQUFDSyxJQUFJLElBQUksT0FBT0wsSUFBSSxDQUFDSyxJQUFJLEtBQUssVUFBVTtnQkFDckRILE1BQU0sQ0FBQ0csSUFBSSxHQUFHRixPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSixJQUFJLENBQUNLLElBQUk7WUFDM0MsT0FBTyxJQUFJTCxJQUFJLENBQUNLLElBQUksRUFBRTtnQkFDcEJILE1BQU0sQ0FBQ0csSUFBSSxHQUFHTCxJQUFJLENBQUNLLElBQUk7WUFDekI7UUFDRjtJQUNGO0lBRUEsUUFBUTtJQUNSLE9BQU9IO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9tZXJnZS1kYXRhLmpzPzIwODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lcmdlIGRhdGEgaGVscGVyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VEYXRhKGJhc2UsIGRhdGEpIHtcblxuICAvL1ZhbGlkYXRlIGRhdGFcbiAgaWYgKHR5cGVvZiBiYXNlICE9PSAnb2JqZWN0JyB8fCBiYXNlID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYW4gb2JqZWN0IHByb3ZpZGVkIGZvciBiYXNlJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JyB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYW4gb2JqZWN0IHByb3ZpZGVkIGZvciBkYXRhJyk7XG4gIH1cblxuICAvL0NvcHkgYmFzZVxuICBjb25zdCBtZXJnZWQgPSBPYmplY3QuYXNzaWduKHt9LCBiYXNlKTtcblxuICAvL0FkZCBkYXRhXG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAvL2lzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKGRhdGFba2V5XSAmJiBBcnJheS5pc0FycmF5KGRhdGFba2V5XSkpIHtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSBkYXRhW2tleV07XG4gICAgICB9IGVsc2UgaWYgKGRhdGFba2V5XSAmJiB0eXBlb2YgZGF0YVtrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICBtZXJnZWRba2V5XSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGFba2V5XSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGFba2V5XSkge1xuICAgICAgICBtZXJnZWRba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1JldHVyblxuICByZXR1cm4gbWVyZ2VkO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibWVyZ2VEYXRhIiwiYmFzZSIsImRhdGEiLCJFcnJvciIsIm1lcmdlZCIsIk9iamVjdCIsImFzc2lnbiIsImtleSIsImhhc093blByb3BlcnR5IiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/merge-data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/split-name-email.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/split-name-email.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Split name and email address from string\n */ module.exports = function splitNameEmail(str) {\n    //If no email bracket present, return as is\n    if (str.indexOf(\"<\") === -1) {\n        return [\n            \"\",\n            str\n        ];\n    }\n    //Split into name and email\n    let [name, email] = str.split(\"<\");\n    //Trim and fix up\n    name = name.trim();\n    email = email.replace(\">\", \"\").trim();\n    //Return as array\n    return [\n        name,\n        email\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9zcGxpdC1uYW1lLWVtYWlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDREEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLGVBQWVDLEdBQUc7SUFFMUMsMkNBQTJDO0lBQzNDLElBQUlBLElBQUlDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztRQUMzQixPQUFPO1lBQUM7WUFBSUQ7U0FBSTtJQUNsQjtJQUVBLDJCQUEyQjtJQUMzQixJQUFJLENBQUNFLE1BQU1DLE1BQU0sR0FBR0gsSUFBSUksS0FBSyxDQUFDO0lBRTlCLGlCQUFpQjtJQUNqQkYsT0FBT0EsS0FBS0csSUFBSTtJQUNoQkYsUUFBUUEsTUFBTUcsT0FBTyxDQUFDLEtBQUssSUFBSUQsSUFBSTtJQUVuQyxpQkFBaUI7SUFDakIsT0FBTztRQUFDSDtRQUFNQztLQUFNO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvc3BsaXQtbmFtZS1lbWFpbC5qcz9kYjVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTcGxpdCBuYW1lIGFuZCBlbWFpbCBhZGRyZXNzIGZyb20gc3RyaW5nXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3BsaXROYW1lRW1haWwoc3RyKSB7XG5cbiAgLy9JZiBubyBlbWFpbCBicmFja2V0IHByZXNlbnQsIHJldHVybiBhcyBpc1xuICBpZiAoc3RyLmluZGV4T2YoJzwnKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gWycnLCBzdHJdO1xuICB9XG5cbiAgLy9TcGxpdCBpbnRvIG5hbWUgYW5kIGVtYWlsXG4gIGxldCBbbmFtZSwgZW1haWxdID0gc3RyLnNwbGl0KCc8Jyk7XG5cbiAgLy9UcmltIGFuZCBmaXggdXBcbiAgbmFtZSA9IG5hbWUudHJpbSgpO1xuICBlbWFpbCA9IGVtYWlsLnJlcGxhY2UoJz4nLCAnJykudHJpbSgpO1xuXG4gIC8vUmV0dXJuIGFzIGFycmF5XG4gIHJldHVybiBbbmFtZSwgZW1haWxdO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3BsaXROYW1lRW1haWwiLCJzdHIiLCJpbmRleE9mIiwibmFtZSIsImVtYWlsIiwic3BsaXQiLCJ0cmltIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/split-name-email.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-camel-case.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/str-to-camel-case.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Internal conversion helper\n */ module.exports = function strToCamelCase(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(\"String expected for conversion to snake case\");\n    }\n    return str.trim().replace(/_+|\\-+/g, \" \").replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n        if (Number(match) === 0) {\n            return \"\";\n        }\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9zdHItdG8tY2FtZWwtY2FzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOztDQUVDLEdBQ0RBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxHQUFHO0lBQzFDLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQzNCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUNBLE9BQU9ELElBQ0pFLElBQUksR0FDSkMsT0FBTyxDQUFDLFdBQVcsS0FDbkJBLE9BQU8sQ0FBQywyQkFBMkIsU0FBU0MsS0FBSyxFQUFFQyxLQUFLO1FBQ3ZELElBQUlDLE9BQU9GLFdBQVcsR0FBRztZQUN2QixPQUFPO1FBQ1Q7UUFDQSxPQUFPLFVBQVcsSUFBS0EsTUFBTUcsV0FBVyxLQUFLSCxNQUFNSSxXQUFXO0lBQ2hFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9zdHItdG8tY2FtZWwtY2FzZS5qcz8yMWQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBjb252ZXJzaW9uIGhlbHBlclxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0clRvQ2FtZWxDYXNlKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0cmluZyBleHBlY3RlZCBmb3IgY29udmVyc2lvbiB0byBzbmFrZSBjYXNlJyk7XG4gIH1cbiAgcmV0dXJuIHN0clxuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvXyt8XFwtKy9nLCAnICcpXG4gICAgLnJlcGxhY2UoLyg/Ol5cXHd8W0EtWl18XFxiXFx3fFxccyspL2csIGZ1bmN0aW9uKG1hdGNoLCBpbmRleCkge1xuICAgICAgaWYgKE51bWJlcihtYXRjaCkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCA9PT0gMCkgPyBtYXRjaC50b0xvd2VyQ2FzZSgpIDogbWF0Y2gudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInN0clRvQ2FtZWxDYXNlIiwic3RyIiwiRXJyb3IiLCJ0cmltIiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZXgiLCJOdW1iZXIiLCJ0b0xvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-camel-case.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-snake-case.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/str-to-snake-case.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Internal conversion helper\n */ module.exports = function strToSnakeCase(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(\"String expected for conversion to snake case\");\n    }\n    return str.trim().replace(/(\\s*\\-*\\b\\w|[A-Z])/g, function($1) {\n        $1 = $1.trim().toLowerCase().replace(\"-\", \"\");\n        return ($1[0] === \"_\" ? \"\" : \"_\") + $1;\n    }).slice(1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy9zdHItdG8tc25ha2UtY2FzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOztDQUVDLEdBQ0RBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxlQUFlQyxHQUFHO0lBQzFDLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQzNCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUNBLE9BQU9ELElBQUlFLElBQUksR0FBR0MsT0FBTyxDQUFDLHVCQUF1QixTQUFTQyxFQUFFO1FBQzFEQSxLQUFLQSxHQUFHRixJQUFJLEdBQUdHLFdBQVcsR0FBR0YsT0FBTyxDQUFDLEtBQUs7UUFDMUMsT0FBTyxDQUFDQyxFQUFFLENBQUMsRUFBRSxLQUFLLE1BQU0sS0FBSyxHQUFFLElBQUtBO0lBQ3RDLEdBQUdFLEtBQUssQ0FBQztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvc3RyLXRvLXNuYWtlLWNhc2UuanM/NGZhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgY29udmVyc2lvbiBoZWxwZXJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJUb1NuYWtlQ2FzZShzdHIpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgZXhwZWN0ZWQgZm9yIGNvbnZlcnNpb24gdG8gc25ha2UgY2FzZScpO1xuICB9XG4gIHJldHVybiBzdHIudHJpbSgpLnJlcGxhY2UoLyhcXHMqXFwtKlxcYlxcd3xbQS1aXSkvZywgZnVuY3Rpb24oJDEpIHtcbiAgICAkMSA9ICQxLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJy0nLCAnJyk7XG4gICAgcmV0dXJuICgkMVswXSA9PT0gJ18nID8gJycgOiAnXycpICsgJDE7XG4gIH0pLnNsaWNlKDEpO1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3RyVG9TbmFrZUNhc2UiLCJzdHIiLCJFcnJvciIsInRyaW0iLCJyZXBsYWNlIiwiJDEiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-snake-case.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/to-camel-case.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const convertKeys = __webpack_require__(/*! ./convert-keys */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/convert-keys.js\");\nconst strToCamelCase = __webpack_require__(/*! ./str-to-camel-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-camel-case.js\");\n/**\n * Convert object keys to camel case\n */ module.exports = function toCamelCase(obj, ignored) {\n    return convertKeys(obj, strToCamelCase, ignored);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy90by1jYW1lbC1jYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDO0FBRS9COztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLE9BQU87SUFDaEQsT0FBT1AsWUFBWU0sS0FBS0osZ0JBQWdCSztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9oZWxwZXJzL3RvLWNhbWVsLWNhc2UuanM/MGRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cbmNvbnN0IGNvbnZlcnRLZXlzID0gcmVxdWlyZSgnLi9jb252ZXJ0LWtleXMnKTtcbmNvbnN0IHN0clRvQ2FtZWxDYXNlID0gcmVxdWlyZSgnLi9zdHItdG8tY2FtZWwtY2FzZScpO1xuXG4vKipcbiAqIENvbnZlcnQgb2JqZWN0IGtleXMgdG8gY2FtZWwgY2FzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvQ2FtZWxDYXNlKG9iaiwgaWdub3JlZCkge1xuICByZXR1cm4gY29udmVydEtleXMob2JqLCBzdHJUb0NhbWVsQ2FzZSwgaWdub3JlZCk7XG59O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRLZXlzIiwicmVxdWlyZSIsInN0clRvQ2FtZWxDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRvQ2FtZWxDYXNlIiwib2JqIiwiaWdub3JlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/to-camel-case.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/to-snake-case.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const convertKeys = __webpack_require__(/*! ./convert-keys */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/convert-keys.js\");\nconst strToSnakeCase = __webpack_require__(/*! ./str-to-snake-case */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/str-to-snake-case.js\");\n/**\n * Convert object keys to snake case\n */ module.exports = function toSnakeCase(obj, ignored) {\n    return convertKeys(obj, strToSnakeCase, ignored);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy90by1zbmFrZS1jYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7O0NBRUMsR0FDRCxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDO0FBRS9COztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLE9BQU87SUFDaEQsT0FBT1AsWUFBWU0sS0FBS0osZ0JBQWdCSztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1yZWdpc3Rlci8uL25vZGVfbW9kdWxlcy9Ac2VuZGdyaWQvaGVscGVycy9oZWxwZXJzL3RvLXNuYWtlLWNhc2UuanM/MzdkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGVwZW5kZW5jaWVzXG4gKi9cbmNvbnN0IGNvbnZlcnRLZXlzID0gcmVxdWlyZSgnLi9jb252ZXJ0LWtleXMnKTtcbmNvbnN0IHN0clRvU25ha2VDYXNlID0gcmVxdWlyZSgnLi9zdHItdG8tc25ha2UtY2FzZScpO1xuXG4vKipcbiAqIENvbnZlcnQgb2JqZWN0IGtleXMgdG8gc25ha2UgY2FzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRvU25ha2VDYXNlKG9iaiwgaWdub3JlZCkge1xuICByZXR1cm4gY29udmVydEtleXMob2JqLCBzdHJUb1NuYWtlQ2FzZSwgaWdub3JlZCk7XG59O1xuIl0sIm5hbWVzIjpbImNvbnZlcnRLZXlzIiwicmVxdWlyZSIsInN0clRvU25ha2VDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRvU25ha2VDYXNlIiwib2JqIiwiaWdub3JlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/to-snake-case.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/validate-settings.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/validate-settings.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst validate = (parent, parentName, childName, childType)=>{\n    if (typeof parent === \"undefined\" || typeof parent[childName] === \"undefined\") {\n        return;\n    }\n    if (typeof parent[childName] !== childType) {\n        throw new Error(`${childType} expected for \\`${parentName}.${childName}\\``);\n    }\n};\nmodule.exports = {\n    validateMailSettings (settings) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Object expected for `mailSettings`\");\n        }\n        const { bcc, bypassListManagement, bypassSpamManagement, bypassBounceManagement, bypassUnsubscribeManagement, footer, sandboxMode, spamCheck } = settings;\n        validate(bcc, \"bcc\", \"enable\", \"boolean\");\n        validate(bcc, \"bcc\", \"email\", \"string\");\n        validate(bypassListManagement, \"bypassListManagement\", \"enable\", \"boolean\");\n        validate(bypassSpamManagement, \"bypassSpamManagement\", \"enable\", \"boolean\");\n        validate(bypassBounceManagement, \"bypassBounceManagement\", \"enable\", \"boolean\");\n        validate(bypassUnsubscribeManagement, \"bypassUnsubscribeManagement\", \"enable\", \"boolean\");\n        validate(footer, \"footer\", \"enable\", \"boolean\");\n        validate(footer, \"footer\", \"text\", \"string\");\n        validate(footer, \"footer\", \"html\", \"string\");\n        validate(sandboxMode, \"sandboxMode\", \"enable\", \"boolean\");\n        validate(spamCheck, \"spamCheck\", \"enable\", \"boolean\");\n        validate(spamCheck, \"spamCheck\", \"threshold\", \"number\");\n        validate(spamCheck, \"spamCheck\", \"postToUrl\", \"string\");\n    },\n    validateTrackingSettings (settings) {\n        if (typeof settings !== \"object\") {\n            throw new Error(\"Object expected for `trackingSettings`\");\n        }\n        const { clickTracking, openTracking, subscriptionTracking, ganalytics } = settings;\n        validate(clickTracking, \"clickTracking\", \"enable\", \"boolean\");\n        validate(clickTracking, \"clickTracking\", \"enableText\", \"boolean\");\n        validate(openTracking, \"openTracking\", \"enable\", \"boolean\");\n        validate(openTracking, \"openTracking\", \"substitutionTag\", \"string\");\n        validate(subscriptionTracking, \"subscriptionTracking\", \"enable\", \"boolean\");\n        validate(subscriptionTracking, \"subscriptionTracking\", \"text\", \"string\");\n        validate(subscriptionTracking, \"subscriptionTracking\", \"html\", \"string\");\n        validate(subscriptionTracking, \"subscriptionTracking\", \"substitutionTag\", \"string\");\n        validate(ganalytics, \"ganalytics\", \"enable\", \"boolean\");\n        validate(ganalytics, \"ganalytics\", \"utm_source\", \"string\");\n        validate(ganalytics, \"ganalytics\", \"utm_medium\", \"string\");\n        validate(ganalytics, \"ganalytics\", \"utm_term\", \"string\");\n        validate(ganalytics, \"ganalytics\", \"utm_content\", \"string\");\n        validate(ganalytics, \"ganalytics\", \"utm_campaign\", \"string\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy92YWxpZGF0ZS1zZXR0aW5ncy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVcsQ0FBQ0MsUUFBUUMsWUFBWUMsV0FBV0M7SUFDL0MsSUFBSSxPQUFPSCxXQUFXLGVBQWUsT0FBT0EsTUFBTSxDQUFDRSxVQUFVLEtBQUssYUFBYTtRQUM3RTtJQUNGO0lBQ0EsSUFBSSxPQUFPRixNQUFNLENBQUNFLFVBQVUsS0FBS0MsV0FBVztRQUMxQyxNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFRCxVQUFVLGdCQUFnQixFQUFFRixXQUFXLENBQUMsRUFBRUMsVUFBVSxFQUFFLENBQUM7SUFDNUU7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsc0JBQXFCQyxRQUFRO1FBQzNCLElBQUksT0FBT0EsYUFBYSxVQUFVO1lBQ2hDLE1BQU0sSUFBSUosTUFBTTtRQUNsQjtRQUNBLE1BQU0sRUFDSkssR0FBRyxFQUNIQyxvQkFBb0IsRUFDcEJDLG9CQUFvQixFQUNwQkMsc0JBQXNCLEVBQ3RCQywyQkFBMkIsRUFDM0JDLE1BQU0sRUFDTkMsV0FBVyxFQUNYQyxTQUFTLEVBQ1YsR0FBR1I7UUFDSlQsU0FBU1UsS0FBSyxPQUFPLFVBQVU7UUFDL0JWLFNBQVNVLEtBQUssT0FBTyxTQUFTO1FBQzlCVixTQUFTVyxzQkFBc0Isd0JBQXdCLFVBQVU7UUFDakVYLFNBQVNZLHNCQUFzQix3QkFBd0IsVUFBVTtRQUNqRVosU0FBU2Esd0JBQXdCLDBCQUEwQixVQUFVO1FBQ3JFYixTQUFTYyw2QkFBNkIsK0JBQStCLFVBQVU7UUFDL0VkLFNBQVNlLFFBQVEsVUFBVSxVQUFVO1FBQ3JDZixTQUFTZSxRQUFRLFVBQVUsUUFBUTtRQUNuQ2YsU0FBU2UsUUFBUSxVQUFVLFFBQVE7UUFDbkNmLFNBQVNnQixhQUFhLGVBQWUsVUFBVTtRQUMvQ2hCLFNBQVNpQixXQUFXLGFBQWEsVUFBVTtRQUMzQ2pCLFNBQVNpQixXQUFXLGFBQWEsYUFBYTtRQUM5Q2pCLFNBQVNpQixXQUFXLGFBQWEsYUFBYTtJQUNoRDtJQUVBQywwQkFBeUJULFFBQVE7UUFDL0IsSUFBSSxPQUFPQSxhQUFhLFVBQVU7WUFDaEMsTUFBTSxJQUFJSixNQUFNO1FBQ2xCO1FBQ0EsTUFBTSxFQUNKYyxhQUFhLEVBQ2JDLFlBQVksRUFDWkMsb0JBQW9CLEVBQ3BCQyxVQUFVLEVBQ1gsR0FBR2I7UUFDSlQsU0FBU21CLGVBQWUsaUJBQWlCLFVBQVU7UUFDbkRuQixTQUFTbUIsZUFBZSxpQkFBaUIsY0FBYztRQUN2RG5CLFNBQVNvQixjQUFjLGdCQUFnQixVQUFVO1FBQ2pEcEIsU0FBU29CLGNBQWMsZ0JBQWdCLG1CQUFtQjtRQUMxRHBCLFNBQVNxQixzQkFBc0Isd0JBQXdCLFVBQVU7UUFDakVyQixTQUFTcUIsc0JBQXNCLHdCQUF3QixRQUFRO1FBQy9EckIsU0FBU3FCLHNCQUFzQix3QkFBd0IsUUFBUTtRQUMvRHJCLFNBQVNxQixzQkFBc0Isd0JBQXdCLG1CQUFtQjtRQUMxRXJCLFNBQVNzQixZQUFZLGNBQWMsVUFBVTtRQUM3Q3RCLFNBQVNzQixZQUFZLGNBQWMsY0FBYztRQUNqRHRCLFNBQVNzQixZQUFZLGNBQWMsY0FBYztRQUNqRHRCLFNBQVNzQixZQUFZLGNBQWMsWUFBWTtRQUMvQ3RCLFNBQVNzQixZQUFZLGNBQWMsZUFBZTtRQUNsRHRCLFNBQVNzQixZQUFZLGNBQWMsZ0JBQWdCO0lBQ3JEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWF1dGgtcmVnaXN0ZXIvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy92YWxpZGF0ZS1zZXR0aW5ncy5qcz84ZWJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmFsaWRhdGUgPSAocGFyZW50LCBwYXJlbnROYW1lLCBjaGlsZE5hbWUsIGNoaWxkVHlwZSkgPT4ge1xuICBpZiAodHlwZW9mIHBhcmVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHBhcmVudFtjaGlsZE5hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHBhcmVudFtjaGlsZE5hbWVdICE9PSBjaGlsZFR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y2hpbGRUeXBlfSBleHBlY3RlZCBmb3IgXFxgJHtwYXJlbnROYW1lfS4ke2NoaWxkTmFtZX1cXGBgKVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGVNYWlsU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICBpZiAodHlwZW9mIHNldHRpbmdzICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgZXhwZWN0ZWQgZm9yIGBtYWlsU2V0dGluZ3NgJyk7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGJjYyxcbiAgICAgIGJ5cGFzc0xpc3RNYW5hZ2VtZW50LFxuICAgICAgYnlwYXNzU3BhbU1hbmFnZW1lbnQsXG4gICAgICBieXBhc3NCb3VuY2VNYW5hZ2VtZW50LFxuICAgICAgYnlwYXNzVW5zdWJzY3JpYmVNYW5hZ2VtZW50LFxuICAgICAgZm9vdGVyLFxuICAgICAgc2FuZGJveE1vZGUsXG4gICAgICBzcGFtQ2hlY2ssXG4gICAgfSA9IHNldHRpbmdzO1xuICAgIHZhbGlkYXRlKGJjYywgJ2JjYycsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKGJjYywgJ2JjYycsICdlbWFpbCcsICdzdHJpbmcnKTtcbiAgICB2YWxpZGF0ZShieXBhc3NMaXN0TWFuYWdlbWVudCwgJ2J5cGFzc0xpc3RNYW5hZ2VtZW50JywgJ2VuYWJsZScsICdib29sZWFuJyk7XG4gICAgdmFsaWRhdGUoYnlwYXNzU3BhbU1hbmFnZW1lbnQsICdieXBhc3NTcGFtTWFuYWdlbWVudCcsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKGJ5cGFzc0JvdW5jZU1hbmFnZW1lbnQsICdieXBhc3NCb3VuY2VNYW5hZ2VtZW50JywgJ2VuYWJsZScsICdib29sZWFuJyk7XG4gICAgdmFsaWRhdGUoYnlwYXNzVW5zdWJzY3JpYmVNYW5hZ2VtZW50LCAnYnlwYXNzVW5zdWJzY3JpYmVNYW5hZ2VtZW50JywgJ2VuYWJsZScsICdib29sZWFuJyk7XG4gICAgdmFsaWRhdGUoZm9vdGVyLCAnZm9vdGVyJywgJ2VuYWJsZScsICdib29sZWFuJyk7XG4gICAgdmFsaWRhdGUoZm9vdGVyLCAnZm9vdGVyJywgJ3RleHQnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoZm9vdGVyLCAnZm9vdGVyJywgJ2h0bWwnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoc2FuZGJveE1vZGUsICdzYW5kYm94TW9kZScsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKHNwYW1DaGVjaywgJ3NwYW1DaGVjaycsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKHNwYW1DaGVjaywgJ3NwYW1DaGVjaycsICd0aHJlc2hvbGQnLCAnbnVtYmVyJyk7XG4gICAgdmFsaWRhdGUoc3BhbUNoZWNrLCAnc3BhbUNoZWNrJywgJ3Bvc3RUb1VybCcsICdzdHJpbmcnKTtcbiAgfSxcblxuICB2YWxpZGF0ZVRyYWNraW5nU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICBpZiAodHlwZW9mIHNldHRpbmdzICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgZXhwZWN0ZWQgZm9yIGB0cmFja2luZ1NldHRpbmdzYCcpO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBjbGlja1RyYWNraW5nLFxuICAgICAgb3BlblRyYWNraW5nLFxuICAgICAgc3Vic2NyaXB0aW9uVHJhY2tpbmcsXG4gICAgICBnYW5hbHl0aWNzLFxuICAgIH0gPSBzZXR0aW5ncztcbiAgICB2YWxpZGF0ZShjbGlja1RyYWNraW5nLCAnY2xpY2tUcmFja2luZycsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKGNsaWNrVHJhY2tpbmcsICdjbGlja1RyYWNraW5nJywgJ2VuYWJsZVRleHQnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKG9wZW5UcmFja2luZywgJ29wZW5UcmFja2luZycsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKG9wZW5UcmFja2luZywgJ29wZW5UcmFja2luZycsICdzdWJzdGl0dXRpb25UYWcnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoc3Vic2NyaXB0aW9uVHJhY2tpbmcsICdzdWJzY3JpcHRpb25UcmFja2luZycsICdlbmFibGUnLCAnYm9vbGVhbicpO1xuICAgIHZhbGlkYXRlKHN1YnNjcmlwdGlvblRyYWNraW5nLCAnc3Vic2NyaXB0aW9uVHJhY2tpbmcnLCAndGV4dCcsICdzdHJpbmcnKTtcbiAgICB2YWxpZGF0ZShzdWJzY3JpcHRpb25UcmFja2luZywgJ3N1YnNjcmlwdGlvblRyYWNraW5nJywgJ2h0bWwnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoc3Vic2NyaXB0aW9uVHJhY2tpbmcsICdzdWJzY3JpcHRpb25UcmFja2luZycsICdzdWJzdGl0dXRpb25UYWcnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoZ2FuYWx5dGljcywgJ2dhbmFseXRpY3MnLCAnZW5hYmxlJywgJ2Jvb2xlYW4nKTtcbiAgICB2YWxpZGF0ZShnYW5hbHl0aWNzLCAnZ2FuYWx5dGljcycsICd1dG1fc291cmNlJywgJ3N0cmluZycpO1xuICAgIHZhbGlkYXRlKGdhbmFseXRpY3MsICdnYW5hbHl0aWNzJywgJ3V0bV9tZWRpdW0nLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoZ2FuYWx5dGljcywgJ2dhbmFseXRpY3MnLCAndXRtX3Rlcm0nLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoZ2FuYWx5dGljcywgJ2dhbmFseXRpY3MnLCAndXRtX2NvbnRlbnQnLCAnc3RyaW5nJyk7XG4gICAgdmFsaWRhdGUoZ2FuYWx5dGljcywgJ2dhbmFseXRpY3MnLCAndXRtX2NhbXBhaWduJywgJ3N0cmluZycpO1xuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsInBhcmVudCIsInBhcmVudE5hbWUiLCJjaGlsZE5hbWUiLCJjaGlsZFR5cGUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWxpZGF0ZU1haWxTZXR0aW5ncyIsInNldHRpbmdzIiwiYmNjIiwiYnlwYXNzTGlzdE1hbmFnZW1lbnQiLCJieXBhc3NTcGFtTWFuYWdlbWVudCIsImJ5cGFzc0JvdW5jZU1hbmFnZW1lbnQiLCJieXBhc3NVbnN1YnNjcmliZU1hbmFnZW1lbnQiLCJmb290ZXIiLCJzYW5kYm94TW9kZSIsInNwYW1DaGVjayIsInZhbGlkYXRlVHJhY2tpbmdTZXR0aW5ncyIsImNsaWNrVHJhY2tpbmciLCJvcGVuVHJhY2tpbmciLCJzdWJzY3JpcHRpb25UcmFja2luZyIsImdhbmFseXRpY3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/validate-settings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/helpers/wrap-substitutions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/helpers/wrap-substitutions.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Wrap substitutions\n */ module.exports = function wrap(substitutions, left = \"{{\", right = \"}}\") {\n    //Process arrays\n    if (Array.isArray(substitutions)) {\n        return substitutions.map((subs)=>wrap(subs, left, right));\n    }\n    //Initialize new wrapped object\n    const wrapped = {};\n    //Map substitutions and ensure string for value\n    for(const key in substitutions){\n        //istanbul ignore else\n        if (substitutions.hasOwnProperty(key)) {\n            wrapped[left + key + right] = String(substitutions[key]);\n        }\n    }\n    //Return wrapped substitutions\n    return wrapped;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaGVscGVycy93cmFwLXN1YnN0aXR1dGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUNEQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsYUFBYSxFQUFFQyxPQUFPLElBQUksRUFBRUMsUUFBUSxJQUFJO0lBRXJFLGdCQUFnQjtJQUNoQixJQUFJQyxNQUFNQyxPQUFPLENBQUNKLGdCQUFnQjtRQUNoQyxPQUFPQSxjQUFjSyxHQUFHLENBQUNDLENBQUFBLE9BQVFQLEtBQUtPLE1BQU1MLE1BQU1DO0lBQ3BEO0lBRUEsK0JBQStCO0lBQy9CLE1BQU1LLFVBQVUsQ0FBQztJQUVqQiwrQ0FBK0M7SUFDL0MsSUFBSyxNQUFNQyxPQUFPUixjQUFlO1FBQy9CLHNCQUFzQjtRQUN0QixJQUFJQSxjQUFjUyxjQUFjLENBQUNELE1BQU07WUFDckNELE9BQU8sQ0FBQ04sT0FBT08sTUFBTU4sTUFBTSxHQUFHUSxPQUFPVixhQUFhLENBQUNRLElBQUk7UUFDekQ7SUFDRjtJQUVBLDhCQUE4QjtJQUM5QixPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2hlbHBlcnMvd3JhcC1zdWJzdGl0dXRpb25zLmpzPzk5ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdyYXAgc3Vic3RpdHV0aW9uc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdyYXAoc3Vic3RpdHV0aW9ucywgbGVmdCA9ICd7eycsIHJpZ2h0ID0gJ319Jykge1xuXG4gIC8vUHJvY2VzcyBhcnJheXNcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3Vic3RpdHV0aW9ucykpIHtcbiAgICByZXR1cm4gc3Vic3RpdHV0aW9ucy5tYXAoc3VicyA9PiB3cmFwKHN1YnMsIGxlZnQsIHJpZ2h0KSk7XG4gIH1cblxuICAvL0luaXRpYWxpemUgbmV3IHdyYXBwZWQgb2JqZWN0XG4gIGNvbnN0IHdyYXBwZWQgPSB7fTtcblxuICAvL01hcCBzdWJzdGl0dXRpb25zIGFuZCBlbnN1cmUgc3RyaW5nIGZvciB2YWx1ZVxuICBmb3IgKGNvbnN0IGtleSBpbiBzdWJzdGl0dXRpb25zKSB7XG4gICAgLy9pc3RhbmJ1bCBpZ25vcmUgZWxzZVxuICAgIGlmIChzdWJzdGl0dXRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHdyYXBwZWRbbGVmdCArIGtleSArIHJpZ2h0XSA9IFN0cmluZyhzdWJzdGl0dXRpb25zW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vUmV0dXJuIHdyYXBwZWQgc3Vic3RpdHV0aW9uc1xuICByZXR1cm4gd3JhcHBlZDtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndyYXAiLCJzdWJzdGl0dXRpb25zIiwibGVmdCIsInJpZ2h0IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwic3VicyIsIndyYXBwZWQiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIlN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/helpers/wrap-substitutions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/helpers/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@sendgrid/helpers/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Load support assets\n */ const classes = __webpack_require__(/*! ./classes */ \"(rsc)/./node_modules/@sendgrid/helpers/classes/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@sendgrid/helpers/helpers/index.js\");\n/**\n * Export\n */ module.exports = {\n    classes,\n    helpers\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL2hlbHBlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUNELE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDO0FBRXhCOztDQUVDLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRztJQUFDSjtJQUFTRTtBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9oZWxwZXJzL2luZGV4LmpzPzc1MzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIExvYWQgc3VwcG9ydCBhc3NldHNcbiAqL1xuY29uc3QgY2xhc3NlcyA9IHJlcXVpcmUoJy4vY2xhc3NlcycpO1xuY29uc3QgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG4vKipcbiAqIEV4cG9ydFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtjbGFzc2VzLCBoZWxwZXJzfTtcbiJdLCJuYW1lcyI6WyJjbGFzc2VzIiwicmVxdWlyZSIsImhlbHBlcnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/helpers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/mail/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@sendgrid/mail/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst mailer = __webpack_require__(/*! ./src/mail */ \"(rsc)/./node_modules/@sendgrid/mail/src/mail.js\");\nconst MailService = __webpack_require__(/*! ./src/classes/mail-service */ \"(rsc)/./node_modules/@sendgrid/mail/src/classes/mail-service.js\");\nmodule.exports = mailer;\nmodule.exports.MailService = MailService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL21haWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUU1QkUsT0FBT0MsT0FBTyxHQUFHSjtBQUNqQkcsMEJBQTBCLEdBQUdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9tYWlsL2luZGV4LmpzPzE1M2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBtYWlsZXIgPSByZXF1aXJlKCcuL3NyYy9tYWlsJyk7XG5jb25zdCBNYWlsU2VydmljZSA9IHJlcXVpcmUoJy4vc3JjL2NsYXNzZXMvbWFpbC1zZXJ2aWNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbGVyO1xubW9kdWxlLmV4cG9ydHMuTWFpbFNlcnZpY2UgPSBNYWlsU2VydmljZTtcbiJdLCJuYW1lcyI6WyJtYWlsZXIiLCJyZXF1aXJlIiwiTWFpbFNlcnZpY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/mail/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/mail/src/classes/mail-service.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sendgrid/mail/src/classes/mail-service.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const { Client } = __webpack_require__(/*! @sendgrid/client */ \"(rsc)/./node_modules/@sendgrid/client/index.js\");\nconst { classes: { Mail } } = __webpack_require__(/*! @sendgrid/helpers */ \"(rsc)/./node_modules/@sendgrid/helpers/index.js\");\n/**\n * Mail service class\n */ class MailService {\n    /**\n   * Constructor\n   */ constructor(){\n        // Set client, initialize substitution wrappers and secret rules filter.\n        this.setClient(new Client());\n        this.setSubstitutionWrappers(\"{{\", \"}}\");\n        this.secretRules = [];\n    }\n    /**\n   * Set client\n   */ setClient(client) {\n        this.client = client;\n        return this;\n    }\n    /**\n   * SendGrid API key passthrough for convenience.\n   */ setApiKey(apiKey) {\n        this.client.setApiKey(apiKey);\n        return this;\n    }\n    /**\n   * Twilio Email Auth passthrough for convenience.\n   */ setTwilioEmailAuth(username, password) {\n        this.client.setTwilioEmailAuth(username, password);\n    }\n    /**\n   * Set client timeout\n   */ setTimeout(timeout) {\n        if (typeof timeout === \"undefined\") {\n            return;\n        }\n        this.client.setDefaultRequest(\"timeout\", timeout);\n    }\n    /**\n   * Set substitution wrappers\n   */ setSubstitutionWrappers(left, right) {\n        if (typeof left === \"undefined\" || typeof right === \"undefined\") {\n            throw new Error(\"Must provide both left and right side wrappers\");\n        }\n        if (!Array.isArray(this.substitutionWrappers)) {\n            this.substitutionWrappers = [];\n        }\n        this.substitutionWrappers[0] = left;\n        this.substitutionWrappers[1] = right;\n        return this;\n    }\n    /**\n   * Set secret rules for filtering the e-mail content\n   */ setSecretRules(rules) {\n        if (!(rules instanceof Array)) {\n            rules = [\n                rules\n            ];\n        }\n        const tmpRules = rules.map(function(rule) {\n            const ruleType = typeof rule;\n            if (ruleType === \"string\") {\n                return {\n                    pattern: new RegExp(rule)\n                };\n            } else if (ruleType === \"object\") {\n                // normalize rule object\n                if (rule instanceof RegExp) {\n                    rule = {\n                        pattern: rule\n                    };\n                } else if (rule.hasOwnProperty(\"pattern\") && typeof rule.pattern === \"string\") {\n                    rule.pattern = new RegExp(rule.pattern);\n                }\n                try {\n                    // test if rule.pattern is a valid regex\n                    rule.pattern.test(\"\");\n                    return rule;\n                } catch (err) {\n                // continue regardless of error\n                }\n            }\n        });\n        this.secretRules = tmpRules.filter(function(val) {\n            return val;\n        });\n    }\n    /**\n   * Check if the e-mail is safe to be sent\n   */ filterSecrets(body) {\n        if (typeof body === \"object\" && !body.hasOwnProperty(\"content\")) {\n            return;\n        }\n        const self = this;\n        body.content.forEach(function(data) {\n            self.secretRules.forEach(function(rule) {\n                if (rule.hasOwnProperty(\"pattern\") && !rule.pattern.test(data.value)) {\n                    return;\n                }\n                let message = `The pattern '${rule.pattern}'`;\n                if (rule.name) {\n                    message += `identified by '${rule.name}'`;\n                }\n                message += \" was found in the Mail content!\";\n                throw new Error(message);\n            });\n        });\n    }\n    /**\n   * Send email\n   */ send(data, isMultiple = false, cb) {\n        //Callback as second parameter\n        if (typeof isMultiple === \"function\") {\n            cb = isMultiple;\n            isMultiple = false;\n        }\n        //Array? Send in parallel\n        if (Array.isArray(data)) {\n            //Create promise\n            const promise = Promise.all(data.map((item)=>{\n                return this.send(item, isMultiple);\n            }));\n            //Execute callback if provided\n            if (cb) {\n                promise.then((result)=>cb(null, result)).catch((error)=>cb(error, null));\n            }\n            //Return promise\n            return promise;\n        }\n        //Send mail\n        try {\n            //Append multiple flag to data if not set\n            if (typeof data.isMultiple === \"undefined\") {\n                data.isMultiple = isMultiple;\n            }\n            //Append global substitution wrappers if not set in data\n            if (typeof data.substitutionWrappers === \"undefined\") {\n                data.substitutionWrappers = this.substitutionWrappers;\n            }\n            //Create Mail instance from data and get JSON body for request\n            const mail = Mail.create(data);\n            const body = mail.toJSON();\n            //Filters the Mail body to avoid sensitive content leakage\n            this.filterSecrets(body);\n            //Create request\n            const request = {\n                method: \"POST\",\n                url: \"/v3/mail/send\",\n                headers: mail.headers,\n                body\n            };\n            //Send\n            return this.client.request(request, cb);\n        } catch (error) {\n            //Pass to callback if provided\n            if (cb) {\n                // eslint-disable-next-line callback-return\n                cb(error, null);\n            }\n            //Reject promise\n            return Promise.reject(error);\n        }\n    }\n    /**\n   * Send multiple emails (shortcut)\n   */ sendMultiple(data, cb) {\n        return this.send(data, true, cb);\n    }\n}\n//Export class\nmodule.exports = MailService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/mail/src/classes/mail-service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/mail/src/mail.js":
/*!*************************************************!*\
  !*** ./node_modules/@sendgrid/mail/src/mail.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Dependencies\n */ const MailService = __webpack_require__(/*! ./classes/mail-service */ \"(rsc)/./node_modules/@sendgrid/mail/src/classes/mail-service.js\");\n//Export singleton instance\nmodule.exports = new MailService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNlbmRncmlkL21haWwvc3JjL21haWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQTs7Q0FFQyxHQUNELE1BQU1BLGNBQWNDLG1CQUFPQSxDQUFDO0FBRTVCLDJCQUEyQjtBQUMzQkMsT0FBT0MsT0FBTyxHQUFHLElBQUlIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL0BzZW5kZ3JpZC9tYWlsL3NyYy9tYWlsLmpzPzY5MTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5jb25zdCBNYWlsU2VydmljZSA9IHJlcXVpcmUoJy4vY2xhc3Nlcy9tYWlsLXNlcnZpY2UnKTtcblxuLy9FeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNYWlsU2VydmljZSgpO1xuIl0sIm5hbWVzIjpbIk1haWxTZXJ2aWNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sendgrid/mail/src/mail.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sendgrid/client/package.json":
/*!****************************************************!*\
  !*** ./node_modules/@sendgrid/client/package.json ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"@sendgrid/client","description":"Twilio SendGrid NodeJS API client","version":"8.1.0","author":"Twilio SendGrid <help@twilio.com> (sendgrid.com)","contributors":["Kyle Partridge <kyle.partridge@sendgrid.com>","David Tomberlin <david.tomberlin@sendgrid.com>","Swift <swift@sendgrid.com>","Brandon West <brandon.west@sendgrid.com>","Scott Motte <scott.motte@sendgrid.com>","Robert Acosta <robert.acosta@sendgrid.com>","Elmer Thomas <ethomas@twilio.com>","Adam Reis <adam@reis.nz>"],"license":"MIT","homepage":"https://sendgrid.com","repository":{"type":"git","url":"git://github.com/sendgrid/sendgrid-nodejs.git"},"publishConfig":{"access":"public"},"main":"index.js","engines":{"node":">=12.*"},"dependencies":{"@sendgrid/helpers":"^8.0.0","axios":"^1.6.0"},"devDependencies":{"chai":"4.2.0","nock":"^10.0.6"},"resolutions":{"chai":"4.2.0"},"tags":["http","rest","api","mail","sendgrid"],"gitHead":"2d4d51214d63961d3138421c297790b479c12c26"}');

/***/ })

};
;