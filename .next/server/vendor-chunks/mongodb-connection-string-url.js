"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb-connection-string-url";
exports.ids = ["vendor-chunks/mongodb-connection-string-url"];
exports.modules = {

/***/ "(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mongodb-connection-string-url/lib/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CommaAndColonSeparatedRecord = exports.ConnectionString = exports.redactConnectionString = void 0;\nconst whatwg_url_1 = __webpack_require__(/*! whatwg-url */ \"(ssr)/./node_modules/whatwg-url/index.js\");\nconst redact_1 = __webpack_require__(/*! ./redact */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js\");\nObject.defineProperty(exports, \"redactConnectionString\", ({\n    enumerable: true,\n    get: function() {\n        return redact_1.redactConnectionString;\n    }\n}));\nconst DUMMY_HOSTNAME = \"__this_is_a_placeholder__\";\nfunction connectionStringHasValidScheme(connectionString) {\n    return connectionString.startsWith(\"mongodb://\") || connectionString.startsWith(\"mongodb+srv://\");\n}\nconst HOSTS_REGEX = /^(?<protocol>[^/]+):\\/\\/(?:(?<username>[^:@]*)(?::(?<password>[^@]*))?@)?(?<hosts>(?!:)[^/?@]*)(?<rest>.*)/;\nclass CaseInsensitiveMap extends Map {\n    delete(name) {\n        return super.delete(this._normalizeKey(name));\n    }\n    get(name) {\n        return super.get(this._normalizeKey(name));\n    }\n    has(name) {\n        return super.has(this._normalizeKey(name));\n    }\n    set(name, value) {\n        return super.set(this._normalizeKey(name), value);\n    }\n    _normalizeKey(name) {\n        name = `${name}`;\n        for (const key of this.keys()){\n            if (key.toLowerCase() === name.toLowerCase()) {\n                name = key;\n                break;\n            }\n        }\n        return name;\n    }\n}\nfunction caseInsenstiveURLSearchParams(Ctor) {\n    return class CaseInsenstiveURLSearchParams extends Ctor {\n        append(name, value) {\n            return super.append(this._normalizeKey(name), value);\n        }\n        delete(name) {\n            return super.delete(this._normalizeKey(name));\n        }\n        get(name) {\n            return super.get(this._normalizeKey(name));\n        }\n        getAll(name) {\n            return super.getAll(this._normalizeKey(name));\n        }\n        has(name) {\n            return super.has(this._normalizeKey(name));\n        }\n        set(name, value) {\n            return super.set(this._normalizeKey(name), value);\n        }\n        keys() {\n            return super.keys();\n        }\n        values() {\n            return super.values();\n        }\n        entries() {\n            return super.entries();\n        }\n        [Symbol.iterator]() {\n            return super[Symbol.iterator]();\n        }\n        _normalizeKey(name) {\n            return CaseInsensitiveMap.prototype._normalizeKey.call(this, name);\n        }\n    };\n}\nclass URLWithoutHost extends whatwg_url_1.URL {\n}\nclass MongoParseError extends Error {\n    get name() {\n        return \"MongoParseError\";\n    }\n}\nclass ConnectionString extends URLWithoutHost {\n    constructor(uri, options = {}){\n        var _a;\n        const { looseValidation } = options;\n        if (!looseValidation && !connectionStringHasValidScheme(uri)) {\n            throw new MongoParseError('Invalid scheme, expected connection string to start with \"mongodb://\" or \"mongodb+srv://\"');\n        }\n        const match = uri.match(HOSTS_REGEX);\n        if (!match) {\n            throw new MongoParseError(`Invalid connection string \"${uri}\"`);\n        }\n        const { protocol, username, password, hosts, rest } = (_a = match.groups) !== null && _a !== void 0 ? _a : {};\n        if (!looseValidation) {\n            if (!protocol || !hosts) {\n                throw new MongoParseError(`Protocol and host list are required in \"${uri}\"`);\n            }\n            try {\n                decodeURIComponent(username !== null && username !== void 0 ? username : \"\");\n                decodeURIComponent(password !== null && password !== void 0 ? password : \"\");\n            } catch (err) {\n                throw new MongoParseError(err.message);\n            }\n            const illegalCharacters = /[:/?#[\\]@]/gi;\n            if (username === null || username === void 0 ? void 0 : username.match(illegalCharacters)) {\n                throw new MongoParseError(`Username contains unescaped characters ${username}`);\n            }\n            if (!username || !password) {\n                const uriWithoutProtocol = uri.replace(`${protocol}://`, \"\");\n                if (uriWithoutProtocol.startsWith(\"@\") || uriWithoutProtocol.startsWith(\":\")) {\n                    throw new MongoParseError(\"URI contained empty userinfo section\");\n                }\n            }\n            if (password === null || password === void 0 ? void 0 : password.match(illegalCharacters)) {\n                throw new MongoParseError(\"Password contains unescaped characters\");\n            }\n        }\n        let authString = \"\";\n        if (typeof username === \"string\") authString += username;\n        if (typeof password === \"string\") authString += `:${password}`;\n        if (authString) authString += \"@\";\n        try {\n            super(`${protocol.toLowerCase()}://${authString}${DUMMY_HOSTNAME}${rest}`);\n        } catch (err) {\n            if (looseValidation) {\n                new ConnectionString(uri, {\n                    ...options,\n                    looseValidation: false\n                });\n            }\n            if (typeof err.message === \"string\") {\n                err.message = err.message.replace(DUMMY_HOSTNAME, hosts);\n            }\n            throw err;\n        }\n        this._hosts = hosts.split(\",\");\n        if (!looseValidation) {\n            if (this.isSRV && this.hosts.length !== 1) {\n                throw new MongoParseError(\"mongodb+srv URI cannot have multiple service names\");\n            }\n            if (this.isSRV && this.hosts.some((host)=>host.includes(\":\"))) {\n                throw new MongoParseError(\"mongodb+srv URI cannot have port number\");\n            }\n        }\n        if (!this.pathname) {\n            this.pathname = \"/\";\n        }\n        Object.setPrototypeOf(this.searchParams, caseInsenstiveURLSearchParams(this.searchParams.constructor).prototype);\n    }\n    get host() {\n        return DUMMY_HOSTNAME;\n    }\n    set host(_ignored) {\n        throw new Error(\"No single host for connection string\");\n    }\n    get hostname() {\n        return DUMMY_HOSTNAME;\n    }\n    set hostname(_ignored) {\n        throw new Error(\"No single host for connection string\");\n    }\n    get port() {\n        return \"\";\n    }\n    set port(_ignored) {\n        throw new Error(\"No single host for connection string\");\n    }\n    get href() {\n        return this.toString();\n    }\n    set href(_ignored) {\n        throw new Error(\"Cannot set href for connection strings\");\n    }\n    get isSRV() {\n        return this.protocol.includes(\"srv\");\n    }\n    get hosts() {\n        return this._hosts;\n    }\n    set hosts(list) {\n        this._hosts = list;\n    }\n    toString() {\n        return super.toString().replace(DUMMY_HOSTNAME, this.hosts.join(\",\"));\n    }\n    clone() {\n        return new ConnectionString(this.toString(), {\n            looseValidation: true\n        });\n    }\n    redact(options) {\n        return (0, redact_1.redactValidConnectionString)(this, options);\n    }\n    typedSearchParams() {\n        const sametype =  false && 0;\n        return this.searchParams;\n    }\n    [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        const { href, origin, protocol, username, password, hosts, pathname, search, searchParams, hash } = this;\n        return {\n            href,\n            origin,\n            protocol,\n            username,\n            password,\n            hosts,\n            pathname,\n            search,\n            searchParams,\n            hash\n        };\n    }\n}\nexports.ConnectionString = ConnectionString;\nclass CommaAndColonSeparatedRecord extends CaseInsensitiveMap {\n    constructor(from){\n        super();\n        for (const entry of (from !== null && from !== void 0 ? from : \"\").split(\",\")){\n            if (!entry) continue;\n            const colonIndex = entry.indexOf(\":\");\n            if (colonIndex === -1) {\n                this.set(entry, \"\");\n            } else {\n                this.set(entry.slice(0, colonIndex), entry.slice(colonIndex + 1));\n            }\n        }\n    }\n    toString() {\n        return [\n            ...this\n        ].map((entry)=>entry.join(\":\")).join(\",\");\n    }\n}\nexports.CommaAndColonSeparatedRecord = CommaAndColonSeparatedRecord;\nexports[\"default\"] = ConnectionString; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js":
/*!******************************************************************!*\
  !*** ./node_modules/mongodb-connection-string-url/lib/redact.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.redactConnectionString = exports.redactValidConnectionString = void 0;\nconst index_1 = __importStar(__webpack_require__(/*! ./index */ \"(ssr)/./node_modules/mongodb-connection-string-url/lib/index.js\"));\nfunction redactValidConnectionString(inputUrl, options) {\n    var _a, _b;\n    const url = inputUrl.clone();\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : \"_credentials_\";\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    if ((url.username || url.password) && redactUsernames) {\n        url.username = replacementString;\n        url.password = \"\";\n    } else if (url.password) {\n        url.password = replacementString;\n    }\n    if (url.searchParams.has(\"authMechanismProperties\")) {\n        const props = new index_1.CommaAndColonSeparatedRecord(url.searchParams.get(\"authMechanismProperties\"));\n        if (props.get(\"AWS_SESSION_TOKEN\")) {\n            props.set(\"AWS_SESSION_TOKEN\", replacementString);\n            url.searchParams.set(\"authMechanismProperties\", props.toString());\n        }\n    }\n    if (url.searchParams.has(\"tlsCertificateKeyFilePassword\")) {\n        url.searchParams.set(\"tlsCertificateKeyFilePassword\", replacementString);\n    }\n    if (url.searchParams.has(\"proxyUsername\") && redactUsernames) {\n        url.searchParams.set(\"proxyUsername\", replacementString);\n    }\n    if (url.searchParams.has(\"proxyPassword\")) {\n        url.searchParams.set(\"proxyPassword\", replacementString);\n    }\n    return url;\n}\nexports.redactValidConnectionString = redactValidConnectionString;\nfunction redactConnectionString(uri, options) {\n    var _a, _b;\n    const replacementString = (_a = options === null || options === void 0 ? void 0 : options.replacementString) !== null && _a !== void 0 ? _a : \"<credentials>\";\n    const redactUsernames = (_b = options === null || options === void 0 ? void 0 : options.redactUsernames) !== null && _b !== void 0 ? _b : true;\n    let parsed;\n    try {\n        parsed = new index_1.default(uri);\n    } catch (_c) {}\n    if (parsed) {\n        options = {\n            ...options,\n            replacementString: \"___credentials___\"\n        };\n        return parsed.redact(options).toString().replace(/___credentials___/g, replacementString);\n    }\n    const R = replacementString;\n    const replacements = [\n        (uri)=>uri.replace(redactUsernames ? /(\\/\\/)(.*)(@)/g : /(\\/\\/[^@]*:)(.*)(@)/g, `$1${R}$3`),\n        (uri)=>uri.replace(/(AWS_SESSION_TOKEN(:|%3A))([^,&]+)/gi, `$1${R}`),\n        (uri)=>uri.replace(/(tlsCertificateKeyFilePassword=)([^&]+)/gi, `$1${R}`),\n        (uri)=>redactUsernames ? uri.replace(/(proxyUsername=)([^&]+)/gi, `$1${R}`) : uri,\n        (uri)=>uri.replace(/(proxyPassword=)([^&]+)/gi, `$1${R}`)\n    ];\n    for (const replacer of replacements){\n        uri = replacer(uri);\n    }\n    return uri;\n}\nexports.redactConnectionString = redactConnectionString; //# sourceMappingURL=redact.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbW9uZ29kYi1jb25uZWN0aW9uLXN0cmluZy11cmwvbGliL3JlZGFjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixJQUFLLElBQUksSUFBSSxDQUFDQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsSUFBSyxJQUFJLElBQUksQ0FBQ0Esa0JBQWtCLElBQU1mLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVjLENBQUM7SUFDekZoQixPQUFPYyxjQUFjLENBQUNaLEdBQUcsV0FBVztRQUFFVSxZQUFZO1FBQU1LLE9BQU9EO0lBQUU7QUFDckUsSUFBSyxTQUFTZCxDQUFDLEVBQUVjLENBQUM7SUFDZGQsQ0FBQyxDQUFDLFVBQVUsR0FBR2M7QUFDbkI7QUFDQSxJQUFJRSxlQUFlLElBQUssSUFBSSxJQUFJLENBQUNBLFlB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QUFRO1FBQ1JoQixVQUFVO1lBQUUsR0FBR0EsT0FBTztZQUFFSyxtQkFBbUI7UUFBb0I7UUFDL0QsT0FBT1csT0FBT0csTUFBTSxDQUFDbkIsU0FBU2MsUUFBUSxHQUFHTSxPQUFPLENBQUMsc0JBQXNCZjtJQUMzRTtJQUNBLE1BQU1nQixJQUFJaEI7SUFDVixNQUFNaUIsZUFBZTtRQUNqQlAsQ0FBQUEsTUFBT0EsSUFBSUssT0FBTyxDQUFDZCxrQkFBa0IsbUJBQW1CLHdCQUF3QixDQUFDLEVBQUUsRUFBRWUsRUFBRSxFQUFFLENBQUM7UUFDMUZOLENBQUFBLE1BQU9BLElBQUlLLE9BQU8sQ0FBQyx3Q0FBd0MsQ0FBQyxFQUFFLEVBQUVDLEVBQUUsQ0FBQztRQUNuRU4sQ0FBQUEsTUFBT0EsSUFBSUssT0FBTyxDQUFDLDZDQUE2QyxDQUFDLEVBQUUsRUFBRUMsRUFBRSxDQUFDO1FBQ3hFTixDQUFBQSxNQUFPVCxrQkFBa0JTLElBQUlLLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLEVBQUVDLEVBQUUsQ0FBQyxJQUFJTjtRQUM5RUEsQ0FBQUEsTUFBT0EsSUFBSUssT0FBTyxDQUFDLDZCQUE2QixDQUFDLEVBQUUsRUFBRUMsRUFBRSxDQUFDO0tBQzNEO0lBQ0QsS0FBSyxNQUFNRSxZQUFZRCxhQUFjO1FBQ2pDUCxNQUFNUSxTQUFTUjtJQUNuQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQXJCLDhCQUE4QixHQUFHQyx3QkFDakMsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hdXRoLXJlZ2lzdGVyLy4vbm9kZV9tb2R1bGVzL21vbmdvZGItY29ubmVjdGlvbi1zdHJpbmctdXJsL2xpYi9yZWRhY3QuanM/ZGRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWRhY3RDb25uZWN0aW9uU3RyaW5nID0gZXhwb3J0cy5yZWRhY3RWYWxpZENvbm5lY3Rpb25TdHJpbmcgPSB2b2lkIDA7XG5jb25zdCBpbmRleF8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2luZGV4XCIpKTtcbmZ1bmN0aW9uIHJlZGFjdFZhbGlkQ29ubmVjdGlvblN0cmluZyhpbnB1dFVybCwgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdXJsID0gaW5wdXRVcmwuY2xvbmUoKTtcbiAgICBjb25zdCByZXBsYWNlbWVudFN0cmluZyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZXBsYWNlbWVudFN0cmluZykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ19jcmVkZW50aWFsc18nO1xuICAgIGNvbnN0IHJlZGFjdFVzZXJuYW1lcyA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZWRhY3RVc2VybmFtZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgaWYgKCh1cmwudXNlcm5hbWUgfHwgdXJsLnBhc3N3b3JkKSAmJiByZWRhY3RVc2VybmFtZXMpIHtcbiAgICAgICAgdXJsLnVzZXJuYW1lID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIH1cbiAgICBlbHNlIGlmICh1cmwucGFzc3dvcmQpIHtcbiAgICAgICAgdXJsLnBhc3N3b3JkID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgfVxuICAgIGlmICh1cmwuc2VhcmNoUGFyYW1zLmhhcygnYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMnKSkge1xuICAgICAgICBjb25zdCBwcm9wcyA9IG5ldyBpbmRleF8xLkNvbW1hQW5kQ29sb25TZXBhcmF0ZWRSZWNvcmQodXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2F1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzJykpO1xuICAgICAgICBpZiAocHJvcHMuZ2V0KCdBV1NfU0VTU0lPTl9UT0tFTicpKSB7XG4gICAgICAgICAgICBwcm9wcy5zZXQoJ0FXU19TRVNTSU9OX1RPS0VOJywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2F1dGhNZWNoYW5pc21Qcm9wZXJ0aWVzJywgcHJvcHMudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVybC5zZWFyY2hQYXJhbXMuaGFzKCd0bHNDZXJ0aWZpY2F0ZUtleUZpbGVQYXNzd29yZCcpKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCd0bHNDZXJ0aWZpY2F0ZUtleUZpbGVQYXNzd29yZCcsIHJlcGxhY2VtZW50U3RyaW5nKTtcbiAgICB9XG4gICAgaWYgKHVybC5zZWFyY2hQYXJhbXMuaGFzKCdwcm94eVVzZXJuYW1lJykgJiYgcmVkYWN0VXNlcm5hbWVzKSB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdwcm94eVVzZXJuYW1lJywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgIH1cbiAgICBpZiAodXJsLnNlYXJjaFBhcmFtcy5oYXMoJ3Byb3h5UGFzc3dvcmQnKSkge1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncHJveHlQYXNzd29yZCcsIHJlcGxhY2VtZW50U3RyaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn1cbmV4cG9ydHMucmVkYWN0VmFsaWRDb25uZWN0aW9uU3RyaW5nID0gcmVkYWN0VmFsaWRDb25uZWN0aW9uU3RyaW5nO1xuZnVuY3Rpb24gcmVkYWN0Q29ubmVjdGlvblN0cmluZyh1cmksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHJlcGxhY2VtZW50U3RyaW5nID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlcGxhY2VtZW50U3RyaW5nKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnPGNyZWRlbnRpYWxzPic7XG4gICAgY29uc3QgcmVkYWN0VXNlcm5hbWVzID0gKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJlZGFjdFVzZXJuYW1lcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogdHJ1ZTtcbiAgICBsZXQgcGFyc2VkO1xuICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZCA9IG5ldyBpbmRleF8xLmRlZmF1bHQodXJpKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9jKSB7IH1cbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHJlcGxhY2VtZW50U3RyaW5nOiAnX19fY3JlZGVudGlhbHNfX18nIH07XG4gICAgICAgIHJldHVybiBwYXJzZWQucmVkYWN0KG9wdGlvbnMpLnRvU3RyaW5nKCkucmVwbGFjZSgvX19fY3JlZGVudGlhbHNfX18vZywgcmVwbGFjZW1lbnRTdHJpbmcpO1xuICAgIH1cbiAgICBjb25zdCBSID0gcmVwbGFjZW1lbnRTdHJpbmc7XG4gICAgY29uc3QgcmVwbGFjZW1lbnRzID0gW1xuICAgICAgICB1cmkgPT4gdXJpLnJlcGxhY2UocmVkYWN0VXNlcm5hbWVzID8gLyhcXC9cXC8pKC4qKShAKS9nIDogLyhcXC9cXC9bXkBdKjopKC4qKShAKS9nLCBgJDEke1J9JDNgKSxcbiAgICAgICAgdXJpID0+IHVyaS5yZXBsYWNlKC8oQVdTX1NFU1NJT05fVE9LRU4oOnwlM0EpKShbXiwmXSspL2dpLCBgJDEke1J9YCksXG4gICAgICAgIHVyaSA9PiB1cmkucmVwbGFjZSgvKHRsc0NlcnRpZmljYXRlS2V5RmlsZVBhc3N3b3JkPSkoW14mXSspL2dpLCBgJDEke1J9YCksXG4gICAgICAgIHVyaSA9PiByZWRhY3RVc2VybmFtZXMgPyB1cmkucmVwbGFjZSgvKHByb3h5VXNlcm5hbWU9KShbXiZdKykvZ2ksIGAkMSR7Un1gKSA6IHVyaSxcbiAgICAgICAgdXJpID0+IHVyaS5yZXBsYWNlKC8ocHJveHlQYXNzd29yZD0pKFteJl0rKS9naSwgYCQxJHtSfWApXG4gICAgXTtcbiAgICBmb3IgKGNvbnN0IHJlcGxhY2VyIG9mIHJlcGxhY2VtZW50cykge1xuICAgICAgICB1cmkgPSByZXBsYWNlcih1cmkpO1xuICAgIH1cbiAgICByZXR1cm4gdXJpO1xufVxuZXhwb3J0cy5yZWRhY3RDb25uZWN0aW9uU3RyaW5nID0gcmVkYWN0Q29ubmVjdGlvblN0cmluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGFjdC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwb3J0cyIsInJlZGFjdENvbm5lY3Rpb25TdHJpbmciLCJyZWRhY3RWYWxpZENvbm5lY3Rpb25TdHJpbmciLCJpbmRleF8xIiwicmVxdWlyZSIsImlucHV0VXJsIiwib3B0aW9ucyIsIl9hIiwiX2IiLCJ1cmwiLCJjbG9uZSIsInJlcGxhY2VtZW50U3RyaW5nIiwicmVkYWN0VXNlcm5hbWVzIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInNlYXJjaFBhcmFtcyIsImhhcyIsInByb3BzIiwiQ29tbWFBbmRDb2xvblNlcGFyYXRlZFJlY29yZCIsInNldCIsInRvU3RyaW5nIiwidXJpIiwicGFyc2VkIiwiZGVmYXVsdCIsIl9jIiwicmVkYWN0IiwicmVwbGFjZSIsIlIiLCJyZXBsYWNlbWVudHMiLCJyZXBsYWNlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mongodb-connection-string-url/lib/redact.js\n");

/***/ })

};
;